
P3__FreeRTos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08009998  08009998  00019998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bc8  08009bc8  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  08009bc8  08009bc8  00019bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bd0  08009bd0  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bd0  08009bd0  00019bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bd4  08009bd4  00019bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  08009bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d84  20000264  08009e3c  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004fe8  08009e3c  00024fe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ddfa  00000000  00000000  000202d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b1d  00000000  00000000  0003e0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  00042bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c6  00000000  00000000  00044708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ad65  00000000  00000000  00045bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000201a1  00000000  00000000  00060933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1024  00000000  00000000  00080ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000073c4  00000000  00000000  00121af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00128ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000264 	.word	0x20000264
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009980 	.word	0x08009980

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000268 	.word	0x20000268
 80001dc:	08009980 	.word	0x08009980

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004e6:	2300      	movs	r3, #0
 80004e8:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80004ea:	f008 ff13 	bl	8009314 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	461a      	mov	r2, r3
 80004f6:	2120      	movs	r1, #32
 80004f8:	2032      	movs	r0, #50	; 0x32
 80004fa:	f008 ff63 	bl	80093c4 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80004fe:	2300      	movs	r3, #0
 8000500:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	461a      	mov	r2, r3
 8000506:	2123      	movs	r1, #35	; 0x23
 8000508:	2032      	movs	r0, #50	; 0x32
 800050a:	f008 ff5b 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800052a:	2300      	movs	r3, #0
 800052c:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800052e:	f008 fef1 	bl	8009314 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8000532:	210f      	movs	r1, #15
 8000534:	2032      	movs	r0, #50	; 0x32
 8000536:	f008 ff58 	bl	80093ea <COMPASSACCELERO_IO_Read>
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 800053e:	79fb      	ldrb	r3, [r7, #7]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800054e:	2124      	movs	r1, #36	; 0x24
 8000550:	2032      	movs	r0, #50	; 0x32
 8000552:	f008 ff4a 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000560:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	461a      	mov	r2, r3
 8000566:	2124      	movs	r1, #36	; 0x24
 8000568:	2032      	movs	r0, #50	; 0x32
 800056a:	f008 ff2b 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b084      	sub	sp, #16
 800057a:	af00      	add	r7, sp, #0
 800057c:	4603      	mov	r3, r0
 800057e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000580:	2121      	movs	r1, #33	; 0x21
 8000582:	2032      	movs	r0, #50	; 0x32
 8000584:	f008 ff31 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000588:	4603      	mov	r3, r0
 800058a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	f003 030c 	and.w	r3, r3, #12
 8000592:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000594:	7bfa      	ldrb	r2, [r7, #15]
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	4313      	orrs	r3, r2
 800059a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	461a      	mov	r2, r3
 80005a0:	2121      	movs	r1, #33	; 0x21
 80005a2:	2032      	movs	r0, #50	; 0x32
 80005a4:	f008 ff0e 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80005ba:	2121      	movs	r1, #33	; 0x21
 80005bc:	2032      	movs	r0, #50	; 0x32
 80005be:	f008 ff14 	bl	80093ea <COMPASSACCELERO_IO_Read>
 80005c2:	4603      	mov	r3, r0
 80005c4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	f023 0308 	bic.w	r3, r3, #8
 80005cc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80005ce:	7bfa      	ldrb	r2, [r7, #15]
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	461a      	mov	r2, r3
 80005da:	2121      	movs	r1, #33	; 0x21
 80005dc:	2032      	movs	r0, #50	; 0x32
 80005de:	f008 fef1 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b088      	sub	sp, #32
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80005f2:	2300      	movs	r3, #0
 80005f4:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80005fa:	2301      	movs	r3, #1
 80005fc:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80005fe:	2123      	movs	r1, #35	; 0x23
 8000600:	2032      	movs	r0, #50	; 0x32
 8000602:	f008 fef2 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000606:	4603      	mov	r3, r0
 8000608:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800060a:	2124      	movs	r1, #36	; 0x24
 800060c:	2032      	movs	r0, #50	; 0x32
 800060e:	f008 feec 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000612:	4603      	mov	r3, r0
 8000614:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8000616:	2128      	movs	r1, #40	; 0x28
 8000618:	2032      	movs	r0, #50	; 0x32
 800061a:	f008 fee6 	bl	80093ea <COMPASSACCELERO_IO_Read>
 800061e:	4603      	mov	r3, r0
 8000620:	b25b      	sxtb	r3, r3
 8000622:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8000624:	2129      	movs	r1, #41	; 0x29
 8000626:	2032      	movs	r0, #50	; 0x32
 8000628:	f008 fedf 	bl	80093ea <COMPASSACCELERO_IO_Read>
 800062c:	4603      	mov	r3, r0
 800062e:	b25b      	sxtb	r3, r3
 8000630:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8000632:	212a      	movs	r1, #42	; 0x2a
 8000634:	2032      	movs	r0, #50	; 0x32
 8000636:	f008 fed8 	bl	80093ea <COMPASSACCELERO_IO_Read>
 800063a:	4603      	mov	r3, r0
 800063c:	b25b      	sxtb	r3, r3
 800063e:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8000640:	212b      	movs	r1, #43	; 0x2b
 8000642:	2032      	movs	r0, #50	; 0x32
 8000644:	f008 fed1 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000648:	4603      	mov	r3, r0
 800064a:	b25b      	sxtb	r3, r3
 800064c:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800064e:	212c      	movs	r1, #44	; 0x2c
 8000650:	2032      	movs	r0, #50	; 0x32
 8000652:	f008 feca 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000656:	4603      	mov	r3, r0
 8000658:	b25b      	sxtb	r3, r3
 800065a:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800065c:	212d      	movs	r1, #45	; 0x2d
 800065e:	2032      	movs	r0, #50	; 0x32
 8000660:	f008 fec3 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000664:	4603      	mov	r3, r0
 8000666:	b25b      	sxtb	r3, r3
 8000668:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800066a:	7d3b      	ldrb	r3, [r7, #20]
 800066c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000670:	2b00      	cmp	r3, #0
 8000672:	d123      	bne.n	80006bc <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000674:	2300      	movs	r3, #0
 8000676:	77fb      	strb	r3, [r7, #31]
 8000678:	e01c      	b.n	80006b4 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800067a:	7ffb      	ldrb	r3, [r7, #31]
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	3301      	adds	r3, #1
 8000680:	3320      	adds	r3, #32
 8000682:	443b      	add	r3, r7
 8000684:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000688:	b29b      	uxth	r3, r3
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b29a      	uxth	r2, r3
 800068e:	7ffb      	ldrb	r3, [r7, #31]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	3320      	adds	r3, #32
 8000694:	443b      	add	r3, r7
 8000696:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800069a:	b29b      	uxth	r3, r3
 800069c:	4413      	add	r3, r2
 800069e:	b29a      	uxth	r2, r3
 80006a0:	7ffb      	ldrb	r3, [r7, #31]
 80006a2:	b212      	sxth	r2, r2
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	3320      	adds	r3, #32
 80006a8:	443b      	add	r3, r7
 80006aa:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80006ae:	7ffb      	ldrb	r3, [r7, #31]
 80006b0:	3301      	adds	r3, #1
 80006b2:	77fb      	strb	r3, [r7, #31]
 80006b4:	7ffb      	ldrb	r3, [r7, #31]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d9df      	bls.n	800067a <LSM303AGR_AccReadXYZ+0x90>
 80006ba:	e022      	b.n	8000702 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80006bc:	2300      	movs	r3, #0
 80006be:	77fb      	strb	r3, [r7, #31]
 80006c0:	e01c      	b.n	80006fc <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80006c2:	7ffb      	ldrb	r3, [r7, #31]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	3320      	adds	r3, #32
 80006c8:	443b      	add	r3, r7
 80006ca:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	021b      	lsls	r3, r3, #8
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	7ffb      	ldrb	r3, [r7, #31]
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	3301      	adds	r3, #1
 80006da:	3320      	adds	r3, #32
 80006dc:	443b      	add	r3, r7
 80006de:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	4413      	add	r3, r2
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	7ffb      	ldrb	r3, [r7, #31]
 80006ea:	b212      	sxth	r2, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	3320      	adds	r3, #32
 80006f0:	443b      	add	r3, r7
 80006f2:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80006f6:	7ffb      	ldrb	r3, [r7, #31]
 80006f8:	3301      	adds	r3, #1
 80006fa:	77fb      	strb	r3, [r7, #31]
 80006fc:	7ffb      	ldrb	r3, [r7, #31]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d9df      	bls.n	80006c2 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8000702:	7d3b      	ldrb	r3, [r7, #20]
 8000704:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000708:	2b30      	cmp	r3, #48	; 0x30
 800070a:	d013      	beq.n	8000734 <LSM303AGR_AccReadXYZ+0x14a>
 800070c:	2b30      	cmp	r3, #48	; 0x30
 800070e:	dc14      	bgt.n	800073a <LSM303AGR_AccReadXYZ+0x150>
 8000710:	2b20      	cmp	r3, #32
 8000712:	d00c      	beq.n	800072e <LSM303AGR_AccReadXYZ+0x144>
 8000714:	2b20      	cmp	r3, #32
 8000716:	dc10      	bgt.n	800073a <LSM303AGR_AccReadXYZ+0x150>
 8000718:	2b00      	cmp	r3, #0
 800071a:	d002      	beq.n	8000722 <LSM303AGR_AccReadXYZ+0x138>
 800071c:	2b10      	cmp	r3, #16
 800071e:	d003      	beq.n	8000728 <LSM303AGR_AccReadXYZ+0x13e>
 8000720:	e00b      	b.n	800073a <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8000722:	2301      	movs	r3, #1
 8000724:	77bb      	strb	r3, [r7, #30]
    break;
 8000726:	e008      	b.n	800073a <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8000728:	2302      	movs	r3, #2
 800072a:	77bb      	strb	r3, [r7, #30]
    break;
 800072c:	e005      	b.n	800073a <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800072e:	2304      	movs	r3, #4
 8000730:	77bb      	strb	r3, [r7, #30]
    break;
 8000732:	e002      	b.n	800073a <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8000734:	230c      	movs	r3, #12
 8000736:	77bb      	strb	r3, [r7, #30]
    break;
 8000738:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800073a:	2300      	movs	r3, #0
 800073c:	77fb      	strb	r3, [r7, #31]
 800073e:	e014      	b.n	800076a <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000740:	7ffb      	ldrb	r3, [r7, #31]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	3320      	adds	r3, #32
 8000746:	443b      	add	r3, r7
 8000748:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800074c:	b29a      	uxth	r2, r3
 800074e:	7fbb      	ldrb	r3, [r7, #30]
 8000750:	b29b      	uxth	r3, r3
 8000752:	fb12 f303 	smulbb	r3, r2, r3
 8000756:	b299      	uxth	r1, r3
 8000758:	7ffb      	ldrb	r3, [r7, #31]
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	b20a      	sxth	r2, r1
 8000762:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000764:	7ffb      	ldrb	r3, [r7, #31]
 8000766:	3301      	adds	r3, #1
 8000768:	77fb      	strb	r3, [r7, #31]
 800076a:	7ffb      	ldrb	r3, [r7, #31]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d9e7      	bls.n	8000740 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000784:	2300      	movs	r3, #0
 8000786:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000788:	2121      	movs	r1, #33	; 0x21
 800078a:	2032      	movs	r0, #50	; 0x32
 800078c:	f008 fe2d 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000790:	4603      	mov	r3, r0
 8000792:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	f023 0304 	bic.w	r3, r3, #4
 800079a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 800079c:	7bfa      	ldrb	r2, [r7, #15]
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	461a      	mov	r2, r3
 80007a8:	2121      	movs	r1, #33	; 0x21
 80007aa:	2032      	movs	r0, #50	; 0x32
 80007ac:	f008 fe0a 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80007c2:	2300      	movs	r3, #0
 80007c4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 80007c6:	2122      	movs	r1, #34	; 0x22
 80007c8:	2032      	movs	r0, #50	; 0x32
 80007ca:	f008 fe0e 	bl	80093ea <COMPASSACCELERO_IO_Read>
 80007ce:	4603      	mov	r3, r0
 80007d0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 80007d2:	7bfa      	ldrb	r2, [r7, #15]
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	461a      	mov	r2, r3
 80007de:	2122      	movs	r1, #34	; 0x22
 80007e0:	2032      	movs	r0, #50	; 0x32
 80007e2:	f008 fdef 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b084      	sub	sp, #16
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80007fc:	2138      	movs	r1, #56	; 0x38
 80007fe:	2032      	movs	r0, #50	; 0x32
 8000800:	f008 fdf3 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000804:	4603      	mov	r3, r0
 8000806:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000808:	7bfa      	ldrb	r2, [r7, #15]
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4313      	orrs	r3, r2
 800080e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	461a      	mov	r2, r3
 8000814:	2138      	movs	r1, #56	; 0x38
 8000816:	2032      	movs	r0, #50	; 0x32
 8000818:	f008 fdd4 	bl	80093c4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 800081c:	230a      	movs	r3, #10
 800081e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	461a      	mov	r2, r3
 8000824:	213a      	movs	r1, #58	; 0x3a
 8000826:	2032      	movs	r0, #50	; 0x32
 8000828:	f008 fdcc 	bl	80093c4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 800082c:	2305      	movs	r3, #5
 800082e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	461a      	mov	r2, r3
 8000834:	213b      	movs	r1, #59	; 0x3b
 8000836:	2032      	movs	r0, #50	; 0x32
 8000838:	f008 fdc4 	bl	80093c4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	461a      	mov	r2, r3
 8000840:	213c      	movs	r1, #60	; 0x3c
 8000842:	2032      	movs	r0, #50	; 0x32
 8000844:	f008 fdbe 	bl	80093c4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000848:	2332      	movs	r3, #50	; 0x32
 800084a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	461a      	mov	r2, r3
 8000850:	213d      	movs	r1, #61	; 0x3d
 8000852:	2032      	movs	r0, #50	; 0x32
 8000854:	f008 fdb6 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000864:	f008 fd7e 	bl	8009364 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8000868:	2080      	movs	r0, #128	; 0x80
 800086a:	f7ff ffa5 	bl	80007b8 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 800086e:	2004      	movs	r0, #4
 8000870:	f7ff ff83 	bl	800077a <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8000874:	2010      	movs	r0, #16
 8000876:	f7ff ffba 	bl	80007ee <LSM303AGR_AccClickITEnable>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}

0800087e <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800088c:	f008 fd42 	bl	8009314 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	461a      	mov	r2, r3
 8000898:	2120      	movs	r1, #32
 800089a:	2032      	movs	r0, #50	; 0x32
 800089c:	f008 fd92 	bl	80093c4 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	461a      	mov	r2, r3
 80008a8:	2123      	movs	r1, #35	; 0x23
 80008aa:	2032      	movs	r0, #50	; 0x32
 80008ac:	f008 fd8a 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80008cc:	2300      	movs	r3, #0
 80008ce:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80008d0:	f008 fd20 	bl	8009314 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80008d4:	210f      	movs	r1, #15
 80008d6:	2032      	movs	r0, #50	; 0x32
 80008d8:	f008 fd87 	bl	80093ea <COMPASSACCELERO_IO_Read>
 80008dc:	4603      	mov	r3, r0
 80008de:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80008e0:	79fb      	ldrb	r3, [r7, #7]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80008f0:	2124      	movs	r1, #36	; 0x24
 80008f2:	2032      	movs	r0, #50	; 0x32
 80008f4:	f008 fd79 	bl	80093ea <COMPASSACCELERO_IO_Read>
 80008f8:	4603      	mov	r3, r0
 80008fa:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000902:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	461a      	mov	r2, r3
 8000908:	2124      	movs	r1, #36	; 0x24
 800090a:	2032      	movs	r0, #50	; 0x32
 800090c:	f008 fd5a 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000922:	2121      	movs	r1, #33	; 0x21
 8000924:	2032      	movs	r0, #50	; 0x32
 8000926:	f008 fd60 	bl	80093ea <COMPASSACCELERO_IO_Read>
 800092a:	4603      	mov	r3, r0
 800092c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	f003 030c 	and.w	r3, r3, #12
 8000934:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000936:	7bfa      	ldrb	r2, [r7, #15]
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	4313      	orrs	r3, r2
 800093c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	461a      	mov	r2, r3
 8000942:	2121      	movs	r1, #33	; 0x21
 8000944:	2032      	movs	r0, #50	; 0x32
 8000946:	f008 fd3d 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b084      	sub	sp, #16
 8000956:	af00      	add	r7, sp, #0
 8000958:	4603      	mov	r3, r0
 800095a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800095c:	2121      	movs	r1, #33	; 0x21
 800095e:	2032      	movs	r0, #50	; 0x32
 8000960:	f008 fd43 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000964:	4603      	mov	r3, r0
 8000966:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	f023 0308 	bic.w	r3, r3, #8
 800096e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000970:	7bfa      	ldrb	r2, [r7, #15]
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4313      	orrs	r3, r2
 8000976:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	461a      	mov	r2, r3
 800097c:	2121      	movs	r1, #33	; 0x21
 800097e:	2032      	movs	r0, #50	; 0x32
 8000980:	f008 fd20 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000994:	2300      	movs	r3, #0
 8000996:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800099c:	2301      	movs	r3, #1
 800099e:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80009a0:	2123      	movs	r1, #35	; 0x23
 80009a2:	2032      	movs	r0, #50	; 0x32
 80009a4:	f008 fd21 	bl	80093ea <COMPASSACCELERO_IO_Read>
 80009a8:	4603      	mov	r3, r0
 80009aa:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80009ac:	2124      	movs	r1, #36	; 0x24
 80009ae:	2032      	movs	r0, #50	; 0x32
 80009b0:	f008 fd1b 	bl	80093ea <COMPASSACCELERO_IO_Read>
 80009b4:	4603      	mov	r3, r0
 80009b6:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80009b8:	2128      	movs	r1, #40	; 0x28
 80009ba:	2032      	movs	r0, #50	; 0x32
 80009bc:	f008 fd15 	bl	80093ea <COMPASSACCELERO_IO_Read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b25b      	sxtb	r3, r3
 80009c4:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80009c6:	2129      	movs	r1, #41	; 0x29
 80009c8:	2032      	movs	r0, #50	; 0x32
 80009ca:	f008 fd0e 	bl	80093ea <COMPASSACCELERO_IO_Read>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80009d4:	212a      	movs	r1, #42	; 0x2a
 80009d6:	2032      	movs	r0, #50	; 0x32
 80009d8:	f008 fd07 	bl	80093ea <COMPASSACCELERO_IO_Read>
 80009dc:	4603      	mov	r3, r0
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80009e2:	212b      	movs	r1, #43	; 0x2b
 80009e4:	2032      	movs	r0, #50	; 0x32
 80009e6:	f008 fd00 	bl	80093ea <COMPASSACCELERO_IO_Read>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80009f0:	212c      	movs	r1, #44	; 0x2c
 80009f2:	2032      	movs	r0, #50	; 0x32
 80009f4:	f008 fcf9 	bl	80093ea <COMPASSACCELERO_IO_Read>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80009fe:	212d      	movs	r1, #45	; 0x2d
 8000a00:	2032      	movs	r0, #50	; 0x32
 8000a02:	f008 fcf2 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000a06:	4603      	mov	r3, r0
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8000a0c:	7d3b      	ldrb	r3, [r7, #20]
 8000a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d123      	bne.n	8000a5e <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	77fb      	strb	r3, [r7, #31]
 8000a1a:	e01c      	b.n	8000a56 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000a1c:	7ffb      	ldrb	r3, [r7, #31]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	3301      	adds	r3, #1
 8000a22:	3320      	adds	r3, #32
 8000a24:	443b      	add	r3, r7
 8000a26:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	021b      	lsls	r3, r3, #8
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	7ffb      	ldrb	r3, [r7, #31]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	3320      	adds	r3, #32
 8000a36:	443b      	add	r3, r7
 8000a38:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4413      	add	r3, r2
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	7ffb      	ldrb	r3, [r7, #31]
 8000a44:	b212      	sxth	r2, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	3320      	adds	r3, #32
 8000a4a:	443b      	add	r3, r7
 8000a4c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000a50:	7ffb      	ldrb	r3, [r7, #31]
 8000a52:	3301      	adds	r3, #1
 8000a54:	77fb      	strb	r3, [r7, #31]
 8000a56:	7ffb      	ldrb	r3, [r7, #31]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d9df      	bls.n	8000a1c <LSM303DLHC_AccReadXYZ+0x90>
 8000a5c:	e022      	b.n	8000aa4 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	77fb      	strb	r3, [r7, #31]
 8000a62:	e01c      	b.n	8000a9e <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000a64:	7ffb      	ldrb	r3, [r7, #31]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	3320      	adds	r3, #32
 8000a6a:	443b      	add	r3, r7
 8000a6c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	021b      	lsls	r3, r3, #8
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	7ffb      	ldrb	r3, [r7, #31]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	3320      	adds	r3, #32
 8000a7e:	443b      	add	r3, r7
 8000a80:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	4413      	add	r3, r2
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	7ffb      	ldrb	r3, [r7, #31]
 8000a8c:	b212      	sxth	r2, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	3320      	adds	r3, #32
 8000a92:	443b      	add	r3, r7
 8000a94:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000a98:	7ffb      	ldrb	r3, [r7, #31]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	77fb      	strb	r3, [r7, #31]
 8000a9e:	7ffb      	ldrb	r3, [r7, #31]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d9df      	bls.n	8000a64 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000aa4:	7d3b      	ldrb	r3, [r7, #20]
 8000aa6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000aaa:	2b30      	cmp	r3, #48	; 0x30
 8000aac:	d013      	beq.n	8000ad6 <LSM303DLHC_AccReadXYZ+0x14a>
 8000aae:	2b30      	cmp	r3, #48	; 0x30
 8000ab0:	dc14      	bgt.n	8000adc <LSM303DLHC_AccReadXYZ+0x150>
 8000ab2:	2b20      	cmp	r3, #32
 8000ab4:	d00c      	beq.n	8000ad0 <LSM303DLHC_AccReadXYZ+0x144>
 8000ab6:	2b20      	cmp	r3, #32
 8000ab8:	dc10      	bgt.n	8000adc <LSM303DLHC_AccReadXYZ+0x150>
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <LSM303DLHC_AccReadXYZ+0x138>
 8000abe:	2b10      	cmp	r3, #16
 8000ac0:	d003      	beq.n	8000aca <LSM303DLHC_AccReadXYZ+0x13e>
 8000ac2:	e00b      	b.n	8000adc <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	77bb      	strb	r3, [r7, #30]
    break;
 8000ac8:	e008      	b.n	8000adc <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8000aca:	2302      	movs	r3, #2
 8000acc:	77bb      	strb	r3, [r7, #30]
    break;
 8000ace:	e005      	b.n	8000adc <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	77bb      	strb	r3, [r7, #30]
    break;
 8000ad4:	e002      	b.n	8000adc <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	77bb      	strb	r3, [r7, #30]
    break;
 8000ada:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	77fb      	strb	r3, [r7, #31]
 8000ae0:	e014      	b.n	8000b0c <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000ae2:	7ffb      	ldrb	r3, [r7, #31]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	3320      	adds	r3, #32
 8000ae8:	443b      	add	r3, r7
 8000aea:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	7fbb      	ldrb	r3, [r7, #30]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	fb12 f303 	smulbb	r3, r2, r3
 8000af8:	b299      	uxth	r1, r3
 8000afa:	7ffb      	ldrb	r3, [r7, #31]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	b20a      	sxth	r2, r1
 8000b04:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000b06:	7ffb      	ldrb	r3, [r7, #31]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	77fb      	strb	r3, [r7, #31]
 8000b0c:	7ffb      	ldrb	r3, [r7, #31]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d9e7      	bls.n	8000ae2 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000b26:	2300      	movs	r3, #0
 8000b28:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000b2a:	2121      	movs	r1, #33	; 0x21
 8000b2c:	2032      	movs	r0, #50	; 0x32
 8000b2e:	f008 fc5c 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000b32:	4603      	mov	r3, r0
 8000b34:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	f023 0304 	bic.w	r3, r3, #4
 8000b3c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000b3e:	7bfa      	ldrb	r2, [r7, #15]
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	2121      	movs	r1, #33	; 0x21
 8000b4c:	2032      	movs	r0, #50	; 0x32
 8000b4e:	f008 fc39 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8000b68:	2122      	movs	r1, #34	; 0x22
 8000b6a:	2032      	movs	r0, #50	; 0x32
 8000b6c:	f008 fc3d 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8000b74:	7bfa      	ldrb	r2, [r7, #15]
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	2122      	movs	r1, #34	; 0x22
 8000b82:	2032      	movs	r0, #50	; 0x32
 8000b84:	f008 fc1e 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8000b9e:	2138      	movs	r1, #56	; 0x38
 8000ba0:	2032      	movs	r0, #50	; 0x32
 8000ba2:	f008 fc22 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000baa:	7bfa      	ldrb	r2, [r7, #15]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	2138      	movs	r1, #56	; 0x38
 8000bb8:	2032      	movs	r0, #50	; 0x32
 8000bba:	f008 fc03 	bl	80093c4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000bbe:	230a      	movs	r3, #10
 8000bc0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	213a      	movs	r1, #58	; 0x3a
 8000bc8:	2032      	movs	r0, #50	; 0x32
 8000bca:	f008 fbfb 	bl	80093c4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000bce:	2305      	movs	r3, #5
 8000bd0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	213b      	movs	r1, #59	; 0x3b
 8000bd8:	2032      	movs	r0, #50	; 0x32
 8000bda:	f008 fbf3 	bl	80093c4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	461a      	mov	r2, r3
 8000be2:	213c      	movs	r1, #60	; 0x3c
 8000be4:	2032      	movs	r0, #50	; 0x32
 8000be6:	f008 fbed 	bl	80093c4 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000bea:	2332      	movs	r3, #50	; 0x32
 8000bec:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	213d      	movs	r1, #61	; 0x3d
 8000bf4:	2032      	movs	r0, #50	; 0x32
 8000bf6:	f008 fbe5 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000c06:	f008 fbad 	bl	8009364 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8000c0a:	2080      	movs	r0, #128	; 0x80
 8000c0c:	f7ff ffa5 	bl	8000b5a <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8000c10:	2004      	movs	r0, #4
 8000c12:	f7ff ff83 	bl	8000b1c <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8000c16:	2010      	movs	r0, #16
 8000c18:	f7ff ffba 	bl	8000b90 <LSM303DLHC_AccClickITEnable>
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <valueSA>:
static volatile int SA = 0;

//extern osSemaphoreId_t buttonSemHandle;

int valueSA()
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
	return SA;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <valueSA+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000280 	.word	0x20000280

08000c38 <antSisFunction>:

void antSisFunction(void *argument)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	 for(;;)
	 {
		osSemaphoreAcquire(buttonSemHandle, 0);   //boton = 0;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <antSisFunction+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f005 f812 	bl	8005c70 <osSemaphoreAcquire>
		osSemaphoreAcquire(buttonSemHandle, osWaitForever);  //while (!boton);
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <antSisFunction+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c54:	4618      	mov	r0, r3
 8000c56:	f005 f80b 	bl	8005c70 <osSemaphoreAcquire>
		SA = !SA;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <antSisFunction+0x44>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bf0c      	ite	eq
 8000c62:	2301      	moveq	r3, #1
 8000c64:	2300      	movne	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <antSisFunction+0x44>)
 8000c6c:	601a      	str	r2, [r3, #0]

	   osDelay(500); //500ms
 8000c6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c72:	f004 fe1d 	bl	80058b0 <osDelay>
		osSemaphoreAcquire(buttonSemHandle, 0);   //boton = 0;
 8000c76:	e7e3      	b.n	8000c40 <antSisFunction+0x8>
 8000c78:	200003a4 	.word	0x200003a4
 8000c7c:	20000280 	.word	0x20000280

08000c80 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <configureTimerForRunTimeStats+0x2c>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	4a08      	ldr	r2, [pc, #32]	; (8000cac <configureTimerForRunTimeStats+0x2c>)
 8000c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c8e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <configureTimerForRunTimeStats+0x30>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <configureTimerForRunTimeStats+0x30>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0;
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <configureTimerForRunTimeStats+0x30>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000edf0 	.word	0xe000edf0
 8000cb0:	e0001000 	.word	0xe0001000

08000cb4 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
return DWT->CYCCNT;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <getRunTimeCounterValue+0x14>)
 8000cba:	685b      	ldr	r3, [r3, #4]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e0001000 	.word	0xe0001000

08000ccc <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <fsm_new>:

fsm_t*

fsm_new (fsm_trans_t* tt)

{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]

  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 8000cea:	2008      	movs	r0, #8
 8000cec:	f008 fc7e 	bl	80095ec <malloc>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60fb      	str	r3, [r7, #12]

  fsm_init (this, tt);
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f000 f805 	bl	8000d06 <fsm_init>

  return this;
 8000cfc:	68fb      	ldr	r3, [r7, #12]

}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <fsm_init>:

void

fsm_init (fsm_t* this, fsm_trans_t* tt)

{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]

  this->tt = tt;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	605a      	str	r2, [r3, #4]

  this->current_state = tt[0].orig_state;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]

}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <fsm_fire>:

void

fsm_fire (fsm_t* this)

{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]

  fsm_trans_t* t;

  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	e01c      	b.n	8000d74 <fsm_fire+0x4a>

    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d113      	bne.n	8000d6e <fsm_fire+0x44>
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	4798      	blx	r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00c      	beq.n	8000d6e <fsm_fire+0x44>

      this->current_state = t->dest_state;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	601a      	str	r2, [r3, #0]

      if (t->out)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00c      	beq.n	8000d7e <fsm_fire+0x54>

        t->out(this);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	4798      	blx	r3

      break;
 8000d6c:	e007      	b.n	8000d7e <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3310      	adds	r3, #16
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	dade      	bge.n	8000d3a <fsm_fire+0x10>

    }

  }

 8000d7c:	e000      	b.n	8000d80 <fsm_fire+0x56>
      break;
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <Sistema_Activo>:
  IDLE_LED,
  LEDAZUL
};

static int Sistema_Activo (fsm_t* this)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	 return valueSA();
 8000d90:	f7ff ff46 	bl	8000c20 <valueSA>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <Sistema_No_Activo>:

static int Sistema_No_Activo (fsm_t* this)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
    return !valueSA();
 8000da6:	f7ff ff3b 	bl	8000c20 <valueSA>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	bf0c      	ite	eq
 8000db0:	2301      	moveq	r3, #1
 8000db2:	2300      	movne	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <Tiempo_Ha_Pasado>:

static int Tiempo_Ha_Pasado (fsm_t* this)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
    if ( (osKernelGetTickCount() - led_tick) >= 1000){
 8000dc8:	f004 fcc2 	bl	8005750 <osKernelGetTickCount>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <Tiempo_Ha_Pasado+0x28>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dd8:	d301      	bcc.n	8000dde <Tiempo_Ha_Pasado+0x1e>
    	return 1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e000      	b.n	8000de0 <Tiempo_Ha_Pasado+0x20>
    }
	return 0;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000284 	.word	0x20000284

08000dec <funcion_LED_azul_encendido>:


static void funcion_LED_azul_encendido (fsm_t* this)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);//Led azul
 8000df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <funcion_LED_azul_encendido+0x24>)
 8000dfa:	f001 fe70 	bl	8002ade <HAL_GPIO_TogglePin>
	led_tick = osKernelGetTickCount();
 8000dfe:	f004 fca7 	bl	8005750 <osKernelGetTickCount>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <funcion_LED_azul_encendido+0x28>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40020c00 	.word	0x40020c00
 8000e14:	20000284 	.word	0x20000284

08000e18 <funcion_LED_azul_apagado>:

static void funcion_LED_azul_apagado (fsm_t* this)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,0); //Led azul off
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e26:	4803      	ldr	r0, [pc, #12]	; (8000e34 <funcion_LED_azul_apagado+0x1c>)
 8000e28:	f001 fe40 	bl	8002aac <HAL_GPIO_WritePin>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40020c00 	.word	0x40020c00

08000e38 <ledSisFunction>:
	{LEDAZUL, 	Sistema_No_Activo, 	IDLE_LED, 		funcion_LED_azul_apagado},
	{-1, NULL, -1, NULL },
	};

void ledSisFunction(void *argument)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	fsm_t * LEDazul_fsm = fsm_new (LEDazul);
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <ledSisFunction+0x20>)
 8000e42:	f7ff ff4e 	bl	8000ce2 <fsm_new>
 8000e46:	60f8      	str	r0, [r7, #12]

	 for(;;)
	 {
	   fsm_fire (LEDazul_fsm);
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f7ff ff6e 	bl	8000d2a <fsm_fire>
	   osDelay(100); //100ms
 8000e4e:	2064      	movs	r0, #100	; 0x64
 8000e50:	f004 fd2e 	bl	80058b0 <osDelay>
	   fsm_fire (LEDazul_fsm);
 8000e54:	e7f8      	b.n	8000e48 <ledSisFunction+0x10>
 8000e56:	bf00      	nop
 8000e58:	20000068 	.word	0x20000068

08000e5c <LSM303AGR_MagInit>:

/**
 * @brief Initialize LSM303_AGR magnetic sensor in 100Hz continuous mode
 * @retval None
 */
void LSM303AGR_MagInit(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  COMPASSACCELERO_IO_Init();
 8000e60:	f008 fa58 	bl	8009314 <COMPASSACCELERO_IO_Init>

  COMPASSACCELERO_IO_Write(MAG_I2C_ADDRESS, LSM303AGR_CFG_REG_A_M, 0x0C); // 100Hz
 8000e64:	220c      	movs	r2, #12
 8000e66:	2160      	movs	r1, #96	; 0x60
 8000e68:	203c      	movs	r0, #60	; 0x3c
 8000e6a:	f008 faab 	bl	80093c4 <COMPASSACCELERO_IO_Write>
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <LSM303AGR_MagReadXYZ>:
/**
 * @brief Read X, Y & Z Magnetic values
 * @param pData: Data out pointer, storing raw values from sensor
 * @retval None
 */
void LSM303AGR_MagReadXYZ(int16_t *pData) {
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  uint16_t H = 0x00;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	81fb      	strh	r3, [r7, #14]
  uint16_t L = 0x00;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	81bb      	strh	r3, [r7, #12]

  /* Read registers */
  H = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTX_H_REG_M);
 8000e82:	2169      	movs	r1, #105	; 0x69
 8000e84:	203c      	movs	r0, #60	; 0x3c
 8000e86:	f008 fab0 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	81fb      	strh	r3, [r7, #14]
  L = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTX_L_REG_M);
 8000e8e:	2168      	movs	r1, #104	; 0x68
 8000e90:	203c      	movs	r0, #60	; 0x3c
 8000e92:	f008 faaa 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000e96:	4603      	mov	r3, r0
 8000e98:	81bb      	strh	r3, [r7, #12]

  pData[0] = (H << 8) | L;
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	801a      	strh	r2, [r3, #0]

  H = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTY_H_REG_M);
 8000eac:	216b      	movs	r1, #107	; 0x6b
 8000eae:	203c      	movs	r0, #60	; 0x3c
 8000eb0:	f008 fa9b 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	81fb      	strh	r3, [r7, #14]
  L = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTY_L_REG_M);
 8000eb8:	216a      	movs	r1, #106	; 0x6a
 8000eba:	203c      	movs	r0, #60	; 0x3c
 8000ebc:	f008 fa95 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	81bb      	strh	r3, [r7, #12]

  pData[1] = (H << 8) | L;
 8000ec4:	89fb      	ldrh	r3, [r7, #14]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	b219      	sxth	r1, r3
 8000eca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	b212      	sxth	r2, r2
 8000ed6:	801a      	strh	r2, [r3, #0]

  H = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTZ_H_REG_M);
 8000ed8:	216d      	movs	r1, #109	; 0x6d
 8000eda:	203c      	movs	r0, #60	; 0x3c
 8000edc:	f008 fa85 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	81fb      	strh	r3, [r7, #14]
  L = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTZ_L_REG_M);
 8000ee4:	216c      	movs	r1, #108	; 0x6c
 8000ee6:	203c      	movs	r0, #60	; 0x3c
 8000ee8:	f008 fa7f 	bl	80093ea <COMPASSACCELERO_IO_Read>
 8000eec:	4603      	mov	r3, r0
 8000eee:	81bb      	strh	r3, [r7, #12]

  pData[2] = (H << 8) | L;
 8000ef0:	89fb      	ldrh	r3, [r7, #14]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b219      	sxth	r1, r3
 8000ef6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3304      	adds	r3, #4
 8000efe:	430a      	orrs	r2, r1
 8000f00:	b212      	sxth	r2, r2
 8000f02:	801a      	strh	r2, [r3, #0]
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f001 fa40 	bl	8002394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f8c2 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f000 fa0e 	bl	8001338 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f1c:	f000 f926 	bl	800116c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f20:	f000 f952 	bl	80011c8 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000f24:	f000 f986 	bl	8001234 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8000f28:	f008 fa72 	bl	8009410 <BSP_ACCELERO_Init>
  LSM303AGR_MagInit();
 8000f2c:	f7ff ff96 	bl	8000e5c <LSM303AGR_MagInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f30:	f004 fbc4 	bl	80056bc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of i2cMutex */
  i2cMutexHandle = osMutexNew(&i2cMutex_attributes);
 8000f34:	483a      	ldr	r0, [pc, #232]	; (8001020 <main+0x114>)
 8000f36:	f004 fd03 	bl	8005940 <osMutexNew>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a39      	ldr	r2, [pc, #228]	; (8001024 <main+0x118>)
 8000f3e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of buttonSem */
  buttonSemHandle = osSemaphoreNew(1, 1, &buttonSem_attributes);
 8000f40:	4a39      	ldr	r2, [pc, #228]	; (8001028 <main+0x11c>)
 8000f42:	2101      	movs	r1, #1
 8000f44:	2001      	movs	r0, #1
 8000f46:	f004 fe09 	bl	8005b5c <osSemaphoreNew>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a37      	ldr	r2, [pc, #220]	; (800102c <main+0x120>)
 8000f4e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of deltaMagQueue */
  deltaMagQueueHandle = osMessageQueueNew (32, sizeof(uint32_t), &deltaMagQueue_attributes);
 8000f50:	4a37      	ldr	r2, [pc, #220]	; (8001030 <main+0x124>)
 8000f52:	2104      	movs	r1, #4
 8000f54:	2020      	movs	r0, #32
 8000f56:	f004 ff21 	bl	8005d9c <osMessageQueueNew>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a35      	ldr	r2, [pc, #212]	; (8001034 <main+0x128>)
 8000f5e:	6013      	str	r3, [r2, #0]

  /* creation of deltaAceQueue */
  deltaAceQueueHandle = osMessageQueueNew (32, sizeof(uint32_t), &deltaAceQueue_attributes);
 8000f60:	4a35      	ldr	r2, [pc, #212]	; (8001038 <main+0x12c>)
 8000f62:	2104      	movs	r1, #4
 8000f64:	2020      	movs	r0, #32
 8000f66:	f004 ff19 	bl	8005d9c <osMessageQueueNew>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a33      	ldr	r2, [pc, #204]	; (800103c <main+0x130>)
 8000f6e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  f_move_acc.mov_queue = deltaAceQueueHandle;
 8000f70:	4b32      	ldr	r3, [pc, #200]	; (800103c <main+0x130>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a32      	ldr	r2, [pc, #200]	; (8001040 <main+0x134>)
 8000f76:	6093      	str	r3, [r2, #8]
  f_move_acc.threshold = TH_ACC_HIGH;
 8000f78:	4b31      	ldr	r3, [pc, #196]	; (8001040 <main+0x134>)
 8000f7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f7e:	60da      	str	r2, [r3, #12]
  f_move_acc.htim = &htim4;
 8000f80:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <main+0x134>)
 8000f82:	4a30      	ldr	r2, [pc, #192]	; (8001044 <main+0x138>)
 8000f84:	611a      	str	r2, [r3, #16]
  f_move_acc.channel = TIM_CHANNEL_1;
 8000f86:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <main+0x134>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]

  f_move_mag.mov_queue = deltaMagQueueHandle;
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <main+0x128>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a2d      	ldr	r2, [pc, #180]	; (8001048 <main+0x13c>)
 8000f92:	6093      	str	r3, [r2, #8]
  f_move_mag.threshold = TH_ACC_HIGH;
 8000f94:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <main+0x13c>)
 8000f96:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f9a:	60da      	str	r2, [r3, #12]
  f_move_mag.htim = &htim4;
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <main+0x13c>)
 8000f9e:	4a29      	ldr	r2, [pc, #164]	; (8001044 <main+0x138>)
 8000fa0:	611a      	str	r2, [r3, #16]
  f_move_mag.channel = TIM_CHANNEL_3;
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <main+0x13c>)
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	615a      	str	r2, [r3, #20]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of nothingTask */
  nothingTaskHandle = osThreadNew(nothingFunction, NULL, &nothingTask_attributes);
 8000fa8:	4a28      	ldr	r2, [pc, #160]	; (800104c <main+0x140>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	4828      	ldr	r0, [pc, #160]	; (8001050 <main+0x144>)
 8000fae:	f004 fbed 	bl	800578c <osThreadNew>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a27      	ldr	r2, [pc, #156]	; (8001054 <main+0x148>)
 8000fb6:	6013      	str	r3, [r2, #0]

  /* creation of ledSisTask */
  ledSisTaskHandle = osThreadNew(ledSisFunction, NULL, &ledSisTask_attributes);
 8000fb8:	4a27      	ldr	r2, [pc, #156]	; (8001058 <main+0x14c>)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4827      	ldr	r0, [pc, #156]	; (800105c <main+0x150>)
 8000fbe:	f004 fbe5 	bl	800578c <osThreadNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a26      	ldr	r2, [pc, #152]	; (8001060 <main+0x154>)
 8000fc6:	6013      	str	r3, [r2, #0]

  /* creation of muesAceTask */
  muesAceTaskHandle = osThreadNew(muesAceFunction, NULL, &muesAceTask_attributes);
 8000fc8:	4a26      	ldr	r2, [pc, #152]	; (8001064 <main+0x158>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4826      	ldr	r0, [pc, #152]	; (8001068 <main+0x15c>)
 8000fce:	f004 fbdd 	bl	800578c <osThreadNew>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a25      	ldr	r2, [pc, #148]	; (800106c <main+0x160>)
 8000fd6:	6013      	str	r3, [r2, #0]

  /* creation of muesMagTask */
  muesMagTaskHandle = osThreadNew(muesMagFunction, NULL, &muesMagTask_attributes);
 8000fd8:	4a25      	ldr	r2, [pc, #148]	; (8001070 <main+0x164>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4825      	ldr	r0, [pc, #148]	; (8001074 <main+0x168>)
 8000fde:	f004 fbd5 	bl	800578c <osThreadNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a24      	ldr	r2, [pc, #144]	; (8001078 <main+0x16c>)
 8000fe6:	6013      	str	r3, [r2, #0]

  /* creation of movAceTask */
  movAceTaskHandle = osThreadNew(movFunction, (void*) &f_move_acc, &movAceTask_attributes);
 8000fe8:	4a24      	ldr	r2, [pc, #144]	; (800107c <main+0x170>)
 8000fea:	4915      	ldr	r1, [pc, #84]	; (8001040 <main+0x134>)
 8000fec:	4824      	ldr	r0, [pc, #144]	; (8001080 <main+0x174>)
 8000fee:	f004 fbcd 	bl	800578c <osThreadNew>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a23      	ldr	r2, [pc, #140]	; (8001084 <main+0x178>)
 8000ff6:	6013      	str	r3, [r2, #0]

  /* creation of movMagTask */
  movMagTaskHandle = osThreadNew(movFunction, (void*) &f_move_mag, &movMagTask_attributes);
 8000ff8:	4a23      	ldr	r2, [pc, #140]	; (8001088 <main+0x17c>)
 8000ffa:	4913      	ldr	r1, [pc, #76]	; (8001048 <main+0x13c>)
 8000ffc:	4820      	ldr	r0, [pc, #128]	; (8001080 <main+0x174>)
 8000ffe:	f004 fbc5 	bl	800578c <osThreadNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a21      	ldr	r2, [pc, #132]	; (800108c <main+0x180>)
 8001006:	6013      	str	r3, [r2, #0]

  /* creation of antSisTask */
  antSisTaskHandle = osThreadNew(antSisFunction, NULL, &antSisTask_attributes);
 8001008:	4a21      	ldr	r2, [pc, #132]	; (8001090 <main+0x184>)
 800100a:	2100      	movs	r1, #0
 800100c:	4821      	ldr	r0, [pc, #132]	; (8001094 <main+0x188>)
 800100e:	f004 fbbd 	bl	800578c <osThreadNew>
 8001012:	4603      	mov	r3, r0
 8001014:	4a20      	ldr	r2, [pc, #128]	; (8001098 <main+0x18c>)
 8001016:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001018:	f004 fb74 	bl	8005704 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800101c:	e7fe      	b.n	800101c <main+0x110>
 800101e:	bf00      	nop
 8001020:	08009b90 	.word	0x08009b90
 8001024:	200003a0 	.word	0x200003a0
 8001028:	08009ba0 	.word	0x08009ba0
 800102c:	200003a4 	.word	0x200003a4
 8001030:	08009b60 	.word	0x08009b60
 8001034:	20000398 	.word	0x20000398
 8001038:	08009b78 	.word	0x08009b78
 800103c:	2000039c 	.word	0x2000039c
 8001040:	200003a8 	.word	0x200003a8
 8001044:	20000334 	.word	0x20000334
 8001048:	200003c8 	.word	0x200003c8
 800104c:	08009a64 	.word	0x08009a64
 8001050:	080015e9 	.word	0x080015e9
 8001054:	2000037c 	.word	0x2000037c
 8001058:	08009a88 	.word	0x08009a88
 800105c:	08000e39 	.word	0x08000e39
 8001060:	20000380 	.word	0x20000380
 8001064:	08009aac 	.word	0x08009aac
 8001068:	08001bb9 	.word	0x08001bb9
 800106c:	20000384 	.word	0x20000384
 8001070:	08009ad0 	.word	0x08009ad0
 8001074:	08001ea5 	.word	0x08001ea5
 8001078:	20000388 	.word	0x20000388
 800107c:	08009af4 	.word	0x08009af4
 8001080:	080018b5 	.word	0x080018b5
 8001084:	2000038c 	.word	0x2000038c
 8001088:	08009b18 	.word	0x08009b18
 800108c:	20000390 	.word	0x20000390
 8001090:	08009b3c 	.word	0x08009b3c
 8001094:	08000c39 	.word	0x08000c39
 8001098:	20000394 	.word	0x20000394

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	; 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2230      	movs	r2, #48	; 0x30
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f008 fb52 	bl	8009754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <SystemClock_Config+0xc8>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	4a26      	ldr	r2, [pc, #152]	; (8001164 <SystemClock_Config+0xc8>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	; 0x40
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <SystemClock_Config+0xc8>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <SystemClock_Config+0xcc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <SystemClock_Config+0xcc>)
 80010e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <SystemClock_Config+0xcc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001106:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001110:	2360      	movs	r3, #96	; 0x60
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001118:	2308      	movs	r3, #8
 800111a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fd0d 	bl	8003b40 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800112c:	f000 fa76 	bl	800161c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001134:	2302      	movs	r3, #2
 8001136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800113c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2103      	movs	r1, #3
 800114c:	4618      	mov	r0, r3
 800114e:	f002 ff6f 	bl	8004030 <HAL_RCC_ClockConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001158:	f000 fa60 	bl	800161c <Error_Handler>
  }
}
 800115c:	bf00      	nop
 800115e:	3750      	adds	r7, #80	; 0x50
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MX_I2C1_Init+0x50>)
 8001172:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <MX_I2C1_Init+0x54>)
 8001174:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_I2C1_Init+0x50>)
 8001178:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <MX_I2C1_Init+0x58>)
 800117a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_I2C1_Init+0x50>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_I2C1_Init+0x50>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_I2C1_Init+0x50>)
 800118a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_I2C1_Init+0x50>)
 80011aa:	f001 fccb 	bl	8002b44 <HAL_I2C_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011b4:	f000 fa32 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000288 	.word	0x20000288
 80011c0:	40005400 	.word	0x40005400
 80011c4:	000186a0 	.word	0x000186a0

080011c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_SPI1_Init+0x64>)
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <MX_SPI1_Init+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_SPI1_Init+0x64>)
 80011d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_SPI1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_SPI1_Init+0x64>)
 80011f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_SPI1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_SPI1_Init+0x64>)
 8001214:	220a      	movs	r2, #10
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_SPI1_Init+0x64>)
 800121a:	f003 f95b 	bl	80044d4 <HAL_SPI_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001224:	f000 f9fa 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200002dc 	.word	0x200002dc
 8001230:	40013000 	.word	0x40013000

08001234 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
 8001260:	615a      	str	r2, [r3, #20]
 8001262:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <MX_TIM4_Init+0xfc>)
 8001266:	4a33      	ldr	r2, [pc, #204]	; (8001334 <MX_TIM4_Init+0x100>)
 8001268:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 800126a:	4b31      	ldr	r3, [pc, #196]	; (8001330 <MX_TIM4_Init+0xfc>)
 800126c:	222f      	movs	r2, #47	; 0x2f
 800126e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <MX_TIM4_Init+0xfc>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <MX_TIM4_Init+0xfc>)
 8001278:	f242 720f 	movw	r2, #9999	; 0x270f
 800127c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <MX_TIM4_Init+0xfc>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <MX_TIM4_Init+0xfc>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800128a:	4829      	ldr	r0, [pc, #164]	; (8001330 <MX_TIM4_Init+0xfc>)
 800128c:	f003 f9ab 	bl	80045e6 <HAL_TIM_Base_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001296:	f000 f9c1 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4822      	ldr	r0, [pc, #136]	; (8001330 <MX_TIM4_Init+0xfc>)
 80012a8:	f003 fd86 	bl	8004db8 <HAL_TIM_ConfigClockSource>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80012b2:	f000 f9b3 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012b6:	481e      	ldr	r0, [pc, #120]	; (8001330 <MX_TIM4_Init+0xfc>)
 80012b8:	f003 fa46 	bl	8004748 <HAL_TIM_PWM_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80012c2:	f000 f9ab 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ce:	f107 0320 	add.w	r3, r7, #32
 80012d2:	4619      	mov	r1, r3
 80012d4:	4816      	ldr	r0, [pc, #88]	; (8001330 <MX_TIM4_Init+0xfc>)
 80012d6:	f004 f92b 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80012e0:	f000 f99c 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e4:	2360      	movs	r3, #96	; 0x60
 80012e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_TIM4_Init+0xfc>)
 80012fc:	f003 fc9a 	bl	8004c34 <HAL_TIM_PWM_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001306:	f000 f989 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2208      	movs	r2, #8
 800130e:	4619      	mov	r1, r3
 8001310:	4807      	ldr	r0, [pc, #28]	; (8001330 <MX_TIM4_Init+0xfc>)
 8001312:	f003 fc8f 	bl	8004c34 <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800131c:	f000 f97e 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <MX_TIM4_Init+0xfc>)
 8001322:	f000 fef1 	bl	8002108 <HAL_TIM_MspPostInit>

}
 8001326:	bf00      	nop
 8001328:	3738      	adds	r7, #56	; 0x38
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000334 	.word	0x20000334
 8001334:	40000800 	.word	0x40000800

08001338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	; 0x30
 800133c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	4b95      	ldr	r3, [pc, #596]	; (80015a8 <MX_GPIO_Init+0x270>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a94      	ldr	r2, [pc, #592]	; (80015a8 <MX_GPIO_Init+0x270>)
 8001358:	f043 0310 	orr.w	r3, r3, #16
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b92      	ldr	r3, [pc, #584]	; (80015a8 <MX_GPIO_Init+0x270>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	4b8e      	ldr	r3, [pc, #568]	; (80015a8 <MX_GPIO_Init+0x270>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a8d      	ldr	r2, [pc, #564]	; (80015a8 <MX_GPIO_Init+0x270>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b8b      	ldr	r3, [pc, #556]	; (80015a8 <MX_GPIO_Init+0x270>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b87      	ldr	r3, [pc, #540]	; (80015a8 <MX_GPIO_Init+0x270>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a86      	ldr	r2, [pc, #536]	; (80015a8 <MX_GPIO_Init+0x270>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b84      	ldr	r3, [pc, #528]	; (80015a8 <MX_GPIO_Init+0x270>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b80      	ldr	r3, [pc, #512]	; (80015a8 <MX_GPIO_Init+0x270>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a7f      	ldr	r2, [pc, #508]	; (80015a8 <MX_GPIO_Init+0x270>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b7d      	ldr	r3, [pc, #500]	; (80015a8 <MX_GPIO_Init+0x270>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b79      	ldr	r3, [pc, #484]	; (80015a8 <MX_GPIO_Init+0x270>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a78      	ldr	r2, [pc, #480]	; (80015a8 <MX_GPIO_Init+0x270>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <MX_GPIO_Init+0x270>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b72      	ldr	r3, [pc, #456]	; (80015a8 <MX_GPIO_Init+0x270>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a71      	ldr	r2, [pc, #452]	; (80015a8 <MX_GPIO_Init+0x270>)
 80013e4:	f043 0308 	orr.w	r3, r3, #8
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b6f      	ldr	r3, [pc, #444]	; (80015a8 <MX_GPIO_Init+0x270>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2108      	movs	r1, #8
 80013fa:	486c      	ldr	r0, [pc, #432]	; (80015ac <MX_GPIO_Init+0x274>)
 80013fc:	f001 fb56 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2101      	movs	r1, #1
 8001404:	486a      	ldr	r0, [pc, #424]	; (80015b0 <MX_GPIO_Init+0x278>)
 8001406:	f001 fb51 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f24a 0110 	movw	r1, #40976	; 0xa010
 8001410:	4868      	ldr	r0, [pc, #416]	; (80015b4 <MX_GPIO_Init+0x27c>)
 8001412:	f001 fb4b 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001416:	2304      	movs	r3, #4
 8001418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	4860      	ldr	r0, [pc, #384]	; (80015ac <MX_GPIO_Init+0x274>)
 800142a:	f001 f8d7 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800142e:	2308      	movs	r3, #8
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	4859      	ldr	r0, [pc, #356]	; (80015ac <MX_GPIO_Init+0x274>)
 8001446:	f001 f8c9 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800144a:	2332      	movs	r3, #50	; 0x32
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800144e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	4853      	ldr	r0, [pc, #332]	; (80015ac <MX_GPIO_Init+0x274>)
 8001460:	f001 f8bc 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001464:	2301      	movs	r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	484d      	ldr	r0, [pc, #308]	; (80015b0 <MX_GPIO_Init+0x278>)
 800147c:	f001 f8ae 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001480:	2308      	movs	r3, #8
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001490:	2305      	movs	r3, #5
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4845      	ldr	r0, [pc, #276]	; (80015b0 <MX_GPIO_Init+0x278>)
 800149c:	f001 f89e 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : boton_Pin */
  GPIO_InitStruct.Pin = boton_Pin;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(boton_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4840      	ldr	r0, [pc, #256]	; (80015b8 <MX_GPIO_Init+0x280>)
 80014b6:	f001 f891 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014ba:	2310      	movs	r3, #16
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ca:	2306      	movs	r3, #6
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4619      	mov	r1, r3
 80014d4:	4838      	ldr	r0, [pc, #224]	; (80015b8 <MX_GPIO_Init+0x280>)
 80014d6:	f001 f881 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80014da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014ec:	2305      	movs	r3, #5
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4831      	ldr	r0, [pc, #196]	; (80015bc <MX_GPIO_Init+0x284>)
 80014f8:	f001 f870 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD6_Pin|Audio_RST_Pin;
 80014fc:	f24a 0310 	movw	r3, #40976	; 0xa010
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4827      	ldr	r0, [pc, #156]	; (80015b4 <MX_GPIO_Init+0x27c>)
 8001516:	f001 f861 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800151a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800151e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800152c:	2306      	movs	r3, #6
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	481e      	ldr	r0, [pc, #120]	; (80015b0 <MX_GPIO_Init+0x278>)
 8001538:	f001 f850 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800153c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	4819      	ldr	r0, [pc, #100]	; (80015b8 <MX_GPIO_Init+0x280>)
 8001552:	f001 f843 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001556:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001568:	230a      	movs	r3, #10
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	4811      	ldr	r0, [pc, #68]	; (80015b8 <MX_GPIO_Init+0x280>)
 8001574:	f001 f832 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001578:	2320      	movs	r3, #32
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	480a      	ldr	r0, [pc, #40]	; (80015b4 <MX_GPIO_Init+0x27c>)
 800158c:	f001 f826 	bl	80025dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2105      	movs	r1, #5
 8001594:	2006      	movs	r0, #6
 8001596:	f000 fff7 	bl	8002588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800159a:	2006      	movs	r0, #6
 800159c:	f001 f810 	bl	80025c0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015a0:	bf00      	nop
 80015a2:	3730      	adds	r7, #48	; 0x30
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40020400 	.word	0x40020400

080015c0 <HAL_GPIO_EXTI_Callback>:
{
	return ITM_SendChar(ch);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // para el boton interrupciones
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
 if(GPIO_Pin == GPIO_PIN_0)
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d104      	bne.n	80015da <HAL_GPIO_EXTI_Callback+0x1a>
 {
	osSemaphoreRelease(buttonSemHandle);
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x24>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f004 fb9d 	bl	8005d14 <osSemaphoreRelease>
 }
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200003a4 	.word	0x200003a4

080015e8 <nothingFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_nothingFunction */
void nothingFunction(void *argument)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f004 f95d 	bl	80058b0 <osDelay>
 80015f6:	e7fb      	b.n	80015f0 <nothingFunction+0x8>

080015f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800160a:	f000 fee5 	bl	80023d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40014400 	.word	0x40014400

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001624:	e7fe      	b.n	8001624 <Error_Handler+0x8>

08001626 <Sistema_Activo>:
  ANDANDO,
  AVISO,
};

static int Sistema_Activo (fsm_t* this)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
	 return valueSA();
 800162e:	f7ff faf7 	bl	8000c20 <valueSA>
 8001632:	4603      	mov	r3, r0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <Sistema_No_Activo>:

static int Sistema_No_Activo (fsm_t* this)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	 return !valueSA();
 8001644:	f7ff faec 	bl	8000c20 <valueSA>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <esta_parado>:

static int esta_parado (fsm_t* this)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  fsm_move_t* f_move = (fsm_move_t*)this;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	60fb      	str	r3, [r7, #12]
  if (f_move->valid==osOK) {
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d107      	bne.n	8001680 <esta_parado+0x24>

    if (f_move->delta < f_move->threshold) {
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d201      	bcs.n	8001680 <esta_parado+0x24>
	  return 1;
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <esta_parado+0x26>
    }
  }
  return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <esta_andando>:



static int esta_andando (fsm_t* this)
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
	fsm_move_t* f_move = (fsm_move_t*)this;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	60fb      	str	r3, [r7, #12]
	  if (f_move->valid==osOK) {
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d107      	bne.n	80016b2 <esta_andando+0x24>

	    if (f_move->delta >= f_move->threshold) {
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d301      	bcc.n	80016b2 <esta_andando+0x24>
		  return 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <esta_andando+0x26>
	    }
	  }
	  return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <esta_aviso>:

static int esta_aviso (fsm_t* this)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  fsm_move_t* f_move = (fsm_move_t*)this;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	60fb      	str	r3, [r7, #12]
  if (f_move->valid==osOK) {
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d107      	bne.n	80016e4 <esta_aviso+0x24>

    if (f_move->delta < f_move->threshold) {
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	69da      	ldr	r2, [r3, #28]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d201      	bcs.n	80016e4 <esta_aviso+0x24>
	  return 1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <esta_aviso+0x26>
    }
  }
  return 0;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <funcion_andando>:


static void funcion_andando (fsm_t* this)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
	fsm_move_t* f_move = (fsm_move_t*)this;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_Start(f_move->htim, f_move->channel);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	4619      	mov	r1, r3
 8001708:	4610      	mov	r0, r2
 800170a:	f003 f877 	bl	80047fc <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, CUARENTA_PORCIENTO);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <funcion_andando+0x32>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001722:	e01b      	b.n	800175c <funcion_andando+0x6a>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, CUARENTA_PORCIENTO);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d106      	bne.n	800173a <funcion_andando+0x48>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001736:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001738:	e010      	b.n	800175c <funcion_andando+0x6a>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, CUARENTA_PORCIENTO);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	2b08      	cmp	r3, #8
 8001740:	d106      	bne.n	8001750 <funcion_andando+0x5e>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800174c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800174e:	e005      	b.n	800175c <funcion_andando+0x6a>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, CUARENTA_PORCIENTO);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800175a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <funcion_aviso>:
static void funcion_aviso (fsm_t* this)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	fsm_move_t* f_move = (fsm_move_t*)this;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_Start(f_move->htim, f_move->channel);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	691a      	ldr	r2, [r3, #16]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	4619      	mov	r1, r3
 800177a:	4610      	mov	r0, r2
 800177c:	f003 f83e 	bl	80047fc <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, NOVENTA_PORCIENTO);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d106      	bne.n	8001796 <funcion_aviso+0x32>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f242 3228 	movw	r2, #9000	; 0x2328
 8001792:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001794:	e01b      	b.n	80017ce <funcion_aviso+0x6a>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, NOVENTA_PORCIENTO);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	2b04      	cmp	r3, #4
 800179c:	d106      	bne.n	80017ac <funcion_aviso+0x48>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	f242 3328 	movw	r3, #9000	; 0x2328
 80017a8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80017aa:	e010      	b.n	80017ce <funcion_aviso+0x6a>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, NOVENTA_PORCIENTO);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d106      	bne.n	80017c2 <funcion_aviso+0x5e>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	f242 3328 	movw	r3, #9000	; 0x2328
 80017be:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80017c0:	e005      	b.n	80017ce <funcion_aviso+0x6a>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, NOVENTA_PORCIENTO);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	f242 3328 	movw	r3, #9000	; 0x2328
 80017cc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <funcion_parado>:
static void funcion_parado (fsm_t* this)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	fsm_move_t* f_move = (fsm_move_t*)this;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_Start(f_move->htim, f_move->channel);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	4619      	mov	r1, r3
 80017ec:	4610      	mov	r0, r2
 80017ee:	f003 f805 	bl	80047fc <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, DIEZ_PORCIENTO);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d106      	bne.n	8001808 <funcion_parado+0x32>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001804:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001806:	e01b      	b.n	8001840 <funcion_parado+0x6a>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, DIEZ_PORCIENTO);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	2b04      	cmp	r3, #4
 800180e:	d106      	bne.n	800181e <funcion_parado+0x48>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800181c:	e010      	b.n	8001840 <funcion_parado+0x6a>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, DIEZ_PORCIENTO);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	2b08      	cmp	r3, #8
 8001824:	d106      	bne.n	8001834 <funcion_parado+0x5e>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001830:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001832:	e005      	b.n	8001840 <funcion_parado+0x6a>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, DIEZ_PORCIENTO);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <funcion_sistemaoff>:

static void funcion_sistemaoff (fsm_t* this)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	fsm_move_t* f_move = (fsm_move_t*)this;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_Stop(f_move->htim, f_move->channel); //timer 4 pwm a zero
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f003 f87c 	bl	800495c <HAL_TIM_PWM_Stop>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, 0); // brillo a 0
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <funcion_sistemaoff+0x30>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001876:	e018      	b.n	80018aa <funcion_sistemaoff+0x62>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, 0); // brillo a 0
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	2b04      	cmp	r3, #4
 800187e:	d105      	bne.n	800188c <funcion_sistemaoff+0x44>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2300      	movs	r3, #0
 8001888:	6393      	str	r3, [r2, #56]	; 0x38
}
 800188a:	e00e      	b.n	80018aa <funcion_sistemaoff+0x62>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, 0); // brillo a 0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	2b08      	cmp	r3, #8
 8001892:	d105      	bne.n	80018a0 <funcion_sistemaoff+0x58>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2300      	movs	r3, #0
 800189c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800189e:	e004      	b.n	80018aa <funcion_sistemaoff+0x62>
	__HAL_TIM_SET_COMPARE(f_move->htim, f_move->channel, 0); // brillo a 0
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2300      	movs	r3, #0
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <movFunction>:
	{ AVISO,   Sistema_No_Activo, 	IDLE2,   funcion_sistemaoff },
	{-1, NULL, -1, NULL },
	};

void movFunction(void *argument)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	//fsm_t * P1_fsm = fsm_new (P1);

	fsm_move_t* f_move = (fsm_move_t*)argument;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	60bb      	str	r3, [r7, #8]
	fsm_init(&(f_move->f), P1);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	490e      	ldr	r1, [pc, #56]	; (80018fc <movFunction+0x48>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fa1e 	bl	8000d06 <fsm_init>
	uint32_t tick = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]

	 for(;;)
	 {
	   //fsm_fire (P1_fsm);
	   f_move->valid = osMessageQueueGet(f_move->mov_queue, &(f_move->delta), NULL, 0);
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	6898      	ldr	r0, [r3, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f103 011c 	add.w	r1, r3, #28
 80018d8:	2300      	movs	r3, #0
 80018da:	2200      	movs	r2, #0
 80018dc:	f004 fb32 	bl	8005f44 <osMessageQueueGet>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	619a      	str	r2, [r3, #24]
	   fsm_fire (&(f_move->f));
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fa1e 	bl	8000d2a <fsm_fire>
	   tick += 100;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3364      	adds	r3, #100	; 0x64
 80018f2:	60fb      	str	r3, [r7, #12]
	   osDelayUntil(tick);
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f003 fff6 	bl	80058e6 <osDelayUntil>
	   f_move->valid = osMessageQueueGet(f_move->mov_queue, &(f_move->delta), NULL, 0);
 80018fa:	e7e8      	b.n	80018ce <movFunction+0x1a>
 80018fc:	200000a8 	.word	0x200000a8

08001900 <Sistema_Activo>:
  INICIO_MUESTREO,
  MUESTREO,
};

static int Sistema_Activo (fsm_t* this)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	 return valueSA();
 8001908:	f7ff f98a 	bl	8000c20 <valueSA>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <Sistema_No_Activo>:

static int Sistema_No_Activo (fsm_t* this)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	 return !valueSA();
 800191e:	f7ff f97f 	bl	8000c20 <valueSA>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <funcion_muestreo>:

static void funcion_muestreo (fsm_t* this)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /*tiempo_t3=0;
  HAL_TIM_Base_Start_IT(&htim10); //5ms*/

	tick = osKernelGetTickCount();
 8001940:	f003 ff06 	bl	8005750 <osKernelGetTickCount>
 8001944:	4603      	mov	r3, r0
 8001946:	4a03      	ldr	r2, [pc, #12]	; (8001954 <funcion_muestreo+0x1c>)
 8001948:	6013      	str	r3, [r2, #0]
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200003f0 	.word	0x200003f0

08001958 <funcion_terminar>:

static void funcion_terminar (fsm_t* this)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	  maximo=0;
	  minimo=FLT_MAX;
	  SA=0;
	  boton=0;*/

	  muestrasAce = 0;
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <funcion_terminar+0x38>)
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
	  maximo = 0;
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <funcion_terminar+0x3c>)
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
	  minimo = FLT_MAX;
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <funcion_terminar+0x40>)
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <funcion_terminar+0x44>)
 8001972:	601a      	str	r2, [r3, #0]
      sample_tick = sample_tick + periodo;
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <funcion_terminar+0x48>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <funcion_terminar+0x4c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4413      	add	r3, r2
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <funcion_terminar+0x48>)
 8001980:	6013      	str	r3, [r2, #0]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	200003e8 	.word	0x200003e8
 8001994:	200003ec 	.word	0x200003ec
 8001998:	20000158 	.word	0x20000158
 800199c:	7f7fffff 	.word	0x7f7fffff
 80019a0:	200003f4 	.word	0x200003f4
 80019a4:	200003f8 	.word	0x200003f8

080019a8 <empieza_muestras>:

static int empieza_muestras (fsm_t* this)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	uint32_t actual = osKernelGetTickCount();
 80019b0:	f003 fece 	bl	8005750 <osKernelGetTickCount>
 80019b4:	60f8      	str	r0, [r7, #12]
	if ((actual - sample_tick) >= periodo)
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <empieza_muestras+0x34>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	1ad2      	subs	r2, r2, r3
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <empieza_muestras+0x38>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d305      	bcc.n	80019d2 <empieza_muestras+0x2a>
	{
		if (muestrasAce < 199) {
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <empieza_muestras+0x3c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2bc6      	cmp	r3, #198	; 0xc6
 80019cc:	dc01      	bgt.n	80019d2 <empieza_muestras+0x2a>
			return 1;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <empieza_muestras+0x2c>
		}
	}
	return 0;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200003f4 	.word	0x200003f4
 80019e0:	200003f8 	.word	0x200003f8
 80019e4:	200003e8 	.word	0x200003e8

080019e8 <funcion_comparar_calculo>:

static void funcion_comparar_calculo (fsm_t* this)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	; 0x30
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	float32_t sensory;
	float32_t sensorz;
	float32_t modulo;
	int16_t pDataXYZ[3];

	muestrasAce++;
 80019f0:	4b40      	ldr	r3, [pc, #256]	; (8001af4 <funcion_comparar_calculo+0x10c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	4a3f      	ldr	r2, [pc, #252]	; (8001af4 <funcion_comparar_calculo+0x10c>)
 80019f8:	6013      	str	r3, [r2, #0]
    sample_tick = sample_tick + periodo;
 80019fa:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <funcion_comparar_calculo+0x110>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <funcion_comparar_calculo+0x114>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a3c      	ldr	r2, [pc, #240]	; (8001af8 <funcion_comparar_calculo+0x110>)
 8001a06:	6013      	str	r3, [r2, #0]
	osMutexAcquire(i2cMutexHandle, osWaitForever);
 8001a08:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <funcion_comparar_calculo+0x118>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a10:	4618      	mov	r0, r3
 8001a12:	f004 f81b 	bl	8005a4c <osMutexAcquire>
	BSP_ACCELERO_GetXYZ(pDataXYZ);
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f007 fdba 	bl	8009594 <BSP_ACCELERO_GetXYZ>
	osMutexRelease(i2cMutexHandle);
 8001a20:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <funcion_comparar_calculo+0x118>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f004 f85c 	bl	8005ae2 <osMutexRelease>

	sensorx = (float32_t)pDataXYZ[0]; //para convertir a float
 8001a2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a36:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	sensory = (float32_t)pDataXYZ[1];
 8001a3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a46:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	sensorz = (float32_t)pDataXYZ[2];
 8001a4a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a56:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float32_t sc = (sensorx*sensorx) + (sensory*sensory) + (sensorz*sensorz);
 8001a5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a5e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a62:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7a:	edc7 7a08 	vstr	s15, [r7, #32]
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	61bb      	str	r3, [r7, #24]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001a88:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	db09      	blt.n	8001aaa <funcion_comparar_calculo+0xc2>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001a96:	ed97 0a07 	vldr	s0, [r7, #28]
 8001a9a:	f007 ff4f 	bl	800993c <sqrtf>
 8001a9e:	eef0 7a40 	vmov.f32	s15, s0
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001aa8:	e004      	b.n	8001ab4 <funcion_comparar_calculo+0xcc>
    }
    else
    {
      *pOut = 0.0f;
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001ab2:	bf00      	nop
	arm_sqrt_f32(sc, &modulo);
	if(modulo>maximo)
 8001ab4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <funcion_comparar_calculo+0x11c>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	dd02      	ble.n	8001ace <funcion_comparar_calculo+0xe6>
	{
		maximo=modulo;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <funcion_comparar_calculo+0x11c>)
 8001acc:	6013      	str	r3, [r2, #0]
	}
	if(modulo<minimo)
 8001ace:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <funcion_comparar_calculo+0x120>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	d400      	bmi.n	8001ae4 <funcion_comparar_calculo+0xfc>
	{
		minimo=modulo;
	}
}
 8001ae2:	e002      	b.n	8001aea <funcion_comparar_calculo+0x102>
		minimo=modulo;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <funcion_comparar_calculo+0x120>)
 8001ae8:	6013      	str	r3, [r2, #0]
}
 8001aea:	bf00      	nop
 8001aec:	3730      	adds	r7, #48	; 0x30
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200003e8 	.word	0x200003e8
 8001af8:	200003f4 	.word	0x200003f4
 8001afc:	200003f8 	.word	0x200003f8
 8001b00:	200003a0 	.word	0x200003a0
 8001b04:	200003ec 	.word	0x200003ec
 8001b08:	20000158 	.word	0x20000158

08001b0c <muestras_cumplidas>:

static int muestras_cumplidas (fsm_t* this)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	if(muestrasAce >= 199)
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <muestras_cumplidas+0x34>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2bc6      	cmp	r3, #198	; 0xc6
 8001b1a:	dd0c      	ble.n	8001b36 <muestras_cumplidas+0x2a>
	{
		uint32_t actual = osKernelGetTickCount();
 8001b1c:	f003 fe18 	bl	8005750 <osKernelGetTickCount>
 8001b20:	60f8      	str	r0, [r7, #12]
		if ((actual - sample_tick) >= periodo) {
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <muestras_cumplidas+0x38>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	1ad2      	subs	r2, r2, r3
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <muestras_cumplidas+0x3c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d301      	bcc.n	8001b36 <muestras_cumplidas+0x2a>
			return 1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <muestras_cumplidas+0x2c>
		}
	}
	return 0;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200003e8 	.word	0x200003e8
 8001b44:	200003f4 	.word	0x200003f4
 8001b48:	200003f8 	.word	0x200003f8

08001b4c <funcion_calculo>:

static void funcion_calculo (fsm_t* this)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	funcion_comparar_calculo(this);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff47 	bl	80019e8 <funcion_comparar_calculo>

	uint32_t deltaAce = (uint32_t)(maximo-minimo);
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <funcion_calculo+0x58>)
 8001b5c:	ed93 7a00 	vldr	s14, [r3]
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <funcion_calculo+0x5c>)
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b6e:	ee17 3a90 	vmov	r3, s15
 8001b72:	60fb      	str	r3, [r7, #12]
	maximo = 0;
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <funcion_calculo+0x58>)
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
	minimo = FLT_MAX;
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <funcion_calculo+0x5c>)
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <funcion_calculo+0x60>)
 8001b80:	601a      	str	r2, [r3, #0]
	muestrasAce = 0;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <funcion_calculo+0x64>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
	osMessageQueuePut(deltaAceQueueHandle, &deltaAce, 0, osWaitForever);
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <funcion_calculo+0x68>)
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	f107 010c 	add.w	r1, r7, #12
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b94:	2200      	movs	r2, #0
 8001b96:	f004 f975 	bl	8005e84 <osMessageQueuePut>
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200003ec 	.word	0x200003ec
 8001ba8:	20000158 	.word	0x20000158
 8001bac:	7f7fffff 	.word	0x7f7fffff
 8001bb0:	200003e8 	.word	0x200003e8
 8001bb4:	2000039c 	.word	0x2000039c

08001bb8 <muesAceFunction>:
	{ MUESTREO, 		Sistema_No_Activo, 			IDLE,  	funcion_terminar},
	{-1, NULL, -1, NULL },
	};

void muesAceFunction(void *argument)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	fsm_t * muestreoP1_fsm = fsm_new (muestreoP1);
 8001bc0:	4812      	ldr	r0, [pc, #72]	; (8001c0c <muesAceFunction+0x54>)
 8001bc2:	f7ff f88e 	bl	8000ce2 <fsm_new>
 8001bc6:	60f8      	str	r0, [r7, #12]
	tick = osKernelGetTickCount();
 8001bc8:	f003 fdc2 	bl	8005750 <osKernelGetTickCount>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <muesAceFunction+0x58>)
 8001bd0:	6013      	str	r3, [r2, #0]
	periodo = MSA*osKernelGetTickFreq()/1000;
 8001bd2:	f003 fdd2 	bl	800577a <osKernelGetTickFreq>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <muesAceFunction+0x5c>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <muesAceFunction+0x60>)
 8001be8:	6013      	str	r3, [r2, #0]

	 for(;;)
	 {
	   fsm_fire (muestreoP1_fsm);
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7ff f89d 	bl	8000d2a <fsm_fire>
	   tick += periodo;
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <muesAceFunction+0x58>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <muesAceFunction+0x60>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <muesAceFunction+0x58>)
 8001bfc:	6013      	str	r3, [r2, #0]
	   osDelayUntil(tick); ////Depende de los tick, con lo cual el periodo es mucho mayor que la fercuencia a la que se toman las muestras (5 ms) y no perdemos muestras
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <muesAceFunction+0x58>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 fe6f 	bl	80058e6 <osDelayUntil>
	   fsm_fire (muestreoP1_fsm);
 8001c08:	e7ef      	b.n	8001bea <muesAceFunction+0x32>
 8001c0a:	bf00      	nop
 8001c0c:	2000015c 	.word	0x2000015c
 8001c10:	200003f0 	.word	0x200003f0
 8001c14:	10624dd3 	.word	0x10624dd3
 8001c18:	200003f8 	.word	0x200003f8

08001c1c <Sistema_Activo>:
  INICIO_MUESTREO,
  MUESTREO,
};

static int Sistema_Activo (fsm_t* this)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	 return valueSA();
 8001c24:	f7fe fffc 	bl	8000c20 <valueSA>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <Sistema_No_Activo>:

static int Sistema_No_Activo (fsm_t* this)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
	 return !valueSA();
 8001c3a:	f7fe fff1 	bl	8000c20 <valueSA>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <funcion_muestreo>:

static void funcion_muestreo (fsm_t* this)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /*tiempo_t3=0;
  HAL_TIM_Base_Start_IT(&htim10); //5ms*/

	tick = osKernelGetTickCount();
 8001c5c:	f003 fd78 	bl	8005750 <osKernelGetTickCount>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a03      	ldr	r2, [pc, #12]	; (8001c70 <funcion_muestreo+0x1c>)
 8001c64:	6013      	str	r3, [r2, #0]
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000404 	.word	0x20000404

08001c74 <funcion_terminar>:

static void funcion_terminar (fsm_t* this)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	  maximo=0;
	  minimo=FLT_MAX;
	  SA=0;
	  boton=0;*/

	  muestrasMag = 0;
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <funcion_terminar+0x38>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
	  maximo = 0;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <funcion_terminar+0x3c>)
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
	  minimo = FLT_MAX;
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <funcion_terminar+0x40>)
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <funcion_terminar+0x44>)
 8001c8e:	601a      	str	r2, [r3, #0]
      sample_tick = sample_tick + periodo;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <funcion_terminar+0x48>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <funcion_terminar+0x4c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <funcion_terminar+0x48>)
 8001c9c:	6013      	str	r3, [r2, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200003fc 	.word	0x200003fc
 8001cb0:	20000400 	.word	0x20000400
 8001cb4:	200001ac 	.word	0x200001ac
 8001cb8:	7f7fffff 	.word	0x7f7fffff
 8001cbc:	20000408 	.word	0x20000408
 8001cc0:	2000040c 	.word	0x2000040c

08001cc4 <empieza_muestras>:

static int empieza_muestras (fsm_t* this)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	uint32_t actual = osKernelGetTickCount();
 8001ccc:	f003 fd40 	bl	8005750 <osKernelGetTickCount>
 8001cd0:	60f8      	str	r0, [r7, #12]
	if ((actual - sample_tick) >= periodo)
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <empieza_muestras+0x34>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	1ad2      	subs	r2, r2, r3
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <empieza_muestras+0x38>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d305      	bcc.n	8001cee <empieza_muestras+0x2a>
	{
		if (muestrasMag < 199) {
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <empieza_muestras+0x3c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2bc6      	cmp	r3, #198	; 0xc6
 8001ce8:	dc01      	bgt.n	8001cee <empieza_muestras+0x2a>
			return 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <empieza_muestras+0x2c>
		}
	}
	return 0;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000408 	.word	0x20000408
 8001cfc:	2000040c 	.word	0x2000040c
 8001d00:	200003fc 	.word	0x200003fc

08001d04 <funcion_comparar_calculo>:

static void funcion_comparar_calculo (fsm_t* this)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	float32_t sensorH;
	float32_t sensorL;
	float32_t modulo;
	int16_t pDataLH[2];

	muestrasMag++;
 8001d0c:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <funcion_comparar_calculo+0xe4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	4a35      	ldr	r2, [pc, #212]	; (8001de8 <funcion_comparar_calculo+0xe4>)
 8001d14:	6013      	str	r3, [r2, #0]
	osMutexAcquire(i2cMutexHandle, osWaitForever);
 8001d16:	4b35      	ldr	r3, [pc, #212]	; (8001dec <funcion_comparar_calculo+0xe8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 fe94 	bl	8005a4c <osMutexAcquire>
	LSM303AGR_MagReadXYZ(pDataLH);
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f8a2 	bl	8000e72 <LSM303AGR_MagReadXYZ>
	osMutexRelease(i2cMutexHandle);
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <funcion_comparar_calculo+0xe8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fed5 	bl	8005ae2 <osMutexRelease>

	sensorL = (float)pDataLH[0]; //para convertir a float
 8001d38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d44:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	sensorH = (float)pDataLH[1];
 8001d48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d54:	edc7 7a08 	vstr	s15, [r7, #32]

	float32_t sc = (sensorL*sensorL) + (sensorH*sensorH);
 8001d58:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d5c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d60:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6c:	edc7 7a07 	vstr	s15, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001d7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	db09      	blt.n	8001d9c <funcion_comparar_calculo+0x98>
      *pOut = __builtin_sqrtf(in);
 8001d88:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d8c:	f007 fdd6 	bl	800993c <sqrtf>
 8001d90:	eef0 7a40 	vmov.f32	s15, s0
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001d9a:	e004      	b.n	8001da6 <funcion_comparar_calculo+0xa2>
      *pOut = 0.0f;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001da4:	bf00      	nop
	arm_sqrt_f32(sc, &modulo);
	if(modulo>=maximo)
 8001da6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <funcion_comparar_calculo+0xec>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db8:	db03      	blt.n	8001dc2 <funcion_comparar_calculo+0xbe>
	{
		maximo=modulo;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4a0c      	ldr	r2, [pc, #48]	; (8001df0 <funcion_comparar_calculo+0xec>)
 8001dbe:	6013      	str	r3, [r2, #0]
	}
	else if(modulo<=minimo)
	{
		minimo=modulo;
	}
}
 8001dc0:	e00d      	b.n	8001dde <funcion_comparar_calculo+0xda>
	else if(modulo<=minimo)
 8001dc2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <funcion_comparar_calculo+0xf0>)
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd4:	d900      	bls.n	8001dd8 <funcion_comparar_calculo+0xd4>
}
 8001dd6:	e002      	b.n	8001dde <funcion_comparar_calculo+0xda>
		minimo=modulo;
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <funcion_comparar_calculo+0xf0>)
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	; 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200003fc 	.word	0x200003fc
 8001dec:	200003a0 	.word	0x200003a0
 8001df0:	20000400 	.word	0x20000400
 8001df4:	200001ac 	.word	0x200001ac

08001df8 <muestras_cumplidas>:

static int muestras_cumplidas (fsm_t* this)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	if(muestrasMag >= 199)
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <muestras_cumplidas+0x34>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2bc6      	cmp	r3, #198	; 0xc6
 8001e06:	dd0c      	ble.n	8001e22 <muestras_cumplidas+0x2a>
	{
		uint32_t actual = osKernelGetTickCount();
 8001e08:	f003 fca2 	bl	8005750 <osKernelGetTickCount>
 8001e0c:	60f8      	str	r0, [r7, #12]
		if ((actual - sample_tick) >= periodo) {
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <muestras_cumplidas+0x38>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	1ad2      	subs	r2, r2, r3
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <muestras_cumplidas+0x3c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d301      	bcc.n	8001e22 <muestras_cumplidas+0x2a>
			return 1;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <muestras_cumplidas+0x2c>
		}
	}
	return 0;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200003fc 	.word	0x200003fc
 8001e30:	20000408 	.word	0x20000408
 8001e34:	2000040c 	.word	0x2000040c

08001e38 <funcion_calculo>:

static void funcion_calculo (fsm_t* this)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	funcion_comparar_calculo(this);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff5f 	bl	8001d04 <funcion_comparar_calculo>

	uint32_t deltaAce = (uint32_t)(maximo-minimo);
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <funcion_calculo+0x58>)
 8001e48:	ed93 7a00 	vldr	s14, [r3]
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <funcion_calculo+0x5c>)
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e5a:	ee17 3a90 	vmov	r3, s15
 8001e5e:	60fb      	str	r3, [r7, #12]
	maximo = 0;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <funcion_calculo+0x58>)
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
	minimo = FLT_MAX;
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <funcion_calculo+0x5c>)
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <funcion_calculo+0x60>)
 8001e6c:	601a      	str	r2, [r3, #0]
	muestrasMag = 0;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <funcion_calculo+0x64>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
	osMessageQueuePut(deltaAceQueueHandle, &deltaAce, 0, osWaitForever);
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <funcion_calculo+0x68>)
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	f107 010c 	add.w	r1, r7, #12
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e80:	2200      	movs	r2, #0
 8001e82:	f003 ffff 	bl	8005e84 <osMessageQueuePut>
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000400 	.word	0x20000400
 8001e94:	200001ac 	.word	0x200001ac
 8001e98:	7f7fffff 	.word	0x7f7fffff
 8001e9c:	200003fc 	.word	0x200003fc
 8001ea0:	2000039c 	.word	0x2000039c

08001ea4 <muesMagFunction>:
	{ MUESTREO, 		Sistema_No_Activo, 			IDLE,  	funcion_terminar},
	{-1, NULL, -1, NULL },
	};

void muesMagFunction(void *argument)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	fsm_t * muestreoP1_fsm = fsm_new (muestreoP1);
 8001eac:	4812      	ldr	r0, [pc, #72]	; (8001ef8 <muesMagFunction+0x54>)
 8001eae:	f7fe ff18 	bl	8000ce2 <fsm_new>
 8001eb2:	60f8      	str	r0, [r7, #12]
	tick = osKernelGetTickCount();
 8001eb4:	f003 fc4c 	bl	8005750 <osKernelGetTickCount>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <muesMagFunction+0x58>)
 8001ebc:	6013      	str	r3, [r2, #0]
	periodo = MSM*osKernelGetTickFreq()/1000;
 8001ebe:	f003 fc5c 	bl	800577a <osKernelGetTickFreq>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <muesMagFunction+0x5c>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <muesMagFunction+0x60>)
 8001ed4:	6013      	str	r3, [r2, #0]

	 for(;;)
	 {
	   fsm_fire (muestreoP1_fsm);
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f7fe ff27 	bl	8000d2a <fsm_fire>
	   tick += periodo;
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <muesMagFunction+0x58>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <muesMagFunction+0x60>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <muesMagFunction+0x58>)
 8001ee8:	6013      	str	r3, [r2, #0]
	   osDelayUntil(tick); ////Depende de los tick, con lo cual el periodo es mucho mayor que la fercuencia a la que se toman las muestras (5 ms) y no perdemos muestras
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <muesMagFunction+0x58>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fcf9 	bl	80058e6 <osDelayUntil>
	   fsm_fire (muestreoP1_fsm);
 8001ef4:	e7ef      	b.n	8001ed6 <muesMagFunction+0x32>
 8001ef6:	bf00      	nop
 8001ef8:	200001b0 	.word	0x200001b0
 8001efc:	20000404 	.word	0x20000404
 8001f00:	10624dd3 	.word	0x10624dd3
 8001f04:	2000040c 	.word	0x2000040c

08001f08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_MspInit+0x54>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_MspInit+0x54>)
 8001f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_MspInit+0x54>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_MspInit+0x54>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_MspInit+0x54>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_MspInit+0x54>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	210f      	movs	r1, #15
 8001f4a:	f06f 0001 	mvn.w	r0, #1
 8001f4e:	f000 fb1b 	bl	8002588 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_I2C_MspInit+0x84>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12c      	bne.n	8001fdc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_I2C_MspInit+0x88>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_I2C_MspInit+0x88>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_I2C_MspInit+0x88>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001f9e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa4:	2312      	movs	r3, #18
 8001fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480c      	ldr	r0, [pc, #48]	; (8001fec <HAL_I2C_MspInit+0x8c>)
 8001fbc:	f000 fb0e 	bl	80025dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_I2C_MspInit+0x88>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_I2C_MspInit+0x88>)
 8001fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fce:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_I2C_MspInit+0x88>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020400 	.word	0x40020400

08001ff0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_I2C_MspDeInit+0x38>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10e      	bne.n	8002020 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_I2C_MspDeInit+0x3c>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_I2C_MspDeInit+0x3c>)
 8002008:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 800200e:	2140      	movs	r1, #64	; 0x40
 8002010:	4807      	ldr	r0, [pc, #28]	; (8002030 <HAL_I2C_MspDeInit+0x40>)
 8002012:	f000 fc67 	bl	80028e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8002016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <HAL_I2C_MspDeInit+0x40>)
 800201c:	f000 fc62 	bl	80028e4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40005400 	.word	0x40005400
 800202c:	40023800 	.word	0x40023800
 8002030:	40020400 	.word	0x40020400

08002034 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a19      	ldr	r2, [pc, #100]	; (80020b8 <HAL_SPI_MspInit+0x84>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d12b      	bne.n	80020ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_SPI_MspInit+0x88>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a17      	ldr	r2, [pc, #92]	; (80020bc <HAL_SPI_MspInit+0x88>)
 8002060:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_SPI_MspInit+0x88>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_SPI_MspInit+0x88>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a10      	ldr	r2, [pc, #64]	; (80020bc <HAL_SPI_MspInit+0x88>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <HAL_SPI_MspInit+0x88>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800208e:	23e0      	movs	r3, #224	; 0xe0
 8002090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800209e:	2305      	movs	r3, #5
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 0314 	add.w	r3, r7, #20
 80020a6:	4619      	mov	r1, r3
 80020a8:	4805      	ldr	r0, [pc, #20]	; (80020c0 <HAL_SPI_MspInit+0x8c>)
 80020aa:	f000 fa97 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020ae:	bf00      	nop
 80020b0:	3728      	adds	r7, #40	; 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40013000 	.word	0x40013000
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020000 	.word	0x40020000

080020c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0b      	ldr	r2, [pc, #44]	; (8002100 <HAL_TIM_Base_MspInit+0x3c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d10d      	bne.n	80020f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_TIM_Base_MspInit+0x40>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a09      	ldr	r2, [pc, #36]	; (8002104 <HAL_TIM_Base_MspInit+0x40>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HAL_TIM_Base_MspInit+0x40>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40000800 	.word	0x40000800
 8002104:	40023800 	.word	0x40023800

08002108 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 030c 	add.w	r3, r7, #12
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a12      	ldr	r2, [pc, #72]	; (8002170 <HAL_TIM_MspPostInit+0x68>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d11e      	bne.n	8002168 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_TIM_MspPostInit+0x6c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a10      	ldr	r2, [pc, #64]	; (8002174 <HAL_TIM_MspPostInit+0x6c>)
 8002134:	f043 0308 	orr.w	r3, r3, #8
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <HAL_TIM_MspPostInit+0x6c>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002146:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800214a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002158:	2302      	movs	r3, #2
 800215a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	4619      	mov	r1, r3
 8002162:	4805      	ldr	r0, [pc, #20]	; (8002178 <HAL_TIM_MspPostInit+0x70>)
 8002164:	f000 fa3a 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002168:	bf00      	nop
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40000800 	.word	0x40000800
 8002174:	40023800 	.word	0x40023800
 8002178:	40020c00 	.word	0x40020c00

0800217c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08c      	sub	sp, #48	; 0x30
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	4b2e      	ldr	r3, [pc, #184]	; (800224c <HAL_InitTick+0xd0>)
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	4a2d      	ldr	r2, [pc, #180]	; (800224c <HAL_InitTick+0xd0>)
 8002196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219a:	6453      	str	r3, [r2, #68]	; 0x44
 800219c:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_InitTick+0xd0>)
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021a8:	f107 020c 	add.w	r2, r7, #12
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f002 f95c 	bl	8004470 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80021b8:	f002 f946 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 80021bc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	4a23      	ldr	r2, [pc, #140]	; (8002250 <HAL_InitTick+0xd4>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	0c9b      	lsrs	r3, r3, #18
 80021c8:	3b01      	subs	r3, #1
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_InitTick+0xd8>)
 80021ce:	4a22      	ldr	r2, [pc, #136]	; (8002258 <HAL_InitTick+0xdc>)
 80021d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_InitTick+0xd8>)
 80021d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021d8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80021da:	4a1e      	ldr	r2, [pc, #120]	; (8002254 <HAL_InitTick+0xd8>)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80021e0:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_InitTick+0xd8>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_InitTick+0xd8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_InitTick+0xd8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80021f2:	4818      	ldr	r0, [pc, #96]	; (8002254 <HAL_InitTick+0xd8>)
 80021f4:	f002 f9f7 	bl	80045e6 <HAL_TIM_Base_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80021fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11b      	bne.n	800223e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8002206:	4813      	ldr	r0, [pc, #76]	; (8002254 <HAL_InitTick+0xd8>)
 8002208:	f002 fa3c 	bl	8004684 <HAL_TIM_Base_Start_IT>
 800220c:	4603      	mov	r3, r0
 800220e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002212:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002216:	2b00      	cmp	r3, #0
 8002218:	d111      	bne.n	800223e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800221a:	2019      	movs	r0, #25
 800221c:	f000 f9d0 	bl	80025c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b0f      	cmp	r3, #15
 8002224:	d808      	bhi.n	8002238 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002226:	2200      	movs	r2, #0
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	2019      	movs	r0, #25
 800222c:	f000 f9ac 	bl	8002588 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002230:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_InitTick+0xe0>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e002      	b.n	800223e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800223e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002242:	4618      	mov	r0, r3
 8002244:	3730      	adds	r7, #48	; 0x30
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	431bde83 	.word	0x431bde83
 8002254:	20000410 	.word	0x20000410
 8002258:	40014400 	.word	0x40014400
 800225c:	20000204 	.word	0x20000204

08002260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <NMI_Handler+0x4>

08002266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <HardFault_Handler+0x4>

0800226c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <MemManage_Handler+0x4>

08002272 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <BusFault_Handler+0x4>

08002278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <UsageFault_Handler+0x4>

0800227e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(boton_Pin);
 8002290:	2001      	movs	r0, #1
 8002292:	f000 fc3f 	bl	8002b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80022a2:	f002 fbbf 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000410 	.word	0x20000410

080022b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022b8:	4a14      	ldr	r2, [pc, #80]	; (800230c <_sbrk+0x5c>)
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <_sbrk+0x60>)
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c4:	4b13      	ldr	r3, [pc, #76]	; (8002314 <_sbrk+0x64>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <_sbrk+0x64>)
 80022ce:	4a12      	ldr	r2, [pc, #72]	; (8002318 <_sbrk+0x68>)
 80022d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <_sbrk+0x64>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d207      	bcs.n	80022f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e0:	f007 faa6 	bl	8009830 <__errno>
 80022e4:	4603      	mov	r3, r0
 80022e6:	220c      	movs	r2, #12
 80022e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ee:	e009      	b.n	8002304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <_sbrk+0x64>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	4a05      	ldr	r2, [pc, #20]	; (8002314 <_sbrk+0x64>)
 8002300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20020000 	.word	0x20020000
 8002310:	00000400 	.word	0x00000400
 8002314:	20000458 	.word	0x20000458
 8002318:	20004fe8 	.word	0x20004fe8

0800231c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <SystemInit+0x20>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <SystemInit+0x20>)
 8002328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800232c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002378 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002344:	480d      	ldr	r0, [pc, #52]	; (800237c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002346:	490e      	ldr	r1, [pc, #56]	; (8002380 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002348:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800234a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800234c:	e002      	b.n	8002354 <LoopCopyDataInit>

0800234e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002352:	3304      	adds	r3, #4

08002354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002358:	d3f9      	bcc.n	800234e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800235a:	4a0b      	ldr	r2, [pc, #44]	; (8002388 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800235c:	4c0b      	ldr	r4, [pc, #44]	; (800238c <LoopFillZerobss+0x26>)
  movs r3, #0
 800235e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002360:	e001      	b.n	8002366 <LoopFillZerobss>

08002362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002364:	3204      	adds	r2, #4

08002366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002368:	d3fb      	bcc.n	8002362 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800236a:	f7ff ffd7 	bl	800231c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800236e:	f007 fa65 	bl	800983c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002372:	f7fe fdcb 	bl	8000f0c <main>
  bx  lr    
 8002376:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002378:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800237c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002380:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002384:	08009bd8 	.word	0x08009bd8
  ldr r2, =_sbss
 8002388:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 800238c:	20004fe8 	.word	0x20004fe8

08002390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002390:	e7fe      	b.n	8002390 <ADC_IRQHandler>
	...

08002394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0d      	ldr	r2, [pc, #52]	; (80023d4 <HAL_Init+0x40>)
 800239e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <HAL_Init+0x40>)
 80023aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_Init+0x40>)
 80023b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023bc:	2003      	movs	r0, #3
 80023be:	f000 f8d8 	bl	8002572 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c2:	200f      	movs	r0, #15
 80023c4:	f7ff feda 	bl	800217c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c8:	f7ff fd9e 	bl	8001f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023c00 	.word	0x40023c00

080023d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_IncTick+0x20>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_IncTick+0x24>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_IncTick+0x24>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000208 	.word	0x20000208
 80023fc:	2000045c 	.word	0x2000045c

08002400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return uwTick;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_GetTick+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	2000045c 	.word	0x2000045c

08002418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002434:	4013      	ands	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244a:	4a04      	ldr	r2, [pc, #16]	; (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	60d3      	str	r3, [r2, #12]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <__NVIC_GetPriorityGrouping+0x18>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	f003 0307 	and.w	r3, r3, #7
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	2b00      	cmp	r3, #0
 800248c:	db0b      	blt.n	80024a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	f003 021f 	and.w	r2, r3, #31
 8002494:	4907      	ldr	r1, [pc, #28]	; (80024b4 <__NVIC_EnableIRQ+0x38>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2001      	movs	r0, #1
 800249e:	fa00 f202 	lsl.w	r2, r0, r2
 80024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000e100 	.word	0xe000e100

080024b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	db0a      	blt.n	80024e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	490c      	ldr	r1, [pc, #48]	; (8002504 <__NVIC_SetPriority+0x4c>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	440b      	add	r3, r1
 80024dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e0:	e00a      	b.n	80024f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4908      	ldr	r1, [pc, #32]	; (8002508 <__NVIC_SetPriority+0x50>)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3b04      	subs	r3, #4
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	440b      	add	r3, r1
 80024f6:	761a      	strb	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000e100 	.word	0xe000e100
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f1c3 0307 	rsb	r3, r3, #7
 8002526:	2b04      	cmp	r3, #4
 8002528:	bf28      	it	cs
 800252a:	2304      	movcs	r3, #4
 800252c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3304      	adds	r3, #4
 8002532:	2b06      	cmp	r3, #6
 8002534:	d902      	bls.n	800253c <NVIC_EncodePriority+0x30>
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3b03      	subs	r3, #3
 800253a:	e000      	b.n	800253e <NVIC_EncodePriority+0x32>
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	401a      	ands	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	43d9      	mvns	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	4313      	orrs	r3, r2
         );
}
 8002566:	4618      	mov	r0, r3
 8002568:	3724      	adds	r7, #36	; 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ff4c 	bl	8002418 <__NVIC_SetPriorityGrouping>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800259a:	f7ff ff61 	bl	8002460 <__NVIC_GetPriorityGrouping>
 800259e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	6978      	ldr	r0, [r7, #20]
 80025a6:	f7ff ffb1 	bl	800250c <NVIC_EncodePriority>
 80025aa:	4602      	mov	r2, r0
 80025ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff80 	bl	80024b8 <__NVIC_SetPriority>
}
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff54 	bl	800247c <__NVIC_EnableIRQ>
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	e159      	b.n	80028ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	429a      	cmp	r2, r3
 8002612:	f040 8148 	bne.w	80028a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d005      	beq.n	800262e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262a:	2b02      	cmp	r3, #2
 800262c:	d130      	bne.n	8002690 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	2203      	movs	r2, #3
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002664:	2201      	movs	r2, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 0201 	and.w	r2, r3, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b03      	cmp	r3, #3
 800269a:	d017      	beq.n	80026cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2203      	movs	r2, #3
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d123      	bne.n	8002720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	08da      	lsrs	r2, r3, #3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3208      	adds	r2, #8
 80026e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	220f      	movs	r2, #15
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	08da      	lsrs	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3208      	adds	r2, #8
 800271a:	69b9      	ldr	r1, [r7, #24]
 800271c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0203 	and.w	r2, r3, #3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80a2 	beq.w	80028a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b57      	ldr	r3, [pc, #348]	; (80028c4 <HAL_GPIO_Init+0x2e8>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a56      	ldr	r2, [pc, #344]	; (80028c4 <HAL_GPIO_Init+0x2e8>)
 800276c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b54      	ldr	r3, [pc, #336]	; (80028c4 <HAL_GPIO_Init+0x2e8>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277e:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_GPIO_Init+0x2ec>)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	3302      	adds	r3, #2
 8002786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	220f      	movs	r2, #15
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a49      	ldr	r2, [pc, #292]	; (80028cc <HAL_GPIO_Init+0x2f0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d019      	beq.n	80027de <HAL_GPIO_Init+0x202>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a48      	ldr	r2, [pc, #288]	; (80028d0 <HAL_GPIO_Init+0x2f4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_GPIO_Init+0x1fe>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a47      	ldr	r2, [pc, #284]	; (80028d4 <HAL_GPIO_Init+0x2f8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00d      	beq.n	80027d6 <HAL_GPIO_Init+0x1fa>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a46      	ldr	r2, [pc, #280]	; (80028d8 <HAL_GPIO_Init+0x2fc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <HAL_GPIO_Init+0x1f6>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a45      	ldr	r2, [pc, #276]	; (80028dc <HAL_GPIO_Init+0x300>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_GPIO_Init+0x1f2>
 80027ca:	2304      	movs	r3, #4
 80027cc:	e008      	b.n	80027e0 <HAL_GPIO_Init+0x204>
 80027ce:	2307      	movs	r3, #7
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x204>
 80027d2:	2303      	movs	r3, #3
 80027d4:	e004      	b.n	80027e0 <HAL_GPIO_Init+0x204>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e002      	b.n	80027e0 <HAL_GPIO_Init+0x204>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_GPIO_Init+0x204>
 80027de:	2300      	movs	r3, #0
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	f002 0203 	and.w	r2, r2, #3
 80027e6:	0092      	lsls	r2, r2, #2
 80027e8:	4093      	lsls	r3, r2
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f0:	4935      	ldr	r1, [pc, #212]	; (80028c8 <HAL_GPIO_Init+0x2ec>)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fe:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <HAL_GPIO_Init+0x304>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002822:	4a2f      	ldr	r2, [pc, #188]	; (80028e0 <HAL_GPIO_Init+0x304>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002828:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_GPIO_Init+0x304>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800284c:	4a24      	ldr	r2, [pc, #144]	; (80028e0 <HAL_GPIO_Init+0x304>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <HAL_GPIO_Init+0x304>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002876:	4a1a      	ldr	r2, [pc, #104]	; (80028e0 <HAL_GPIO_Init+0x304>)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_GPIO_Init+0x304>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a0:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <HAL_GPIO_Init+0x304>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	f67f aea2 	bls.w	80025f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	3724      	adds	r7, #36	; 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40013800 	.word	0x40013800
 80028cc:	40020000 	.word	0x40020000
 80028d0:	40020400 	.word	0x40020400
 80028d4:	40020800 	.word	0x40020800
 80028d8:	40020c00 	.word	0x40020c00
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40013c00 	.word	0x40013c00

080028e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e0bb      	b.n	8002a78 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002900:	2201      	movs	r2, #1
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	429a      	cmp	r2, r3
 8002918:	f040 80ab 	bne.w	8002a72 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800291c:	4a5c      	ldr	r2, [pc, #368]	; (8002a90 <HAL_GPIO_DeInit+0x1ac>)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	4013      	ands	r3, r2
 800293c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a54      	ldr	r2, [pc, #336]	; (8002a94 <HAL_GPIO_DeInit+0x1b0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_GPIO_DeInit+0x96>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a53      	ldr	r2, [pc, #332]	; (8002a98 <HAL_GPIO_DeInit+0x1b4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_DeInit+0x92>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a52      	ldr	r2, [pc, #328]	; (8002a9c <HAL_GPIO_DeInit+0x1b8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_DeInit+0x8e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a51      	ldr	r2, [pc, #324]	; (8002aa0 <HAL_GPIO_DeInit+0x1bc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_DeInit+0x8a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a50      	ldr	r2, [pc, #320]	; (8002aa4 <HAL_GPIO_DeInit+0x1c0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_DeInit+0x86>
 8002966:	2304      	movs	r3, #4
 8002968:	e008      	b.n	800297c <HAL_GPIO_DeInit+0x98>
 800296a:	2307      	movs	r3, #7
 800296c:	e006      	b.n	800297c <HAL_GPIO_DeInit+0x98>
 800296e:	2303      	movs	r3, #3
 8002970:	e004      	b.n	800297c <HAL_GPIO_DeInit+0x98>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_DeInit+0x98>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_DeInit+0x98>
 800297a:	2300      	movs	r3, #0
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	f002 0203 	and.w	r2, r2, #3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4093      	lsls	r3, r2
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	429a      	cmp	r2, r3
 800298a:	d132      	bne.n	80029f2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800298c:	4b46      	ldr	r3, [pc, #280]	; (8002aa8 <HAL_GPIO_DeInit+0x1c4>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	43db      	mvns	r3, r3
 8002994:	4944      	ldr	r1, [pc, #272]	; (8002aa8 <HAL_GPIO_DeInit+0x1c4>)
 8002996:	4013      	ands	r3, r2
 8002998:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800299a:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <HAL_GPIO_DeInit+0x1c4>)
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	4941      	ldr	r1, [pc, #260]	; (8002aa8 <HAL_GPIO_DeInit+0x1c4>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80029a8:	4b3f      	ldr	r3, [pc, #252]	; (8002aa8 <HAL_GPIO_DeInit+0x1c4>)
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	493d      	ldr	r1, [pc, #244]	; (8002aa8 <HAL_GPIO_DeInit+0x1c4>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80029b6:	4b3c      	ldr	r3, [pc, #240]	; (8002aa8 <HAL_GPIO_DeInit+0x1c4>)
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	43db      	mvns	r3, r3
 80029be:	493a      	ldr	r1, [pc, #232]	; (8002aa8 <HAL_GPIO_DeInit+0x1c4>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	220f      	movs	r2, #15
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80029d4:	4a2e      	ldr	r2, [pc, #184]	; (8002a90 <HAL_GPIO_DeInit+0x1ac>)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	3302      	adds	r3, #2
 80029dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	43da      	mvns	r2, r3
 80029e4:	482a      	ldr	r0, [pc, #168]	; (8002a90 <HAL_GPIO_DeInit+0x1ac>)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	400a      	ands	r2, r1
 80029ec:	3302      	adds	r3, #2
 80029ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2103      	movs	r1, #3
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	401a      	ands	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	08da      	lsrs	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3208      	adds	r2, #8
 8002a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	08d2      	lsrs	r2, r2, #3
 8002a28:	4019      	ands	r1, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3208      	adds	r2, #8
 8002a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2103      	movs	r1, #3
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	401a      	ands	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	401a      	ands	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	2103      	movs	r1, #3
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	3301      	adds	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b0f      	cmp	r3, #15
 8002a7c:	f67f af40 	bls.w	8002900 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40013800 	.word	0x40013800
 8002a94:	40020000 	.word	0x40020000
 8002a98:	40020400 	.word	0x40020400
 8002a9c:	40020800 	.word	0x40020800
 8002aa0:	40020c00 	.word	0x40020c00
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40013c00 	.word	0x40013c00

08002aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002abc:	787b      	ldrb	r3, [r7, #1]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ac8:	e003      	b.n	8002ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aca:	887b      	ldrh	r3, [r7, #2]
 8002acc:	041a      	lsls	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	619a      	str	r2, [r3, #24]
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002af0:	887a      	ldrh	r2, [r7, #2]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4013      	ands	r3, r2
 8002af6:	041a      	lsls	r2, r3, #16
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43d9      	mvns	r1, r3
 8002afc:	887b      	ldrh	r3, [r7, #2]
 8002afe:	400b      	ands	r3, r1
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	619a      	str	r2, [r3, #24]
}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b2a:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fd44 	bl	80015c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40013c00 	.word	0x40013c00

08002b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e12b      	b.n	8002dae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff f9f8 	bl	8001f60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2224      	movs	r2, #36	; 0x24
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ba8:	f001 fc3a 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8002bac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4a81      	ldr	r2, [pc, #516]	; (8002db8 <HAL_I2C_Init+0x274>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d807      	bhi.n	8002bc8 <HAL_I2C_Init+0x84>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a80      	ldr	r2, [pc, #512]	; (8002dbc <HAL_I2C_Init+0x278>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	bf94      	ite	ls
 8002bc0:	2301      	movls	r3, #1
 8002bc2:	2300      	movhi	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e006      	b.n	8002bd6 <HAL_I2C_Init+0x92>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4a7d      	ldr	r2, [pc, #500]	; (8002dc0 <HAL_I2C_Init+0x27c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	bf94      	ite	ls
 8002bd0:	2301      	movls	r3, #1
 8002bd2:	2300      	movhi	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0e7      	b.n	8002dae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4a78      	ldr	r2, [pc, #480]	; (8002dc4 <HAL_I2C_Init+0x280>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	0c9b      	lsrs	r3, r3, #18
 8002be8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4a6a      	ldr	r2, [pc, #424]	; (8002db8 <HAL_I2C_Init+0x274>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d802      	bhi.n	8002c18 <HAL_I2C_Init+0xd4>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3301      	adds	r3, #1
 8002c16:	e009      	b.n	8002c2c <HAL_I2C_Init+0xe8>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	4a69      	ldr	r2, [pc, #420]	; (8002dc8 <HAL_I2C_Init+0x284>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	099b      	lsrs	r3, r3, #6
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	495c      	ldr	r1, [pc, #368]	; (8002db8 <HAL_I2C_Init+0x274>)
 8002c48:	428b      	cmp	r3, r1
 8002c4a:	d819      	bhi.n	8002c80 <HAL_I2C_Init+0x13c>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e59      	subs	r1, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c5a:	1c59      	adds	r1, r3, #1
 8002c5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c60:	400b      	ands	r3, r1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_I2C_Init+0x138>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1e59      	subs	r1, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c74:	3301      	adds	r3, #1
 8002c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7a:	e051      	b.n	8002d20 <HAL_I2C_Init+0x1dc>
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	e04f      	b.n	8002d20 <HAL_I2C_Init+0x1dc>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d111      	bne.n	8002cac <HAL_I2C_Init+0x168>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1e58      	subs	r0, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	440b      	add	r3, r1
 8002c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e012      	b.n	8002cd2 <HAL_I2C_Init+0x18e>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1e58      	subs	r0, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	0099      	lsls	r1, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Init+0x196>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e022      	b.n	8002d20 <HAL_I2C_Init+0x1dc>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10e      	bne.n	8002d00 <HAL_I2C_Init+0x1bc>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1e58      	subs	r0, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	440b      	add	r3, r1
 8002cf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cfe:	e00f      	b.n	8002d20 <HAL_I2C_Init+0x1dc>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e58      	subs	r0, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	0099      	lsls	r1, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	6809      	ldr	r1, [r1, #0]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69da      	ldr	r2, [r3, #28]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6911      	ldr	r1, [r2, #16]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68d2      	ldr	r2, [r2, #12]
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	430b      	orrs	r3, r1
 8002d62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	000186a0 	.word	0x000186a0
 8002dbc:	001e847f 	.word	0x001e847f
 8002dc0:	003d08ff 	.word	0x003d08ff
 8002dc4:	431bde83 	.word	0x431bde83
 8002dc8:	10624dd3 	.word	0x10624dd3

08002dcc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e021      	b.n	8002e22 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2224      	movs	r2, #36	; 0x24
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff f8fa 	bl	8001ff0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	817b      	strh	r3, [r7, #10]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	813b      	strh	r3, [r7, #8]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e46:	f7ff fadb 	bl	8002400 <HAL_GetTick>
 8002e4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	f040 80d9 	bne.w	800300c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	2319      	movs	r3, #25
 8002e60:	2201      	movs	r2, #1
 8002e62:	496d      	ldr	r1, [pc, #436]	; (8003018 <HAL_I2C_Mem_Write+0x1ec>)
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fc8d 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
 8002e72:	e0cc      	b.n	800300e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_I2C_Mem_Write+0x56>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e0c5      	b.n	800300e <HAL_I2C_Mem_Write+0x1e2>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d007      	beq.n	8002ea8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2221      	movs	r2, #33	; 0x21
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2240      	movs	r2, #64	; 0x40
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a3a      	ldr	r2, [r7, #32]
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a4d      	ldr	r2, [pc, #308]	; (800301c <HAL_I2C_Mem_Write+0x1f0>)
 8002ee8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eea:	88f8      	ldrh	r0, [r7, #6]
 8002eec:	893a      	ldrh	r2, [r7, #8]
 8002eee:	8979      	ldrh	r1, [r7, #10]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	4603      	mov	r3, r0
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fac4 	bl	8003488 <I2C_RequestMemoryWrite>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d052      	beq.n	8002fac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e081      	b.n	800300e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fd0e 	bl	8003930 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00d      	beq.n	8002f36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d107      	bne.n	8002f32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e06b      	b.n	800300e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	781a      	ldrb	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d11b      	bne.n	8002fac <HAL_I2C_Mem_Write+0x180>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d017      	beq.n	8002fac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	781a      	ldrb	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1aa      	bne.n	8002f0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fcfa 	bl	80039b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00d      	beq.n	8002fe0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d107      	bne.n	8002fdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e016      	b.n	800300e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	00100002 	.word	0x00100002
 800301c:	ffff0000 	.word	0xffff0000

08003020 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08c      	sub	sp, #48	; 0x30
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	4608      	mov	r0, r1
 800302a:	4611      	mov	r1, r2
 800302c:	461a      	mov	r2, r3
 800302e:	4603      	mov	r3, r0
 8003030:	817b      	strh	r3, [r7, #10]
 8003032:	460b      	mov	r3, r1
 8003034:	813b      	strh	r3, [r7, #8]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800303a:	f7ff f9e1 	bl	8002400 <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b20      	cmp	r3, #32
 800304a:	f040 8208 	bne.w	800345e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2319      	movs	r3, #25
 8003054:	2201      	movs	r2, #1
 8003056:	497b      	ldr	r1, [pc, #492]	; (8003244 <HAL_I2C_Mem_Read+0x224>)
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fb93 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
 8003066:	e1fb      	b.n	8003460 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_I2C_Mem_Read+0x56>
 8003072:	2302      	movs	r3, #2
 8003074:	e1f4      	b.n	8003460 <HAL_I2C_Mem_Read+0x440>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d007      	beq.n	800309c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2222      	movs	r2, #34	; 0x22
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2240      	movs	r2, #64	; 0x40
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4a5b      	ldr	r2, [pc, #364]	; (8003248 <HAL_I2C_Mem_Read+0x228>)
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030de:	88f8      	ldrh	r0, [r7, #6]
 80030e0:	893a      	ldrh	r2, [r7, #8]
 80030e2:	8979      	ldrh	r1, [r7, #10]
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	4603      	mov	r3, r0
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa60 	bl	80035b4 <I2C_RequestMemoryRead>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e1b0      	b.n	8003460 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	2b00      	cmp	r3, #0
 8003104:	d113      	bne.n	800312e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003106:	2300      	movs	r3, #0
 8003108:	623b      	str	r3, [r7, #32]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	623b      	str	r3, [r7, #32]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	623b      	str	r3, [r7, #32]
 800311a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e184      	b.n	8003438 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003132:	2b01      	cmp	r3, #1
 8003134:	d11b      	bne.n	800316e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003144:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	e164      	b.n	8003438 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003172:	2b02      	cmp	r3, #2
 8003174:	d11b      	bne.n	80031ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003184:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003194:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	e144      	b.n	8003438 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031c4:	e138      	b.n	8003438 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	f200 80f1 	bhi.w	80033b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d123      	bne.n	8003220 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fc29 	bl	8003a34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e139      	b.n	8003460 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800321e:	e10b      	b.n	8003438 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003224:	2b02      	cmp	r3, #2
 8003226:	d14e      	bne.n	80032c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322e:	2200      	movs	r2, #0
 8003230:	4906      	ldr	r1, [pc, #24]	; (800324c <HAL_I2C_Mem_Read+0x22c>)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 faa6 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e10e      	b.n	8003460 <HAL_I2C_Mem_Read+0x440>
 8003242:	bf00      	nop
 8003244:	00100002 	.word	0x00100002
 8003248:	ffff0000 	.word	0xffff0000
 800324c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032c4:	e0b8      	b.n	8003438 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032cc:	2200      	movs	r2, #0
 80032ce:	4966      	ldr	r1, [pc, #408]	; (8003468 <HAL_I2C_Mem_Read+0x448>)
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fa57 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0bf      	b.n	8003460 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003328:	2200      	movs	r2, #0
 800332a:	494f      	ldr	r1, [pc, #316]	; (8003468 <HAL_I2C_Mem_Read+0x448>)
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 fa29 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e091      	b.n	8003460 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033b0:	e042      	b.n	8003438 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fb3c 	bl	8003a34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e04c      	b.n	8003460 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b04      	cmp	r3, #4
 8003404:	d118      	bne.n	8003438 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	f47f aec2 	bne.w	80031c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	e000      	b.n	8003460 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800345e:	2302      	movs	r3, #2
  }
}
 8003460:	4618      	mov	r0, r3
 8003462:	3728      	adds	r7, #40	; 0x28
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	00010004 	.word	0x00010004

0800346c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347a:	b2db      	uxtb	r3, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	4608      	mov	r0, r1
 8003492:	4611      	mov	r1, r2
 8003494:	461a      	mov	r2, r3
 8003496:	4603      	mov	r3, r0
 8003498:	817b      	strh	r3, [r7, #10]
 800349a:	460b      	mov	r3, r1
 800349c:	813b      	strh	r3, [r7, #8]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f960 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d8:	d103      	bne.n	80034e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e05f      	b.n	80035a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	6a3a      	ldr	r2, [r7, #32]
 80034fa:	492d      	ldr	r1, [pc, #180]	; (80035b0 <I2C_RequestMemoryWrite+0x128>)
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f998 	bl	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e04c      	b.n	80035a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003524:	6a39      	ldr	r1, [r7, #32]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fa02 	bl	8003930 <I2C_WaitOnTXEFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b04      	cmp	r3, #4
 8003538:	d107      	bne.n	800354a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003548:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e02b      	b.n	80035a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003554:	893b      	ldrh	r3, [r7, #8]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	611a      	str	r2, [r3, #16]
 800355e:	e021      	b.n	80035a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003560:	893b      	ldrh	r3, [r7, #8]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	b29b      	uxth	r3, r3
 8003566:	b2da      	uxtb	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	6a39      	ldr	r1, [r7, #32]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f9dc 	bl	8003930 <I2C_WaitOnTXEFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00d      	beq.n	800359a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2b04      	cmp	r3, #4
 8003584:	d107      	bne.n	8003596 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003594:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e005      	b.n	80035a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800359a:	893b      	ldrh	r3, [r7, #8]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	00010002 	.word	0x00010002

080035b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	4608      	mov	r0, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	461a      	mov	r2, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	817b      	strh	r3, [r7, #10]
 80035c6:	460b      	mov	r3, r1
 80035c8:	813b      	strh	r3, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f8c2 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003614:	d103      	bne.n	800361e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0aa      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003622:	897b      	ldrh	r3, [r7, #10]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003630:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	6a3a      	ldr	r2, [r7, #32]
 8003636:	4952      	ldr	r1, [pc, #328]	; (8003780 <I2C_RequestMemoryRead+0x1cc>)
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f8fa 	bl	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e097      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	6a39      	ldr	r1, [r7, #32]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f964 	bl	8003930 <I2C_WaitOnTXEFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	2b04      	cmp	r3, #4
 8003674:	d107      	bne.n	8003686 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003684:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e076      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003690:	893b      	ldrh	r3, [r7, #8]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	e021      	b.n	80036e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800369c:	893b      	ldrh	r3, [r7, #8]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ac:	6a39      	ldr	r1, [r7, #32]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f93e 	bl	8003930 <I2C_WaitOnTXEFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00d      	beq.n	80036d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d107      	bne.n	80036d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e050      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036d6:	893b      	ldrh	r3, [r7, #8]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e2:	6a39      	ldr	r1, [r7, #32]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f923 	bl	8003930 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d107      	bne.n	8003708 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003706:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e035      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800371a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	2200      	movs	r2, #0
 8003724:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f82b 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00d      	beq.n	8003750 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003742:	d103      	bne.n	800374c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800374a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e013      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003750:	897b      	ldrh	r3, [r7, #10]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	6a3a      	ldr	r2, [r7, #32]
 8003764:	4906      	ldr	r1, [pc, #24]	; (8003780 <I2C_RequestMemoryRead+0x1cc>)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f863 	bl	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	00010002 	.word	0x00010002

08003784 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003794:	e025      	b.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800379c:	d021      	beq.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fe fe2f 	bl	8002400 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d116      	bne.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e023      	b.n	800382a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d10d      	bne.n	8003808 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	43da      	mvns	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4013      	ands	r3, r2
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	e00c      	b.n	8003822 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	43da      	mvns	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4013      	ands	r3, r2
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	429a      	cmp	r2, r3
 8003826:	d0b6      	beq.n	8003796 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003840:	e051      	b.n	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003850:	d123      	bne.n	800389a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003860:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800386a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f043 0204 	orr.w	r2, r3, #4
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e046      	b.n	8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a0:	d021      	beq.n	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7fe fdad 	bl	8002400 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d116      	bne.n	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f043 0220 	orr.w	r2, r3, #32
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e020      	b.n	8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10c      	bne.n	800390a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4013      	ands	r3, r2
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf14      	ite	ne
 8003902:	2301      	movne	r3, #1
 8003904:	2300      	moveq	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	e00b      	b.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	43da      	mvns	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4013      	ands	r3, r2
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d18d      	bne.n	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800393c:	e02d      	b.n	800399a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f8ce 	bl	8003ae0 <I2C_IsAcknowledgeFailed>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e02d      	b.n	80039aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003954:	d021      	beq.n	800399a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7fe fd53 	bl	8002400 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d116      	bne.n	800399a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f043 0220 	orr.w	r2, r3, #32
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e007      	b.n	80039aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	2b80      	cmp	r3, #128	; 0x80
 80039a6:	d1ca      	bne.n	800393e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039be:	e02d      	b.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f88d 	bl	8003ae0 <I2C_IsAcknowledgeFailed>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e02d      	b.n	8003a2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d6:	d021      	beq.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d8:	f7fe fd12 	bl	8002400 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d302      	bcc.n	80039ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f043 0220 	orr.w	r2, r3, #32
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e007      	b.n	8003a2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d1ca      	bne.n	80039c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a40:	e042      	b.n	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d119      	bne.n	8003a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0210 	mvn.w	r2, #16
 8003a58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e029      	b.n	8003ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a84:	f7fe fcbc 	bl	8002400 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d116      	bne.n	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e007      	b.n	8003ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b40      	cmp	r3, #64	; 0x40
 8003ad4:	d1b5      	bne.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af6:	d11b      	bne.n	8003b30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	f043 0204 	orr.w	r2, r3, #4
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e267      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d075      	beq.n	8003c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b5e:	4b88      	ldr	r3, [pc, #544]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d00c      	beq.n	8003b84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6a:	4b85      	ldr	r3, [pc, #532]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d112      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b76:	4b82      	ldr	r3, [pc, #520]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b82:	d10b      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	4b7e      	ldr	r3, [pc, #504]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d05b      	beq.n	8003c48 <HAL_RCC_OscConfig+0x108>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d157      	bne.n	8003c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e242      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x74>
 8003ba6:	4b76      	ldr	r3, [pc, #472]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a75      	ldr	r2, [pc, #468]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e01d      	b.n	8003bf0 <HAL_RCC_OscConfig+0xb0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x98>
 8003bbe:	4b70      	ldr	r3, [pc, #448]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6f      	ldr	r2, [pc, #444]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b6d      	ldr	r3, [pc, #436]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6c      	ldr	r2, [pc, #432]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0xb0>
 8003bd8:	4b69      	ldr	r3, [pc, #420]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a68      	ldr	r2, [pc, #416]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b66      	ldr	r3, [pc, #408]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a65      	ldr	r2, [pc, #404]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d013      	beq.n	8003c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fc02 	bl	8002400 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fe fbfe 	bl	8002400 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	; 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e207      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b5b      	ldr	r3, [pc, #364]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0xc0>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe fbee 	bl	8002400 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c28:	f7fe fbea 	bl	8002400 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	; 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e1f3      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	4b51      	ldr	r3, [pc, #324]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0xe8>
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d063      	beq.n	8003d1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c56:	4b4a      	ldr	r3, [pc, #296]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d11c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6e:	4b44      	ldr	r3, [pc, #272]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d116      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7a:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_RCC_OscConfig+0x152>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e1c7      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4937      	ldr	r1, [pc, #220]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca6:	e03a      	b.n	8003d1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb0:	4b34      	ldr	r3, [pc, #208]	; (8003d84 <HAL_RCC_OscConfig+0x244>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fe fba3 	bl	8002400 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cbe:	f7fe fb9f 	bl	8002400 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e1a8      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cdc:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4925      	ldr	r1, [pc, #148]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]
 8003cf0:	e015      	b.n	8003d1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <HAL_RCC_OscConfig+0x244>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fb82 	bl	8002400 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d00:	f7fe fb7e 	bl	8002400 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e187      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d12:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d036      	beq.n	8003d98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d32:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <HAL_RCC_OscConfig+0x248>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fe fb62 	bl	8002400 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d40:	f7fe fb5e 	bl	8002400 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e167      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x200>
 8003d5e:	e01b      	b.n	8003d98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_OscConfig+0x248>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d66:	f7fe fb4b 	bl	8002400 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	e00e      	b.n	8003d8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6e:	f7fe fb47 	bl	8002400 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d907      	bls.n	8003d8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e150      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
 8003d80:	40023800 	.word	0x40023800
 8003d84:	42470000 	.word	0x42470000
 8003d88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8c:	4b88      	ldr	r3, [pc, #544]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ea      	bne.n	8003d6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8097 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da6:	2300      	movs	r3, #0
 8003da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003daa:	4b81      	ldr	r3, [pc, #516]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10f      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	4b7d      	ldr	r3, [pc, #500]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a7c      	ldr	r2, [pc, #496]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc6:	4b7a      	ldr	r3, [pc, #488]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd6:	4b77      	ldr	r3, [pc, #476]	; (8003fb4 <HAL_RCC_OscConfig+0x474>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d118      	bne.n	8003e14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de2:	4b74      	ldr	r3, [pc, #464]	; (8003fb4 <HAL_RCC_OscConfig+0x474>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a73      	ldr	r2, [pc, #460]	; (8003fb4 <HAL_RCC_OscConfig+0x474>)
 8003de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dee:	f7fe fb07 	bl	8002400 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df6:	f7fe fb03 	bl	8002400 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e10c      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	4b6a      	ldr	r3, [pc, #424]	; (8003fb4 <HAL_RCC_OscConfig+0x474>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d106      	bne.n	8003e2a <HAL_RCC_OscConfig+0x2ea>
 8003e1c:	4b64      	ldr	r3, [pc, #400]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	4a63      	ldr	r2, [pc, #396]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	6713      	str	r3, [r2, #112]	; 0x70
 8003e28:	e01c      	b.n	8003e64 <HAL_RCC_OscConfig+0x324>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b05      	cmp	r3, #5
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCC_OscConfig+0x30c>
 8003e32:	4b5f      	ldr	r3, [pc, #380]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4a5e      	ldr	r2, [pc, #376]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e38:	f043 0304 	orr.w	r3, r3, #4
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3e:	4b5c      	ldr	r3, [pc, #368]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	4a5b      	ldr	r2, [pc, #364]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4a:	e00b      	b.n	8003e64 <HAL_RCC_OscConfig+0x324>
 8003e4c:	4b58      	ldr	r3, [pc, #352]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	4a57      	ldr	r2, [pc, #348]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	6713      	str	r3, [r2, #112]	; 0x70
 8003e58:	4b55      	ldr	r3, [pc, #340]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a54      	ldr	r2, [pc, #336]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	f023 0304 	bic.w	r3, r3, #4
 8003e62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d015      	beq.n	8003e98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fe fac8 	bl	8002400 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e72:	e00a      	b.n	8003e8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e74:	f7fe fac4 	bl	8002400 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e0cb      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8a:	4b49      	ldr	r3, [pc, #292]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0ee      	beq.n	8003e74 <HAL_RCC_OscConfig+0x334>
 8003e96:	e014      	b.n	8003ec2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e98:	f7fe fab2 	bl	8002400 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea0:	f7fe faae 	bl	8002400 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0b5      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb6:	4b3e      	ldr	r3, [pc, #248]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1ee      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d105      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec8:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	4a38      	ldr	r2, [pc, #224]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80a1 	beq.w	8004020 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ede:	4b34      	ldr	r3, [pc, #208]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d05c      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d141      	bne.n	8003f76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_RCC_OscConfig+0x478>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fa82 	bl	8002400 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f00:	f7fe fa7e 	bl	8002400 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e087      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	019b      	lsls	r3, r3, #6
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	3b01      	subs	r3, #1
 8003f38:	041b      	lsls	r3, r3, #16
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	061b      	lsls	r3, r3, #24
 8003f42:	491b      	ldr	r1, [pc, #108]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <HAL_RCC_OscConfig+0x478>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fe fa57 	bl	8002400 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fe fa53 	bl	8002400 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e05c      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f68:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x416>
 8003f74:	e054      	b.n	8004020 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <HAL_RCC_OscConfig+0x478>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fa40 	bl	8002400 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fe fa3c 	bl	8002400 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e045      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x444>
 8003fa2:	e03d      	b.n	8004020 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e038      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40007000 	.word	0x40007000
 8003fb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_RCC_OscConfig+0x4ec>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d028      	beq.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d121      	bne.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d11a      	bne.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fec:	4013      	ands	r3, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ff2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d111      	bne.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	3b01      	subs	r3, #1
 8004006:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d107      	bne.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40023800 	.word	0x40023800

08004030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0cc      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004044:	4b68      	ldr	r3, [pc, #416]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d90c      	bls.n	800406c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b65      	ldr	r3, [pc, #404]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b63      	ldr	r3, [pc, #396]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0b8      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004084:	4b59      	ldr	r3, [pc, #356]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4a58      	ldr	r2, [pc, #352]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800408e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800409c:	4b53      	ldr	r3, [pc, #332]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	4a52      	ldr	r2, [pc, #328]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a8:	4b50      	ldr	r3, [pc, #320]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	494d      	ldr	r1, [pc, #308]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d044      	beq.n	8004150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d107      	bne.n	80040de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	4b47      	ldr	r3, [pc, #284]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d119      	bne.n	800410e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e07f      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d003      	beq.n	80040ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ee:	4b3f      	ldr	r3, [pc, #252]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e06f      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fe:	4b3b      	ldr	r3, [pc, #236]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e067      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410e:	4b37      	ldr	r3, [pc, #220]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 0203 	bic.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4934      	ldr	r1, [pc, #208]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	4313      	orrs	r3, r2
 800411e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004120:	f7fe f96e 	bl	8002400 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004126:	e00a      	b.n	800413e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004128:	f7fe f96a 	bl	8002400 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	; 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e04f      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413e:	4b2b      	ldr	r3, [pc, #172]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 020c 	and.w	r2, r3, #12
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	429a      	cmp	r2, r3
 800414e:	d1eb      	bne.n	8004128 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d20c      	bcs.n	8004178 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e032      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004184:	4b19      	ldr	r3, [pc, #100]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4916      	ldr	r1, [pc, #88]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041a2:	4b12      	ldr	r3, [pc, #72]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	490e      	ldr	r1, [pc, #56]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041b6:	f000 f821 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80041ba:	4602      	mov	r2, r0
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	490a      	ldr	r1, [pc, #40]	; (80041f0 <HAL_RCC_ClockConfig+0x1c0>)
 80041c8:	5ccb      	ldrb	r3, [r1, r3]
 80041ca:	fa22 f303 	lsr.w	r3, r2, r3
 80041ce:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041d2:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fd ffd0 	bl	800217c <HAL_InitTick>

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40023c00 	.word	0x40023c00
 80041ec:	40023800 	.word	0x40023800
 80041f0:	08009bb0 	.word	0x08009bb0
 80041f4:	20000200 	.word	0x20000200
 80041f8:	20000204 	.word	0x20000204

080041fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004200:	b094      	sub	sp, #80	; 0x50
 8004202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	647b      	str	r3, [r7, #68]	; 0x44
 8004208:	2300      	movs	r3, #0
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800420c:	2300      	movs	r3, #0
 800420e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004214:	4b79      	ldr	r3, [pc, #484]	; (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 030c 	and.w	r3, r3, #12
 800421c:	2b08      	cmp	r3, #8
 800421e:	d00d      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0x40>
 8004220:	2b08      	cmp	r3, #8
 8004222:	f200 80e1 	bhi.w	80043e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x34>
 800422a:	2b04      	cmp	r3, #4
 800422c:	d003      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0x3a>
 800422e:	e0db      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004230:	4b73      	ldr	r3, [pc, #460]	; (8004400 <HAL_RCC_GetSysClockFreq+0x204>)
 8004232:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004234:	e0db      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004236:	4b73      	ldr	r3, [pc, #460]	; (8004404 <HAL_RCC_GetSysClockFreq+0x208>)
 8004238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800423a:	e0d8      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800423c:	4b6f      	ldr	r3, [pc, #444]	; (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004244:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004246:	4b6d      	ldr	r3, [pc, #436]	; (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d063      	beq.n	800431a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004252:	4b6a      	ldr	r3, [pc, #424]	; (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	099b      	lsrs	r3, r3, #6
 8004258:	2200      	movs	r2, #0
 800425a:	63bb      	str	r3, [r7, #56]	; 0x38
 800425c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004264:	633b      	str	r3, [r7, #48]	; 0x30
 8004266:	2300      	movs	r3, #0
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
 800426a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800426e:	4622      	mov	r2, r4
 8004270:	462b      	mov	r3, r5
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f04f 0100 	mov.w	r1, #0
 800427a:	0159      	lsls	r1, r3, #5
 800427c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004280:	0150      	lsls	r0, r2, #5
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4621      	mov	r1, r4
 8004288:	1a51      	subs	r1, r2, r1
 800428a:	6139      	str	r1, [r7, #16]
 800428c:	4629      	mov	r1, r5
 800428e:	eb63 0301 	sbc.w	r3, r3, r1
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042a0:	4659      	mov	r1, fp
 80042a2:	018b      	lsls	r3, r1, #6
 80042a4:	4651      	mov	r1, sl
 80042a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042aa:	4651      	mov	r1, sl
 80042ac:	018a      	lsls	r2, r1, #6
 80042ae:	4651      	mov	r1, sl
 80042b0:	ebb2 0801 	subs.w	r8, r2, r1
 80042b4:	4659      	mov	r1, fp
 80042b6:	eb63 0901 	sbc.w	r9, r3, r1
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ce:	4690      	mov	r8, r2
 80042d0:	4699      	mov	r9, r3
 80042d2:	4623      	mov	r3, r4
 80042d4:	eb18 0303 	adds.w	r3, r8, r3
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	462b      	mov	r3, r5
 80042dc:	eb49 0303 	adc.w	r3, r9, r3
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042ee:	4629      	mov	r1, r5
 80042f0:	024b      	lsls	r3, r1, #9
 80042f2:	4621      	mov	r1, r4
 80042f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042f8:	4621      	mov	r1, r4
 80042fa:	024a      	lsls	r2, r1, #9
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004302:	2200      	movs	r2, #0
 8004304:	62bb      	str	r3, [r7, #40]	; 0x28
 8004306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800430c:	f7fb ff68 	bl	80001e0 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4613      	mov	r3, r2
 8004316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004318:	e058      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800431a:	4b38      	ldr	r3, [pc, #224]	; (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	099b      	lsrs	r3, r3, #6
 8004320:	2200      	movs	r2, #0
 8004322:	4618      	mov	r0, r3
 8004324:	4611      	mov	r1, r2
 8004326:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	2300      	movs	r3, #0
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
 8004330:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004334:	4642      	mov	r2, r8
 8004336:	464b      	mov	r3, r9
 8004338:	f04f 0000 	mov.w	r0, #0
 800433c:	f04f 0100 	mov.w	r1, #0
 8004340:	0159      	lsls	r1, r3, #5
 8004342:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004346:	0150      	lsls	r0, r2, #5
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4641      	mov	r1, r8
 800434e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004352:	4649      	mov	r1, r9
 8004354:	eb63 0b01 	sbc.w	fp, r3, r1
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004364:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004368:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800436c:	ebb2 040a 	subs.w	r4, r2, sl
 8004370:	eb63 050b 	sbc.w	r5, r3, fp
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	00eb      	lsls	r3, r5, #3
 800437e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004382:	00e2      	lsls	r2, r4, #3
 8004384:	4614      	mov	r4, r2
 8004386:	461d      	mov	r5, r3
 8004388:	4643      	mov	r3, r8
 800438a:	18e3      	adds	r3, r4, r3
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	464b      	mov	r3, r9
 8004390:	eb45 0303 	adc.w	r3, r5, r3
 8004394:	607b      	str	r3, [r7, #4]
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043a2:	4629      	mov	r1, r5
 80043a4:	028b      	lsls	r3, r1, #10
 80043a6:	4621      	mov	r1, r4
 80043a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043ac:	4621      	mov	r1, r4
 80043ae:	028a      	lsls	r2, r1, #10
 80043b0:	4610      	mov	r0, r2
 80043b2:	4619      	mov	r1, r3
 80043b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b6:	2200      	movs	r2, #0
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	61fa      	str	r2, [r7, #28]
 80043bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c0:	f7fb ff0e 	bl	80001e0 <__aeabi_uldivmod>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4613      	mov	r3, r2
 80043ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	3301      	adds	r3, #1
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043e6:	e002      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3750      	adds	r7, #80	; 0x50
 80043f4:	46bd      	mov	sp, r7
 80043f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043fa:	bf00      	nop
 80043fc:	40023800 	.word	0x40023800
 8004400:	00f42400 	.word	0x00f42400
 8004404:	007a1200 	.word	0x007a1200

08004408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <HAL_RCC_GetHCLKFreq+0x14>)
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000200 	.word	0x20000200

08004420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004424:	f7ff fff0 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	0a9b      	lsrs	r3, r3, #10
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4903      	ldr	r1, [pc, #12]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004436:	5ccb      	ldrb	r3, [r1, r3]
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40023800 	.word	0x40023800
 8004444:	08009bc0 	.word	0x08009bc0

08004448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800444c:	f7ff ffdc 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0b5b      	lsrs	r3, r3, #13
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4903      	ldr	r1, [pc, #12]	; (800446c <HAL_RCC_GetPCLK2Freq+0x24>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40023800 	.word	0x40023800
 800446c:	08009bc0 	.word	0x08009bc0

08004470 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	220f      	movs	r2, #15
 800447e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004480:	4b12      	ldr	r3, [pc, #72]	; (80044cc <HAL_RCC_GetClockConfig+0x5c>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0203 	and.w	r2, r3, #3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800448c:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <HAL_RCC_GetClockConfig+0x5c>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <HAL_RCC_GetClockConfig+0x5c>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044a4:	4b09      	ldr	r3, [pc, #36]	; (80044cc <HAL_RCC_GetClockConfig+0x5c>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	08db      	lsrs	r3, r3, #3
 80044aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <HAL_RCC_GetClockConfig+0x60>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0207 	and.w	r2, r3, #7
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	601a      	str	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40023c00 	.word	0x40023c00

080044d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e07b      	b.n	80045de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d108      	bne.n	8004500 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f6:	d009      	beq.n	800450c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	61da      	str	r2, [r3, #28]
 80044fe:	e005      	b.n	800450c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fd fd84 	bl	8002034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004542:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004590:	ea42 0103 	orr.w	r1, r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	f003 0104 	and.w	r1, r3, #4
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f003 0210 	and.w	r2, r3, #16
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e041      	b.n	800467c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7fd fd59 	bl	80020c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 fcb7 	bl	8004f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d001      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e044      	b.n	8004726 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <HAL_TIM_Base_Start_IT+0xb0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d018      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x6c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c6:	d013      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x6c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <HAL_TIM_Base_Start_IT+0xb4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00e      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x6c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a19      	ldr	r2, [pc, #100]	; (800473c <HAL_TIM_Base_Start_IT+0xb8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d009      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x6c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a17      	ldr	r2, [pc, #92]	; (8004740 <HAL_TIM_Base_Start_IT+0xbc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x6c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a16      	ldr	r2, [pc, #88]	; (8004744 <HAL_TIM_Base_Start_IT+0xc0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d111      	bne.n	8004714 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b06      	cmp	r3, #6
 8004700:	d010      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0201 	orr.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	e007      	b.n	8004724 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40010000 	.word	0x40010000
 8004738:	40000400 	.word	0x40000400
 800473c:	40000800 	.word	0x40000800
 8004740:	40000c00 	.word	0x40000c00
 8004744:	40014000 	.word	0x40014000

08004748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e041      	b.n	80047de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f839 	bl	80047e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f000 fc06 	bl	8004f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_TIM_PWM_Start+0x24>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	e022      	b.n	8004866 <HAL_TIM_PWM_Start+0x6a>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b04      	cmp	r3, #4
 8004824:	d109      	bne.n	800483a <HAL_TIM_PWM_Start+0x3e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b01      	cmp	r3, #1
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	e015      	b.n	8004866 <HAL_TIM_PWM_Start+0x6a>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d109      	bne.n	8004854 <HAL_TIM_PWM_Start+0x58>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e008      	b.n	8004866 <HAL_TIM_PWM_Start+0x6a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e068      	b.n	8004940 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <HAL_TIM_PWM_Start+0x82>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800487c:	e013      	b.n	80048a6 <HAL_TIM_PWM_Start+0xaa>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b04      	cmp	r3, #4
 8004882:	d104      	bne.n	800488e <HAL_TIM_PWM_Start+0x92>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800488c:	e00b      	b.n	80048a6 <HAL_TIM_PWM_Start+0xaa>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d104      	bne.n	800489e <HAL_TIM_PWM_Start+0xa2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489c:	e003      	b.n	80048a6 <HAL_TIM_PWM_Start+0xaa>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2202      	movs	r2, #2
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2201      	movs	r2, #1
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fe18 	bl	80054e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a23      	ldr	r2, [pc, #140]	; (8004948 <HAL_TIM_PWM_Start+0x14c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d107      	bne.n	80048ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1d      	ldr	r2, [pc, #116]	; (8004948 <HAL_TIM_PWM_Start+0x14c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d018      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e0:	d013      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a19      	ldr	r2, [pc, #100]	; (800494c <HAL_TIM_PWM_Start+0x150>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00e      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a17      	ldr	r2, [pc, #92]	; (8004950 <HAL_TIM_PWM_Start+0x154>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a16      	ldr	r2, [pc, #88]	; (8004954 <HAL_TIM_PWM_Start+0x158>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a14      	ldr	r2, [pc, #80]	; (8004958 <HAL_TIM_PWM_Start+0x15c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d111      	bne.n	800492e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b06      	cmp	r3, #6
 800491a:	d010      	beq.n	800493e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492c:	e007      	b.n	800493e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40010000 	.word	0x40010000
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40014000 	.word	0x40014000

0800495c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	6839      	ldr	r1, [r7, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fdb8 	bl	80054e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a29      	ldr	r2, [pc, #164]	; (8004a20 <HAL_TIM_PWM_Stop+0xc4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d117      	bne.n	80049ae <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	f241 1311 	movw	r3, #4369	; 0x1111
 8004988:	4013      	ands	r3, r2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <HAL_TIM_PWM_Stop+0x52>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6a1a      	ldr	r2, [r3, #32]
 8004994:	f240 4344 	movw	r3, #1092	; 0x444
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <HAL_TIM_PWM_Stop+0x52>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <HAL_TIM_PWM_Stop+0x82>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	f240 4344 	movw	r3, #1092	; 0x444
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d107      	bne.n	80049de <HAL_TIM_PWM_Stop+0x82>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_PWM_Stop+0x92>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ec:	e013      	b.n	8004a16 <HAL_TIM_PWM_Stop+0xba>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_PWM_Stop+0xa2>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049fc:	e00b      	b.n	8004a16 <HAL_TIM_PWM_Stop+0xba>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Stop+0xb2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a0c:	e003      	b.n	8004a16 <HAL_TIM_PWM_Stop+0xba>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40010000 	.word	0x40010000

08004a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0202 	mvn.w	r2, #2
 8004a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa77 	bl	8004f5a <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa69 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fa7a 	bl	8004f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0204 	mvn.w	r2, #4
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa4d 	bl	8004f5a <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa3f 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fa50 	bl	8004f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0208 	mvn.w	r2, #8
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2204      	movs	r2, #4
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa23 	bl	8004f5a <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fa15 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fa26 	bl	8004f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d122      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d11b      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0210 	mvn.w	r2, #16
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2208      	movs	r2, #8
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f9f9 	bl	8004f5a <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f9eb 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f9fc 	bl	8004f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10e      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d107      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0201 	mvn.w	r2, #1
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fc fd28 	bl	80015f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	2b80      	cmp	r3, #128	; 0x80
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d107      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fd26 	bl	8005620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d10e      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d107      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f9c1 	bl	8004f82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d10e      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d107      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0220 	mvn.w	r2, #32
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fcf0 	bl	800560c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e0ae      	b.n	8004db0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	f200 809f 	bhi.w	8004da0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c9d 	.word	0x08004c9d
 8004c6c:	08004da1 	.word	0x08004da1
 8004c70:	08004da1 	.word	0x08004da1
 8004c74:	08004da1 	.word	0x08004da1
 8004c78:	08004cdd 	.word	0x08004cdd
 8004c7c:	08004da1 	.word	0x08004da1
 8004c80:	08004da1 	.word	0x08004da1
 8004c84:	08004da1 	.word	0x08004da1
 8004c88:	08004d1f 	.word	0x08004d1f
 8004c8c:	08004da1 	.word	0x08004da1
 8004c90:	08004da1 	.word	0x08004da1
 8004c94:	08004da1 	.word	0x08004da1
 8004c98:	08004d5f 	.word	0x08004d5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f9f8 	bl	8005098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0208 	orr.w	r2, r2, #8
 8004cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0204 	bic.w	r2, r2, #4
 8004cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6999      	ldr	r1, [r3, #24]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	619a      	str	r2, [r3, #24]
      break;
 8004cda:	e064      	b.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fa3e 	bl	8005164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6999      	ldr	r1, [r3, #24]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	021a      	lsls	r2, r3, #8
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	619a      	str	r2, [r3, #24]
      break;
 8004d1c:	e043      	b.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fa89 	bl	800523c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0208 	orr.w	r2, r2, #8
 8004d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0204 	bic.w	r2, r2, #4
 8004d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69d9      	ldr	r1, [r3, #28]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	61da      	str	r2, [r3, #28]
      break;
 8004d5c:	e023      	b.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fad3 	bl	8005310 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69da      	ldr	r2, [r3, #28]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69d9      	ldr	r1, [r3, #28]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	021a      	lsls	r2, r3, #8
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	61da      	str	r2, [r3, #28]
      break;
 8004d9e:	e002      	b.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	75fb      	strb	r3, [r7, #23]
      break;
 8004da4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_TIM_ConfigClockSource+0x1c>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e0b4      	b.n	8004f3e <HAL_TIM_ConfigClockSource+0x186>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0c:	d03e      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0xd4>
 8004e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e12:	f200 8087 	bhi.w	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1a:	f000 8086 	beq.w	8004f2a <HAL_TIM_ConfigClockSource+0x172>
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e22:	d87f      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e24:	2b70      	cmp	r3, #112	; 0x70
 8004e26:	d01a      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0xa6>
 8004e28:	2b70      	cmp	r3, #112	; 0x70
 8004e2a:	d87b      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e2c:	2b60      	cmp	r3, #96	; 0x60
 8004e2e:	d050      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x11a>
 8004e30:	2b60      	cmp	r3, #96	; 0x60
 8004e32:	d877      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e34:	2b50      	cmp	r3, #80	; 0x50
 8004e36:	d03c      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0xfa>
 8004e38:	2b50      	cmp	r3, #80	; 0x50
 8004e3a:	d873      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d058      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x13a>
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d86f      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e44:	2b30      	cmp	r3, #48	; 0x30
 8004e46:	d064      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x15a>
 8004e48:	2b30      	cmp	r3, #48	; 0x30
 8004e4a:	d86b      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d060      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x15a>
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d867      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d05c      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x15a>
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d05a      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x15a>
 8004e5c:	e062      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6899      	ldr	r1, [r3, #8]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f000 fb19 	bl	80054a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	609a      	str	r2, [r3, #8]
      break;
 8004e8a:	e04f      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6899      	ldr	r1, [r3, #8]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f000 fb02 	bl	80054a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eae:	609a      	str	r2, [r3, #8]
      break;
 8004eb0:	e03c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 fa76 	bl	80053b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2150      	movs	r1, #80	; 0x50
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 facf 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e02c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 fa95 	bl	800540e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2160      	movs	r1, #96	; 0x60
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fabf 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e01c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6859      	ldr	r1, [r3, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f000 fa56 	bl	80053b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2140      	movs	r1, #64	; 0x40
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 faaf 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004f10:	e00c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	f000 faa6 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004f22:	e003      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      break;
 8004f28:	e000      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a34      	ldr	r2, [pc, #208]	; (800507c <TIM_Base_SetConfig+0xe4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00f      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb6:	d00b      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a31      	ldr	r2, [pc, #196]	; (8005080 <TIM_Base_SetConfig+0xe8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d007      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a30      	ldr	r2, [pc, #192]	; (8005084 <TIM_Base_SetConfig+0xec>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <TIM_Base_SetConfig+0xf0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d108      	bne.n	8004fe2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a25      	ldr	r2, [pc, #148]	; (800507c <TIM_Base_SetConfig+0xe4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d01b      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff0:	d017      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a22      	ldr	r2, [pc, #136]	; (8005080 <TIM_Base_SetConfig+0xe8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a21      	ldr	r2, [pc, #132]	; (8005084 <TIM_Base_SetConfig+0xec>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00f      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a20      	ldr	r2, [pc, #128]	; (8005088 <TIM_Base_SetConfig+0xf0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a1f      	ldr	r2, [pc, #124]	; (800508c <TIM_Base_SetConfig+0xf4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a1e      	ldr	r2, [pc, #120]	; (8005090 <TIM_Base_SetConfig+0xf8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <TIM_Base_SetConfig+0xfc>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d108      	bne.n	8005034 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a08      	ldr	r2, [pc, #32]	; (800507c <TIM_Base_SetConfig+0xe4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d103      	bne.n	8005068 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	615a      	str	r2, [r3, #20]
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40010000 	.word	0x40010000
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800
 8005088:	40000c00 	.word	0x40000c00
 800508c:	40014000 	.word	0x40014000
 8005090:	40014400 	.word	0x40014400
 8005094:	40014800 	.word	0x40014800

08005098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f023 0201 	bic.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f023 0302 	bic.w	r3, r3, #2
 80050e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <TIM_OC1_SetConfig+0xc8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d10c      	bne.n	800510e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 0308 	bic.w	r3, r3, #8
 80050fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f023 0304 	bic.w	r3, r3, #4
 800510c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a13      	ldr	r2, [pc, #76]	; (8005160 <TIM_OC1_SetConfig+0xc8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d111      	bne.n	800513a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800511c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	621a      	str	r2, [r3, #32]
}
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	40010000 	.word	0x40010000

08005164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f023 0210 	bic.w	r2, r3, #16
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0320 	bic.w	r3, r3, #32
 80051ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a1e      	ldr	r2, [pc, #120]	; (8005238 <TIM_OC2_SetConfig+0xd4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d10d      	bne.n	80051e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a15      	ldr	r2, [pc, #84]	; (8005238 <TIM_OC2_SetConfig+0xd4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d113      	bne.n	8005210 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40010000 	.word	0x40010000

0800523c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0303 	bic.w	r3, r3, #3
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1d      	ldr	r2, [pc, #116]	; (800530c <TIM_OC3_SetConfig+0xd0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d10d      	bne.n	80052b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a14      	ldr	r2, [pc, #80]	; (800530c <TIM_OC3_SetConfig+0xd0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d113      	bne.n	80052e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	621a      	str	r2, [r3, #32]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40010000 	.word	0x40010000

08005310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800535a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	031b      	lsls	r3, r3, #12
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a10      	ldr	r2, [pc, #64]	; (80053ac <TIM_OC4_SetConfig+0x9c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d109      	bne.n	8005384 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	019b      	lsls	r3, r3, #6
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	621a      	str	r2, [r3, #32]
}
 800539e:	bf00      	nop
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40010000 	.word	0x40010000

080053b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f023 0201 	bic.w	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f023 030a 	bic.w	r3, r3, #10
 80053ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800540e:	b480      	push	{r7}
 8005410:	b087      	sub	sp, #28
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f023 0210 	bic.w	r2, r3, #16
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	031b      	lsls	r3, r3, #12
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800544a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	621a      	str	r2, [r3, #32]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	f043 0307 	orr.w	r3, r3, #7
 8005490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	609a      	str	r2, [r3, #8]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	021a      	lsls	r2, r3, #8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	609a      	str	r2, [r3, #8]
}
 80054d8:	bf00      	nop
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	2201      	movs	r2, #1
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1a      	ldr	r2, [r3, #32]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	43db      	mvns	r3, r3
 8005506:	401a      	ands	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a1a      	ldr	r2, [r3, #32]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	fa01 f303 	lsl.w	r3, r1, r3
 800551c:	431a      	orrs	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005544:	2302      	movs	r3, #2
 8005546:	e050      	b.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1c      	ldr	r2, [pc, #112]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d018      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005594:	d013      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a18      	ldr	r2, [pc, #96]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00e      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a16      	ldr	r2, [pc, #88]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a15      	ldr	r2, [pc, #84]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a13      	ldr	r2, [pc, #76]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d10c      	bne.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40014000 	.word	0x40014000

0800560c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <__NVIC_SetPriority>:
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	6039      	str	r1, [r7, #0]
 800563e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005644:	2b00      	cmp	r3, #0
 8005646:	db0a      	blt.n	800565e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	b2da      	uxtb	r2, r3
 800564c:	490c      	ldr	r1, [pc, #48]	; (8005680 <__NVIC_SetPriority+0x4c>)
 800564e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005652:	0112      	lsls	r2, r2, #4
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	440b      	add	r3, r1
 8005658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800565c:	e00a      	b.n	8005674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	b2da      	uxtb	r2, r3
 8005662:	4908      	ldr	r1, [pc, #32]	; (8005684 <__NVIC_SetPriority+0x50>)
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	3b04      	subs	r3, #4
 800566c:	0112      	lsls	r2, r2, #4
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	440b      	add	r3, r1
 8005672:	761a      	strb	r2, [r3, #24]
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	e000e100 	.word	0xe000e100
 8005684:	e000ed00 	.word	0xe000ed00

08005688 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <SysTick_Handler+0x1c>)
 800568e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005690:	f002 fd7e 	bl	8008190 <xTaskGetSchedulerState>
 8005694:	4603      	mov	r3, r0
 8005696:	2b01      	cmp	r3, #1
 8005698:	d001      	beq.n	800569e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800569a:	f003 fc65 	bl	8008f68 <xPortSysTickHandler>
  }
}
 800569e:	bf00      	nop
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	e000e010 	.word	0xe000e010

080056a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80056ac:	2100      	movs	r1, #0
 80056ae:	f06f 0004 	mvn.w	r0, #4
 80056b2:	f7ff ffbf 	bl	8005634 <__NVIC_SetPriority>
#endif
}
 80056b6:	bf00      	nop
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056c2:	f3ef 8305 	mrs	r3, IPSR
 80056c6:	603b      	str	r3, [r7, #0]
  return(result);
 80056c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80056ce:	f06f 0305 	mvn.w	r3, #5
 80056d2:	607b      	str	r3, [r7, #4]
 80056d4:	e00c      	b.n	80056f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80056d6:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <osKernelInitialize+0x44>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d105      	bne.n	80056ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056de:	4b08      	ldr	r3, [pc, #32]	; (8005700 <osKernelInitialize+0x44>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	607b      	str	r3, [r7, #4]
 80056e8:	e002      	b.n	80056f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80056ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056f0:	687b      	ldr	r3, [r7, #4]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	20000460 	.word	0x20000460

08005704 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800570a:	f3ef 8305 	mrs	r3, IPSR
 800570e:	603b      	str	r3, [r7, #0]
  return(result);
 8005710:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005716:	f06f 0305 	mvn.w	r3, #5
 800571a:	607b      	str	r3, [r7, #4]
 800571c:	e010      	b.n	8005740 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800571e:	4b0b      	ldr	r3, [pc, #44]	; (800574c <osKernelStart+0x48>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d109      	bne.n	800573a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005726:	f7ff ffbf 	bl	80056a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800572a:	4b08      	ldr	r3, [pc, #32]	; (800574c <osKernelStart+0x48>)
 800572c:	2202      	movs	r2, #2
 800572e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005730:	f002 f882 	bl	8007838 <vTaskStartScheduler>
      stat = osOK;
 8005734:	2300      	movs	r3, #0
 8005736:	607b      	str	r3, [r7, #4]
 8005738:	e002      	b.n	8005740 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800573a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800573e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005740:	687b      	ldr	r3, [r7, #4]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000460 	.word	0x20000460

08005750 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005756:	f3ef 8305 	mrs	r3, IPSR
 800575a:	603b      	str	r3, [r7, #0]
  return(result);
 800575c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005762:	f002 f997 	bl	8007a94 <xTaskGetTickCountFromISR>
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	e002      	b.n	8005770 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800576a:	f002 f983 	bl	8007a74 <xTaskGetTickCount>
 800576e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005770:	687b      	ldr	r3, [r7, #4]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800577a:	b480      	push	{r7}
 800577c:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800577e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8005782:	4618      	mov	r0, r3
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b08e      	sub	sp, #56	; 0x38
 8005790:	af04      	add	r7, sp, #16
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005798:	2300      	movs	r3, #0
 800579a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800579c:	f3ef 8305 	mrs	r3, IPSR
 80057a0:	617b      	str	r3, [r7, #20]
  return(result);
 80057a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d17e      	bne.n	80058a6 <osThreadNew+0x11a>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d07b      	beq.n	80058a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80057b2:	2318      	movs	r3, #24
 80057b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80057ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d045      	beq.n	8005852 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <osThreadNew+0x48>
        name = attr->name;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <osThreadNew+0x6e>
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	2b38      	cmp	r3, #56	; 0x38
 80057ec:	d805      	bhi.n	80057fa <osThreadNew+0x6e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <osThreadNew+0x72>
        return (NULL);
 80057fa:	2300      	movs	r3, #0
 80057fc:	e054      	b.n	80058a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	089b      	lsrs	r3, r3, #2
 800580c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00e      	beq.n	8005834 <osThreadNew+0xa8>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2baf      	cmp	r3, #175	; 0xaf
 800581c:	d90a      	bls.n	8005834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005822:	2b00      	cmp	r3, #0
 8005824:	d006      	beq.n	8005834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <osThreadNew+0xa8>
        mem = 1;
 800582e:	2301      	movs	r3, #1
 8005830:	61bb      	str	r3, [r7, #24]
 8005832:	e010      	b.n	8005856 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10c      	bne.n	8005856 <osThreadNew+0xca>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d108      	bne.n	8005856 <osThreadNew+0xca>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <osThreadNew+0xca>
          mem = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e001      	b.n	8005856 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d110      	bne.n	800587e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005864:	9202      	str	r2, [sp, #8]
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6a3a      	ldr	r2, [r7, #32]
 8005870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f001 fd70 	bl	8007358 <xTaskCreateStatic>
 8005878:	4603      	mov	r3, r0
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	e013      	b.n	80058a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d110      	bne.n	80058a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	b29a      	uxth	r2, r3
 8005888:	f107 0310 	add.w	r3, r7, #16
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f001 fdbb 	bl	8007412 <xTaskCreate>
 800589c:	4603      	mov	r3, r0
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d001      	beq.n	80058a6 <osThreadNew+0x11a>
            hTask = NULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058a6:	693b      	ldr	r3, [r7, #16]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3728      	adds	r7, #40	; 0x28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058b8:	f3ef 8305 	mrs	r3, IPSR
 80058bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80058be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <osDelay+0x1c>
    stat = osErrorISR;
 80058c4:	f06f 0305 	mvn.w	r3, #5
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	e007      	b.n	80058dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 ff7a 	bl	80077d0 <vTaskDelay>
    }
  }

  return (stat);
 80058dc:	68fb      	ldr	r3, [r7, #12]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b086      	sub	sp, #24
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ee:	f3ef 8305 	mrs	r3, IPSR
 80058f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80058f4:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80058fa:	f06f 0305 	mvn.w	r3, #5
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	e019      	b.n	8005936 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8005906:	f002 f8b5 	bl	8007a74 <xTaskGetTickCount>
 800590a:	4603      	mov	r3, r0
 800590c:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d009      	beq.n	8005930 <osDelayUntil+0x4a>
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	db06      	blt.n	8005930 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8005922:	f107 0308 	add.w	r3, r7, #8
 8005926:	6939      	ldr	r1, [r7, #16]
 8005928:	4618      	mov	r0, r3
 800592a:	f001 fed3 	bl	80076d4 <vTaskDelayUntil>
 800592e:	e002      	b.n	8005936 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8005930:	f06f 0303 	mvn.w	r3, #3
 8005934:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005936:	697b      	ldr	r3, [r7, #20]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005948:	2300      	movs	r3, #0
 800594a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800594c:	f3ef 8305 	mrs	r3, IPSR
 8005950:	60bb      	str	r3, [r7, #8]
  return(result);
 8005952:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005954:	2b00      	cmp	r3, #0
 8005956:	d174      	bne.n	8005a42 <osMutexNew+0x102>
    if (attr != NULL) {
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <osMutexNew+0x26>
      type = attr->attr_bits;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	e001      	b.n	800596a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <osMutexNew+0x3a>
      rmtx = 1U;
 8005974:	2301      	movs	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e001      	b.n	800597e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d15c      	bne.n	8005a42 <osMutexNew+0x102>
      mem = -1;
 8005988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800598c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d015      	beq.n	80059c0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <osMutexNew+0x6a>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	2b4f      	cmp	r3, #79	; 0x4f
 80059a2:	d902      	bls.n	80059aa <osMutexNew+0x6a>
          mem = 1;
 80059a4:	2301      	movs	r3, #1
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	e00c      	b.n	80059c4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d108      	bne.n	80059c4 <osMutexNew+0x84>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d104      	bne.n	80059c4 <osMutexNew+0x84>
            mem = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	e001      	b.n	80059c4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d112      	bne.n	80059f0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4619      	mov	r1, r3
 80059d6:	2004      	movs	r0, #4
 80059d8:	f000 fd69 	bl	80064ae <xQueueCreateMutexStatic>
 80059dc:	61f8      	str	r0, [r7, #28]
 80059de:	e016      	b.n	8005a0e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4619      	mov	r1, r3
 80059e6:	2001      	movs	r0, #1
 80059e8:	f000 fd61 	bl	80064ae <xQueueCreateMutexStatic>
 80059ec:	61f8      	str	r0, [r7, #28]
 80059ee:	e00e      	b.n	8005a0e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80059fc:	2004      	movs	r0, #4
 80059fe:	f000 fd3e 	bl	800647e <xQueueCreateMutex>
 8005a02:	61f8      	str	r0, [r7, #28]
 8005a04:	e003      	b.n	8005a0e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005a06:	2001      	movs	r0, #1
 8005a08:	f000 fd39 	bl	800647e <xQueueCreateMutex>
 8005a0c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00c      	beq.n	8005a2e <osMutexNew+0xee>
        if (attr != NULL) {
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <osMutexNew+0xe2>
          name = attr->name;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	e001      	b.n	8005a26 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005a26:	68f9      	ldr	r1, [r7, #12]
 8005a28:	69f8      	ldr	r0, [r7, #28]
 8005a2a:	f001 fc0d 	bl	8007248 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d006      	beq.n	8005a42 <osMutexNew+0x102>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005a42:	69fb      	ldr	r3, [r7, #28]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3720      	adds	r7, #32
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f023 0301 	bic.w	r3, r3, #1
 8005a5c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a6a:	f3ef 8305 	mrs	r3, IPSR
 8005a6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a70:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005a76:	f06f 0305 	mvn.w	r3, #5
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	e02c      	b.n	8005ad8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005a84:	f06f 0303 	mvn.w	r3, #3
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	e025      	b.n	8005ad8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d011      	beq.n	8005ab6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	6938      	ldr	r0, [r7, #16]
 8005a96:	f000 fd59 	bl	800654c <xQueueTakeMutexRecursive>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d01b      	beq.n	8005ad8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005aa6:	f06f 0301 	mvn.w	r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e014      	b.n	8005ad8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005aae:	f06f 0302 	mvn.w	r3, #2
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	e010      	b.n	8005ad8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005ab6:	6839      	ldr	r1, [r7, #0]
 8005ab8:	6938      	ldr	r0, [r7, #16]
 8005aba:	f001 f8ed 	bl	8006c98 <xQueueSemaphoreTake>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d009      	beq.n	8005ad8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005aca:	f06f 0301 	mvn.w	r3, #1
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	e002      	b.n	8005ad8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005ad2:	f06f 0302 	mvn.w	r3, #2
 8005ad6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005ad8:	697b      	ldr	r3, [r7, #20]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b086      	sub	sp, #24
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005afe:	f3ef 8305 	mrs	r3, IPSR
 8005b02:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b04:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005b0a:	f06f 0305 	mvn.w	r3, #5
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	e01f      	b.n	8005b52 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d103      	bne.n	8005b20 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005b18:	f06f 0303 	mvn.w	r3, #3
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	e018      	b.n	8005b52 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005b26:	6938      	ldr	r0, [r7, #16]
 8005b28:	f000 fcdc 	bl	80064e4 <xQueueGiveMutexRecursive>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d00f      	beq.n	8005b52 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005b32:	f06f 0302 	mvn.w	r3, #2
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	e00b      	b.n	8005b52 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2100      	movs	r1, #0
 8005b40:	6938      	ldr	r0, [r7, #16]
 8005b42:	f000 fda3 	bl	800668c <xQueueGenericSend>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d002      	beq.n	8005b52 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005b4c:	f06f 0302 	mvn.w	r3, #2
 8005b50:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005b52:	697b      	ldr	r3, [r7, #20]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	; 0x28
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b6c:	f3ef 8305 	mrs	r3, IPSR
 8005b70:	613b      	str	r3, [r7, #16]
  return(result);
 8005b72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d175      	bne.n	8005c64 <osSemaphoreNew+0x108>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d072      	beq.n	8005c64 <osSemaphoreNew+0x108>
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d86e      	bhi.n	8005c64 <osSemaphoreNew+0x108>
    mem = -1;
 8005b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d015      	beq.n	8005bbe <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d006      	beq.n	8005ba8 <osSemaphoreNew+0x4c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	2b4f      	cmp	r3, #79	; 0x4f
 8005ba0:	d902      	bls.n	8005ba8 <osSemaphoreNew+0x4c>
        mem = 1;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	e00c      	b.n	8005bc2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d108      	bne.n	8005bc2 <osSemaphoreNew+0x66>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d104      	bne.n	8005bc2 <osSemaphoreNew+0x66>
          mem = 0;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	e001      	b.n	8005bc2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc8:	d04c      	beq.n	8005c64 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d128      	bne.n	8005c22 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d10a      	bne.n	8005bec <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2203      	movs	r2, #3
 8005bdc:	9200      	str	r2, [sp, #0]
 8005bde:	2200      	movs	r2, #0
 8005be0:	2100      	movs	r1, #0
 8005be2:	2001      	movs	r0, #1
 8005be4:	f000 fb5c 	bl	80062a0 <xQueueGenericCreateStatic>
 8005be8:	61f8      	str	r0, [r7, #28]
 8005bea:	e005      	b.n	8005bf8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005bec:	2203      	movs	r2, #3
 8005bee:	2100      	movs	r1, #0
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f000 fbcd 	bl	8006390 <xQueueGenericCreate>
 8005bf6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d022      	beq.n	8005c44 <osSemaphoreNew+0xe8>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01f      	beq.n	8005c44 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c04:	2300      	movs	r3, #0
 8005c06:	2200      	movs	r2, #0
 8005c08:	2100      	movs	r1, #0
 8005c0a:	69f8      	ldr	r0, [r7, #28]
 8005c0c:	f000 fd3e 	bl	800668c <xQueueGenericSend>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d016      	beq.n	8005c44 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005c16:	69f8      	ldr	r0, [r7, #28]
 8005c18:	f001 f9ca 	bl	8006fb0 <vQueueDelete>
            hSemaphore = NULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	e010      	b.n	8005c44 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d108      	bne.n	8005c3a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 fcc1 	bl	80065b8 <xQueueCreateCountingSemaphoreStatic>
 8005c36:	61f8      	str	r0, [r7, #28]
 8005c38:	e004      	b.n	8005c44 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fcf2 	bl	8006626 <xQueueCreateCountingSemaphore>
 8005c42:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00c      	beq.n	8005c64 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e001      	b.n	8005c5c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005c5c:	6979      	ldr	r1, [r7, #20]
 8005c5e:	69f8      	ldr	r0, [r7, #28]
 8005c60:	f001 faf2 	bl	8007248 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005c64:	69fb      	ldr	r3, [r7, #28]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3720      	adds	r7, #32
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d103      	bne.n	8005c90 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005c88:	f06f 0303 	mvn.w	r3, #3
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e039      	b.n	8005d04 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c90:	f3ef 8305 	mrs	r3, IPSR
 8005c94:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c96:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d022      	beq.n	8005ce2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005ca2:	f06f 0303 	mvn.w	r3, #3
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	e02c      	b.n	8005d04 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005cae:	f107 0308 	add.w	r3, r7, #8
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	6938      	ldr	r0, [r7, #16]
 8005cb8:	f001 f8fa 	bl	8006eb0 <xQueueReceiveFromISR>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d003      	beq.n	8005cca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005cc2:	f06f 0302 	mvn.w	r3, #2
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	e01c      	b.n	8005d04 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d019      	beq.n	8005d04 <osSemaphoreAcquire+0x94>
 8005cd0:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <osSemaphoreAcquire+0xa0>)
 8005cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	e010      	b.n	8005d04 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6938      	ldr	r0, [r7, #16]
 8005ce6:	f000 ffd7 	bl	8006c98 <xQueueSemaphoreTake>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d009      	beq.n	8005d04 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005cf6:	f06f 0301 	mvn.w	r3, #1
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e002      	b.n	8005d04 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005cfe:	f06f 0302 	mvn.w	r3, #2
 8005d02:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005d04:	697b      	ldr	r3, [r7, #20]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	e000ed04 	.word	0xe000ed04

08005d14 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d103      	bne.n	8005d32 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005d2a:	f06f 0303 	mvn.w	r3, #3
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	e02c      	b.n	8005d8c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d32:	f3ef 8305 	mrs	r3, IPSR
 8005d36:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d38:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d01a      	beq.n	8005d74 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005d42:	f107 0308 	add.w	r3, r7, #8
 8005d46:	4619      	mov	r1, r3
 8005d48:	6938      	ldr	r0, [r7, #16]
 8005d4a:	f000 fe38 	bl	80069be <xQueueGiveFromISR>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d003      	beq.n	8005d5c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005d54:	f06f 0302 	mvn.w	r3, #2
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	e017      	b.n	8005d8c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d014      	beq.n	8005d8c <osSemaphoreRelease+0x78>
 8005d62:	4b0d      	ldr	r3, [pc, #52]	; (8005d98 <osSemaphoreRelease+0x84>)
 8005d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	e00b      	b.n	8005d8c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005d74:	2300      	movs	r3, #0
 8005d76:	2200      	movs	r2, #0
 8005d78:	2100      	movs	r1, #0
 8005d7a:	6938      	ldr	r0, [r7, #16]
 8005d7c:	f000 fc86 	bl	800668c <xQueueGenericSend>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d002      	beq.n	8005d8c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005d86:	f06f 0302 	mvn.w	r3, #2
 8005d8a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005d8c:	697b      	ldr	r3, [r7, #20]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	e000ed04 	.word	0xe000ed04

08005d9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	; 0x28
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dac:	f3ef 8305 	mrs	r3, IPSR
 8005db0:	613b      	str	r3, [r7, #16]
  return(result);
 8005db2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d15f      	bne.n	8005e78 <osMessageQueueNew+0xdc>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d05c      	beq.n	8005e78 <osMessageQueueNew+0xdc>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d059      	beq.n	8005e78 <osMessageQueueNew+0xdc>
    mem = -1;
 8005dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dc8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d029      	beq.n	8005e24 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d012      	beq.n	8005dfe <osMessageQueueNew+0x62>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	2b4f      	cmp	r3, #79	; 0x4f
 8005dde:	d90e      	bls.n	8005dfe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	695a      	ldr	r2, [r3, #20]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d302      	bcc.n	8005dfe <osMessageQueueNew+0x62>
        mem = 1;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	e014      	b.n	8005e28 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d110      	bne.n	8005e28 <osMessageQueueNew+0x8c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10c      	bne.n	8005e28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d108      	bne.n	8005e28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d104      	bne.n	8005e28 <osMessageQueueNew+0x8c>
          mem = 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61bb      	str	r3, [r7, #24]
 8005e22:	e001      	b.n	8005e28 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d10b      	bne.n	8005e46 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	2100      	movs	r1, #0
 8005e38:	9100      	str	r1, [sp, #0]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fa2f 	bl	80062a0 <xQueueGenericCreateStatic>
 8005e42:	61f8      	str	r0, [r7, #28]
 8005e44:	e008      	b.n	8005e58 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d105      	bne.n	8005e58 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fa9d 	bl	8006390 <xQueueGenericCreate>
 8005e56:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00c      	beq.n	8005e78 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <osMessageQueueNew+0xd0>
        name = attr->name;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	e001      	b.n	8005e70 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005e70:	6979      	ldr	r1, [r7, #20]
 8005e72:	69f8      	ldr	r0, [r7, #28]
 8005e74:	f001 f9e8 	bl	8007248 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005e78:	69fb      	ldr	r3, [r7, #28]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	4613      	mov	r3, r2
 8005e92:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e9c:	f3ef 8305 	mrs	r3, IPSR
 8005ea0:	617b      	str	r3, [r7, #20]
  return(result);
 8005ea2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d028      	beq.n	8005efa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <osMessageQueuePut+0x36>
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <osMessageQueuePut+0x36>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005eba:	f06f 0303 	mvn.w	r3, #3
 8005ebe:	61fb      	str	r3, [r7, #28]
 8005ec0:	e038      	b.n	8005f34 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005ec6:	f107 0210 	add.w	r2, r7, #16
 8005eca:	2300      	movs	r3, #0
 8005ecc:	68b9      	ldr	r1, [r7, #8]
 8005ece:	69b8      	ldr	r0, [r7, #24]
 8005ed0:	f000 fcda 	bl	8006888 <xQueueGenericSendFromISR>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d003      	beq.n	8005ee2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005eda:	f06f 0302 	mvn.w	r3, #2
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	e028      	b.n	8005f34 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d025      	beq.n	8005f34 <osMessageQueuePut+0xb0>
 8005ee8:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <osMessageQueuePut+0xbc>)
 8005eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	e01c      	b.n	8005f34 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <osMessageQueuePut+0x82>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d103      	bne.n	8005f0e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005f06:	f06f 0303 	mvn.w	r3, #3
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	e012      	b.n	8005f34 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005f0e:	2300      	movs	r3, #0
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	69b8      	ldr	r0, [r7, #24]
 8005f16:	f000 fbb9 	bl	800668c <xQueueGenericSend>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d009      	beq.n	8005f34 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005f26:	f06f 0301 	mvn.w	r3, #1
 8005f2a:	61fb      	str	r3, [r7, #28]
 8005f2c:	e002      	b.n	8005f34 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005f2e:	f06f 0302 	mvn.w	r3, #2
 8005f32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005f34:	69fb      	ldr	r3, [r7, #28]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3720      	adds	r7, #32
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f5a:	f3ef 8305 	mrs	r3, IPSR
 8005f5e:	617b      	str	r3, [r7, #20]
  return(result);
 8005f60:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d028      	beq.n	8005fb8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <osMessageQueueGet+0x34>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <osMessageQueueGet+0x34>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005f78:	f06f 0303 	mvn.w	r3, #3
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	e037      	b.n	8005ff0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005f80:	2300      	movs	r3, #0
 8005f82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005f84:	f107 0310 	add.w	r3, r7, #16
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	69b8      	ldr	r0, [r7, #24]
 8005f8e:	f000 ff8f 	bl	8006eb0 <xQueueReceiveFromISR>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d003      	beq.n	8005fa0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005f98:	f06f 0302 	mvn.w	r3, #2
 8005f9c:	61fb      	str	r3, [r7, #28]
 8005f9e:	e027      	b.n	8005ff0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d024      	beq.n	8005ff0 <osMessageQueueGet+0xac>
 8005fa6:	4b15      	ldr	r3, [pc, #84]	; (8005ffc <osMessageQueueGet+0xb8>)
 8005fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	e01b      	b.n	8005ff0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <osMessageQueueGet+0x80>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d103      	bne.n	8005fcc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005fc4:	f06f 0303 	mvn.w	r3, #3
 8005fc8:	61fb      	str	r3, [r7, #28]
 8005fca:	e011      	b.n	8005ff0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	69b8      	ldr	r0, [r7, #24]
 8005fd2:	f000 fd81 	bl	8006ad8 <xQueueReceive>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d009      	beq.n	8005ff0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005fe2:	f06f 0301 	mvn.w	r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	e002      	b.n	8005ff0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005fea:	f06f 0302 	mvn.w	r3, #2
 8005fee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005ff0:	69fb      	ldr	r3, [r7, #28]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	e000ed04 	.word	0xe000ed04

08006000 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4a07      	ldr	r2, [pc, #28]	; (800602c <vApplicationGetIdleTaskMemory+0x2c>)
 8006010:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4a06      	ldr	r2, [pc, #24]	; (8006030 <vApplicationGetIdleTaskMemory+0x30>)
 8006016:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2280      	movs	r2, #128	; 0x80
 800601c:	601a      	str	r2, [r3, #0]
}
 800601e:	bf00      	nop
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	20000464 	.word	0x20000464
 8006030:	20000514 	.word	0x20000514

08006034 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4a07      	ldr	r2, [pc, #28]	; (8006060 <vApplicationGetTimerTaskMemory+0x2c>)
 8006044:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	4a06      	ldr	r2, [pc, #24]	; (8006064 <vApplicationGetTimerTaskMemory+0x30>)
 800604a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006052:	601a      	str	r2, [r3, #0]
}
 8006054:	bf00      	nop
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	20000714 	.word	0x20000714
 8006064:	200007c4 	.word	0x200007c4

08006068 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f103 0208 	add.w	r2, r3, #8
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006080:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f103 0208 	add.w	r2, r3, #8
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f103 0208 	add.w	r2, r3, #8
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	601a      	str	r2, [r3, #0]
}
 80060fe:	bf00      	nop
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800610a:	b480      	push	{r7}
 800610c:	b085      	sub	sp, #20
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006120:	d103      	bne.n	800612a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	e00c      	b.n	8006144 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3308      	adds	r3, #8
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	e002      	b.n	8006138 <vListInsert+0x2e>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	429a      	cmp	r2, r3
 8006142:	d2f6      	bcs.n	8006132 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	601a      	str	r2, [r3, #0]
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6892      	ldr	r2, [r2, #8]
 8006192:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6852      	ldr	r2, [r2, #4]
 800619c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d103      	bne.n	80061b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	1e5a      	subs	r2, r3, #1
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10a      	bne.n	80061fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061f6:	bf00      	nop
 80061f8:	e7fe      	b.n	80061f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061fa:	f002 fe23 	bl	8008e44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800620a:	fb01 f303 	mul.w	r3, r1, r3
 800620e:	441a      	add	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622a:	3b01      	subs	r3, #1
 800622c:	68f9      	ldr	r1, [r7, #12]
 800622e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006230:	fb01 f303 	mul.w	r3, r1, r3
 8006234:	441a      	add	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	22ff      	movs	r2, #255	; 0xff
 800623e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	22ff      	movs	r2, #255	; 0xff
 8006246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d114      	bne.n	800627a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01a      	beq.n	800628e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3310      	adds	r3, #16
 800625c:	4618      	mov	r0, r3
 800625e:	f001 fdc5 	bl	8007dec <xTaskRemoveFromEventList>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d012      	beq.n	800628e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006268:	4b0c      	ldr	r3, [pc, #48]	; (800629c <xQueueGenericReset+0xcc>)
 800626a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	e009      	b.n	800628e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3310      	adds	r3, #16
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff fef2 	bl	8006068 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3324      	adds	r3, #36	; 0x24
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff feed 	bl	8006068 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800628e:	f002 fe09 	bl	8008ea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006292:	2301      	movs	r3, #1
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	e000ed04 	.word	0xe000ed04

080062a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08e      	sub	sp, #56	; 0x38
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10a      	bne.n	80062e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <xQueueGenericCreateStatic+0x52>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <xQueueGenericCreateStatic+0x56>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <xQueueGenericCreateStatic+0x58>
 80062f6:	2300      	movs	r3, #0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	623b      	str	r3, [r7, #32]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <xQueueGenericCreateStatic+0x7e>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <xQueueGenericCreateStatic+0x82>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <xQueueGenericCreateStatic+0x84>
 8006322:	2300      	movs	r3, #0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	61fb      	str	r3, [r7, #28]
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800633e:	2350      	movs	r3, #80	; 0x50
 8006340:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b50      	cmp	r3, #80	; 0x50
 8006346:	d00a      	beq.n	800635e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	61bb      	str	r3, [r7, #24]
}
 800635a:	bf00      	nop
 800635c:	e7fe      	b.n	800635c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800635e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00d      	beq.n	8006386 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006372:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	4613      	mov	r3, r2
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f83f 	bl	8006404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006388:	4618      	mov	r0, r3
 800638a:	3730      	adds	r7, #48	; 0x30
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	; 0x28
 8006394:	af02      	add	r7, sp, #8
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10a      	bne.n	80063ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	613b      	str	r3, [r7, #16]
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	fb02 f303 	mul.w	r3, r2, r3
 80063c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	3350      	adds	r3, #80	; 0x50
 80063c8:	4618      	mov	r0, r3
 80063ca:	f002 fe5d 	bl	8009088 <pvPortMalloc>
 80063ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d011      	beq.n	80063fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	3350      	adds	r3, #80	; 0x50
 80063de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063e8:	79fa      	ldrb	r2, [r7, #7]
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	4613      	mov	r3, r2
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	68b9      	ldr	r1, [r7, #8]
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f805 	bl	8006404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063fa:	69bb      	ldr	r3, [r7, #24]
	}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3720      	adds	r7, #32
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d103      	bne.n	8006420 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	e002      	b.n	8006426 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006432:	2101      	movs	r1, #1
 8006434:	69b8      	ldr	r0, [r7, #24]
 8006436:	f7ff fecb 	bl	80061d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	78fa      	ldrb	r2, [r7, #3]
 800643e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00e      	beq.n	8006476 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800646a:	2300      	movs	r3, #0
 800646c:	2200      	movs	r2, #0
 800646e:	2100      	movs	r1, #0
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f90b 	bl	800668c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800647e:	b580      	push	{r7, lr}
 8006480:	b086      	sub	sp, #24
 8006482:	af00      	add	r7, sp, #0
 8006484:	4603      	mov	r3, r0
 8006486:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006488:	2301      	movs	r3, #1
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	2300      	movs	r3, #0
 800648e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	461a      	mov	r2, r3
 8006494:	6939      	ldr	r1, [r7, #16]
 8006496:	6978      	ldr	r0, [r7, #20]
 8006498:	f7ff ff7a 	bl	8006390 <xQueueGenericCreate>
 800649c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7ff ffd3 	bl	800644a <prvInitialiseMutex>

		return xNewQueue;
 80064a4:	68fb      	ldr	r3, [r7, #12]
	}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b088      	sub	sp, #32
 80064b2:	af02      	add	r7, sp, #8
 80064b4:	4603      	mov	r3, r0
 80064b6:	6039      	str	r1, [r7, #0]
 80064b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80064ba:	2301      	movs	r3, #1
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	2300      	movs	r3, #0
 80064c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2200      	movs	r2, #0
 80064ca:	6939      	ldr	r1, [r7, #16]
 80064cc:	6978      	ldr	r0, [r7, #20]
 80064ce:	f7ff fee7 	bl	80062a0 <xQueueGenericCreateStatic>
 80064d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff ffb8 	bl	800644a <prvInitialiseMutex>

		return xNewQueue;
 80064da:	68fb      	ldr	r3, [r7, #12]
	}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80064e4:	b590      	push	{r4, r7, lr}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10a      	bne.n	800650c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	60fb      	str	r3, [r7, #12]
}
 8006508:	bf00      	nop
 800650a:	e7fe      	b.n	800650a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	689c      	ldr	r4, [r3, #8]
 8006510:	f001 fe2e 	bl	8008170 <xTaskGetCurrentTaskHandle>
 8006514:	4603      	mov	r3, r0
 8006516:	429c      	cmp	r4, r3
 8006518:	d111      	bne.n	800653e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	1e5a      	subs	r2, r3, #1
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d105      	bne.n	8006538 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800652c:	2300      	movs	r3, #0
 800652e:	2200      	movs	r2, #0
 8006530:	2100      	movs	r1, #0
 8006532:	6938      	ldr	r0, [r7, #16]
 8006534:	f000 f8aa 	bl	800668c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006538:	2301      	movs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e001      	b.n	8006542 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800653e:	2300      	movs	r3, #0
 8006540:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006542:	697b      	ldr	r3, [r7, #20]
	}
 8006544:	4618      	mov	r0, r3
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	bd90      	pop	{r4, r7, pc}

0800654c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800654c:	b590      	push	{r4, r7, lr}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	60fb      	str	r3, [r7, #12]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	689c      	ldr	r4, [r3, #8]
 800657a:	f001 fdf9 	bl	8008170 <xTaskGetCurrentTaskHandle>
 800657e:	4603      	mov	r3, r0
 8006580:	429c      	cmp	r4, r3
 8006582:	d107      	bne.n	8006594 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800658e:	2301      	movs	r3, #1
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	e00c      	b.n	80065ae <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	6938      	ldr	r0, [r7, #16]
 8006598:	f000 fb7e 	bl	8006c98 <xQueueSemaphoreTake>
 800659c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d004      	beq.n	80065ae <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80065ae:	697b      	ldr	r3, [r7, #20]
	}
 80065b0:	4618      	mov	r0, r3
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd90      	pop	{r4, r7, pc}

080065b8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08a      	sub	sp, #40	; 0x28
 80065bc:	af02      	add	r7, sp, #8
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	61bb      	str	r3, [r7, #24]
}
 80065dc:	bf00      	nop
 80065de:	e7fe      	b.n	80065de <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d90a      	bls.n	80065fe <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	617b      	str	r3, [r7, #20]
}
 80065fa:	bf00      	nop
 80065fc:	e7fe      	b.n	80065fc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80065fe:	2302      	movs	r3, #2
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	2100      	movs	r1, #0
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff fe49 	bl	80062a0 <xQueueGenericCreateStatic>
 800660e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800661c:	69fb      	ldr	r3, [r7, #28]
	}
 800661e:	4618      	mov	r0, r3
 8006620:	3720      	adds	r7, #32
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	613b      	str	r3, [r7, #16]
}
 8006648:	bf00      	nop
 800664a:	e7fe      	b.n	800664a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	429a      	cmp	r2, r3
 8006652:	d90a      	bls.n	800666a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	60fb      	str	r3, [r7, #12]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800666a:	2202      	movs	r2, #2
 800666c:	2100      	movs	r1, #0
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff fe8e 	bl	8006390 <xQueueGenericCreate>
 8006674:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006682:	697b      	ldr	r3, [r7, #20]
	}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08e      	sub	sp, #56	; 0x38
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800669a:	2300      	movs	r3, #0
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <xQueueGenericSend+0x32>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d103      	bne.n	80066cc <xQueueGenericSend+0x40>
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <xQueueGenericSend+0x44>
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <xQueueGenericSend+0x46>
 80066d0:	2300      	movs	r3, #0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <xQueueGenericSend+0x60>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066e8:	bf00      	nop
 80066ea:	e7fe      	b.n	80066ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d103      	bne.n	80066fa <xQueueGenericSend+0x6e>
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d101      	bne.n	80066fe <xQueueGenericSend+0x72>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e000      	b.n	8006700 <xQueueGenericSend+0x74>
 80066fe:	2300      	movs	r3, #0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <xQueueGenericSend+0x8e>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	623b      	str	r3, [r7, #32]
}
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800671a:	f001 fd39 	bl	8008190 <xTaskGetSchedulerState>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d102      	bne.n	800672a <xQueueGenericSend+0x9e>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <xQueueGenericSend+0xa2>
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <xQueueGenericSend+0xa4>
 800672e:	2300      	movs	r3, #0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <xQueueGenericSend+0xbe>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	61fb      	str	r3, [r7, #28]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800674a:	f002 fb7b 	bl	8008e44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006756:	429a      	cmp	r2, r3
 8006758:	d302      	bcc.n	8006760 <xQueueGenericSend+0xd4>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d129      	bne.n	80067b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	68b9      	ldr	r1, [r7, #8]
 8006764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006766:	f000 fc5e 	bl	8007026 <prvCopyDataToQueue>
 800676a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	2b00      	cmp	r3, #0
 8006772:	d010      	beq.n	8006796 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	3324      	adds	r3, #36	; 0x24
 8006778:	4618      	mov	r0, r3
 800677a:	f001 fb37 	bl	8007dec <xTaskRemoveFromEventList>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d013      	beq.n	80067ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006784:	4b3f      	ldr	r3, [pc, #252]	; (8006884 <xQueueGenericSend+0x1f8>)
 8006786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	e00a      	b.n	80067ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d007      	beq.n	80067ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800679c:	4b39      	ldr	r3, [pc, #228]	; (8006884 <xQueueGenericSend+0x1f8>)
 800679e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067ac:	f002 fb7a 	bl	8008ea4 <vPortExitCritical>
				return pdPASS;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e063      	b.n	800687c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067ba:	f002 fb73 	bl	8008ea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067be:	2300      	movs	r3, #0
 80067c0:	e05c      	b.n	800687c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067c8:	f107 0314 	add.w	r3, r7, #20
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 fb71 	bl	8007eb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067d2:	2301      	movs	r3, #1
 80067d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067d6:	f002 fb65 	bl	8008ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067da:	f001 f89f 	bl	800791c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067de:	f002 fb31 	bl	8008e44 <vPortEnterCritical>
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067e8:	b25b      	sxtb	r3, r3
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ee:	d103      	bne.n	80067f8 <xQueueGenericSend+0x16c>
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067fe:	b25b      	sxtb	r3, r3
 8006800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006804:	d103      	bne.n	800680e <xQueueGenericSend+0x182>
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800680e:	f002 fb49 	bl	8008ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006812:	1d3a      	adds	r2, r7, #4
 8006814:	f107 0314 	add.w	r3, r7, #20
 8006818:	4611      	mov	r1, r2
 800681a:	4618      	mov	r0, r3
 800681c:	f001 fb60 	bl	8007ee0 <xTaskCheckForTimeOut>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d124      	bne.n	8006870 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006828:	f000 fcf5 	bl	8007216 <prvIsQueueFull>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d018      	beq.n	8006864 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	3310      	adds	r3, #16
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	4611      	mov	r1, r2
 800683a:	4618      	mov	r0, r3
 800683c:	f001 fa86 	bl	8007d4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006842:	f000 fc80 	bl	8007146 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006846:	f001 f877 	bl	8007938 <xTaskResumeAll>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	f47f af7c 	bne.w	800674a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006852:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <xQueueGenericSend+0x1f8>)
 8006854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	e772      	b.n	800674a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006866:	f000 fc6e 	bl	8007146 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800686a:	f001 f865 	bl	8007938 <xTaskResumeAll>
 800686e:	e76c      	b.n	800674a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006872:	f000 fc68 	bl	8007146 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006876:	f001 f85f 	bl	8007938 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800687a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800687c:	4618      	mov	r0, r3
 800687e:	3738      	adds	r7, #56	; 0x38
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b090      	sub	sp, #64	; 0x40
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10a      	bne.n	80068b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d103      	bne.n	80068c4 <xQueueGenericSendFromISR+0x3c>
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <xQueueGenericSendFromISR+0x40>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <xQueueGenericSendFromISR+0x42>
 80068c8:	2300      	movs	r3, #0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068e0:	bf00      	nop
 80068e2:	e7fe      	b.n	80068e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d103      	bne.n	80068f2 <xQueueGenericSendFromISR+0x6a>
 80068ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <xQueueGenericSendFromISR+0x6e>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <xQueueGenericSendFromISR+0x70>
 80068f6:	2300      	movs	r3, #0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	623b      	str	r3, [r7, #32]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006912:	f002 fb79 	bl	8009008 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006916:	f3ef 8211 	mrs	r2, BASEPRI
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	61fa      	str	r2, [r7, #28]
 800692c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800692e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006930:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693a:	429a      	cmp	r2, r3
 800693c:	d302      	bcc.n	8006944 <xQueueGenericSendFromISR+0xbc>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b02      	cmp	r3, #2
 8006942:	d12f      	bne.n	80069a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800694a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006952:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800695a:	f000 fb64 	bl	8007026 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800695e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006966:	d112      	bne.n	800698e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	d016      	beq.n	800699e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	3324      	adds	r3, #36	; 0x24
 8006974:	4618      	mov	r0, r3
 8006976:	f001 fa39 	bl	8007dec <xTaskRemoveFromEventList>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00e      	beq.n	800699e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	e007      	b.n	800699e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800698e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006992:	3301      	adds	r3, #1
 8006994:	b2db      	uxtb	r3, r3
 8006996:	b25a      	sxtb	r2, r3
 8006998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800699e:	2301      	movs	r3, #1
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80069a2:	e001      	b.n	80069a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069a4:	2300      	movs	r3, #0
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3740      	adds	r7, #64	; 0x40
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b08e      	sub	sp, #56	; 0x38
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	623b      	str	r3, [r7, #32]
}
 80069e4:	bf00      	nop
 80069e6:	e7fe      	b.n	80069e6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <xQueueGiveFromISR+0x48>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	61fb      	str	r3, [r7, #28]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d103      	bne.n	8006a16 <xQueueGiveFromISR+0x58>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <xQueueGiveFromISR+0x5c>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <xQueueGiveFromISR+0x5e>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	61bb      	str	r3, [r7, #24]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a36:	f002 fae7 	bl	8009008 <vPortValidateInterruptPriority>
	__asm volatile
 8006a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	617a      	str	r2, [r7, #20]
 8006a50:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006a52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d22b      	bcs.n	8006abe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a80:	d112      	bne.n	8006aa8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d016      	beq.n	8006ab8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	3324      	adds	r3, #36	; 0x24
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f001 f9ac 	bl	8007dec <xTaskRemoveFromEventList>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00e      	beq.n	8006ab8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	e007      	b.n	8006ab8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aac:	3301      	adds	r3, #1
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	b25a      	sxtb	r2, r3
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	637b      	str	r3, [r7, #52]	; 0x34
 8006abc:	e001      	b.n	8006ac2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f383 8811 	msr	BASEPRI, r3
}
 8006acc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3738      	adds	r7, #56	; 0x38
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08c      	sub	sp, #48	; 0x30
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <xQueueReceive+0x30>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	623b      	str	r3, [r7, #32]
}
 8006b04:	bf00      	nop
 8006b06:	e7fe      	b.n	8006b06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d103      	bne.n	8006b16 <xQueueReceive+0x3e>
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <xQueueReceive+0x42>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <xQueueReceive+0x44>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <xQueueReceive+0x5e>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	61fb      	str	r3, [r7, #28]
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b36:	f001 fb2b 	bl	8008190 <xTaskGetSchedulerState>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d102      	bne.n	8006b46 <xQueueReceive+0x6e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <xQueueReceive+0x72>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <xQueueReceive+0x74>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <xQueueReceive+0x8e>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	61bb      	str	r3, [r7, #24]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b66:	f002 f96d 	bl	8008e44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d01f      	beq.n	8006bb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b76:	68b9      	ldr	r1, [r7, #8]
 8006b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b7a:	f000 fabe 	bl	80070fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	1e5a      	subs	r2, r3, #1
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00f      	beq.n	8006bae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	3310      	adds	r3, #16
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 f92a 	bl	8007dec <xTaskRemoveFromEventList>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d007      	beq.n	8006bae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b9e:	4b3d      	ldr	r3, [pc, #244]	; (8006c94 <xQueueReceive+0x1bc>)
 8006ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bae:	f002 f979 	bl	8008ea4 <vPortExitCritical>
				return pdPASS;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e069      	b.n	8006c8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d103      	bne.n	8006bc4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bbc:	f002 f972 	bl	8008ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e062      	b.n	8006c8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bca:	f107 0310 	add.w	r3, r7, #16
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f001 f970 	bl	8007eb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bd8:	f002 f964 	bl	8008ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bdc:	f000 fe9e 	bl	800791c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006be0:	f002 f930 	bl	8008e44 <vPortEnterCritical>
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bf0:	d103      	bne.n	8006bfa <xQueueReceive+0x122>
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c00:	b25b      	sxtb	r3, r3
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c06:	d103      	bne.n	8006c10 <xQueueReceive+0x138>
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c10:	f002 f948 	bl	8008ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c14:	1d3a      	adds	r2, r7, #4
 8006c16:	f107 0310 	add.w	r3, r7, #16
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 f95f 	bl	8007ee0 <xTaskCheckForTimeOut>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d123      	bne.n	8006c70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c2a:	f000 fade 	bl	80071ea <prvIsQueueEmpty>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d017      	beq.n	8006c64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	3324      	adds	r3, #36	; 0x24
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f001 f885 	bl	8007d4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c44:	f000 fa7f 	bl	8007146 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c48:	f000 fe76 	bl	8007938 <xTaskResumeAll>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d189      	bne.n	8006b66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006c52:	4b10      	ldr	r3, [pc, #64]	; (8006c94 <xQueueReceive+0x1bc>)
 8006c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	e780      	b.n	8006b66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c66:	f000 fa6e 	bl	8007146 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c6a:	f000 fe65 	bl	8007938 <xTaskResumeAll>
 8006c6e:	e77a      	b.n	8006b66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c72:	f000 fa68 	bl	8007146 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c76:	f000 fe5f 	bl	8007938 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c7c:	f000 fab5 	bl	80071ea <prvIsQueueEmpty>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f43f af6f 	beq.w	8006b66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3730      	adds	r7, #48	; 0x30
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	e000ed04 	.word	0xe000ed04

08006c98 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08e      	sub	sp, #56	; 0x38
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006caa:	2300      	movs	r3, #0
 8006cac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	623b      	str	r3, [r7, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	61fb      	str	r3, [r7, #28]
}
 8006ce4:	bf00      	nop
 8006ce6:	e7fe      	b.n	8006ce6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ce8:	f001 fa52 	bl	8008190 <xTaskGetSchedulerState>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d102      	bne.n	8006cf8 <xQueueSemaphoreTake+0x60>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <xQueueSemaphoreTake+0x64>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <xQueueSemaphoreTake+0x66>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	61bb      	str	r3, [r7, #24]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d18:	f002 f894 	bl	8008e44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d024      	beq.n	8006d72 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	1e5a      	subs	r2, r3, #1
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d104      	bne.n	8006d42 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006d38:	f001 fba0 	bl	800847c <pvTaskIncrementMutexHeldCount>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d40:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00f      	beq.n	8006d6a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	3310      	adds	r3, #16
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f001 f84c 	bl	8007dec <xTaskRemoveFromEventList>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d5a:	4b54      	ldr	r3, [pc, #336]	; (8006eac <xQueueSemaphoreTake+0x214>)
 8006d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d6a:	f002 f89b 	bl	8008ea4 <vPortExitCritical>
				return pdPASS;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e097      	b.n	8006ea2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d111      	bne.n	8006d9c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	617b      	str	r3, [r7, #20]
}
 8006d90:	bf00      	nop
 8006d92:	e7fe      	b.n	8006d92 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006d94:	f002 f886 	bl	8008ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e082      	b.n	8006ea2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006da2:	f107 030c 	add.w	r3, r7, #12
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 f884 	bl	8007eb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dac:	2301      	movs	r3, #1
 8006dae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006db0:	f002 f878 	bl	8008ea4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006db4:	f000 fdb2 	bl	800791c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006db8:	f002 f844 	bl	8008e44 <vPortEnterCritical>
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dc2:	b25b      	sxtb	r3, r3
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc8:	d103      	bne.n	8006dd2 <xQueueSemaphoreTake+0x13a>
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dd8:	b25b      	sxtb	r3, r3
 8006dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dde:	d103      	bne.n	8006de8 <xQueueSemaphoreTake+0x150>
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006de8:	f002 f85c 	bl	8008ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dec:	463a      	mov	r2, r7
 8006dee:	f107 030c 	add.w	r3, r7, #12
 8006df2:	4611      	mov	r1, r2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f001 f873 	bl	8007ee0 <xTaskCheckForTimeOut>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d132      	bne.n	8006e66 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e02:	f000 f9f2 	bl	80071ea <prvIsQueueEmpty>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d026      	beq.n	8006e5a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d109      	bne.n	8006e28 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006e14:	f002 f816 	bl	8008e44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 f9d5 	bl	80081cc <xTaskPriorityInherit>
 8006e22:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006e24:	f002 f83e 	bl	8008ea4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	3324      	adds	r3, #36	; 0x24
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	4611      	mov	r1, r2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 ff8b 	bl	8007d4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e38:	f000 f985 	bl	8007146 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e3c:	f000 fd7c 	bl	8007938 <xTaskResumeAll>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f47f af68 	bne.w	8006d18 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006e48:	4b18      	ldr	r3, [pc, #96]	; (8006eac <xQueueSemaphoreTake+0x214>)
 8006e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	e75e      	b.n	8006d18 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006e5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e5c:	f000 f973 	bl	8007146 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e60:	f000 fd6a 	bl	8007938 <xTaskResumeAll>
 8006e64:	e758      	b.n	8006d18 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e68:	f000 f96d 	bl	8007146 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e6c:	f000 fd64 	bl	8007938 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e72:	f000 f9ba 	bl	80071ea <prvIsQueueEmpty>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f43f af4d 	beq.w	8006d18 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00d      	beq.n	8006ea0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006e84:	f001 ffde 	bl	8008e44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006e88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e8a:	f000 f8b4 	bl	8006ff6 <prvGetDisinheritPriorityAfterTimeout>
 8006e8e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 fa6e 	bl	8008378 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006e9c:	f002 f802 	bl	8008ea4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ea0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3738      	adds	r7, #56	; 0x38
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	e000ed04 	.word	0xe000ed04

08006eb0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08e      	sub	sp, #56	; 0x38
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10a      	bne.n	8006edc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	623b      	str	r3, [r7, #32]
}
 8006ed8:	bf00      	nop
 8006eda:	e7fe      	b.n	8006eda <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d103      	bne.n	8006eea <xQueueReceiveFromISR+0x3a>
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <xQueueReceiveFromISR+0x3e>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <xQueueReceiveFromISR+0x40>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10a      	bne.n	8006f0a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	61fb      	str	r3, [r7, #28]
}
 8006f06:	bf00      	nop
 8006f08:	e7fe      	b.n	8006f08 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f0a:	f002 f87d 	bl	8009008 <vPortValidateInterruptPriority>
	__asm volatile
 8006f0e:	f3ef 8211 	mrs	r2, BASEPRI
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	61ba      	str	r2, [r7, #24]
 8006f24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d02f      	beq.n	8006f96 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f40:	68b9      	ldr	r1, [r7, #8]
 8006f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f44:	f000 f8d9 	bl	80070fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	1e5a      	subs	r2, r3, #1
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f58:	d112      	bne.n	8006f80 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d016      	beq.n	8006f90 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	3310      	adds	r3, #16
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 ff40 	bl	8007dec <xTaskRemoveFromEventList>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00e      	beq.n	8006f90 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e007      	b.n	8006f90 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f84:	3301      	adds	r3, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	b25a      	sxtb	r2, r3
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006f90:	2301      	movs	r3, #1
 8006f92:	637b      	str	r3, [r7, #52]	; 0x34
 8006f94:	e001      	b.n	8006f9a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f383 8811 	msr	BASEPRI, r3
}
 8006fa4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3738      	adds	r7, #56	; 0x38
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <vQueueDelete+0x28>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	60bb      	str	r3, [r7, #8]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f95f 	bl	800729c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d102      	bne.n	8006fee <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f002 f893 	bl	8009114 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b085      	sub	sp, #20
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	2b00      	cmp	r3, #0
 8007004:	d006      	beq.n	8007014 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	e001      	b.n	8007018 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007018:	68fb      	ldr	r3, [r7, #12]
	}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b086      	sub	sp, #24
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10d      	bne.n	8007060 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d14d      	bne.n	80070e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	4618      	mov	r0, r3
 8007052:	f001 f923 	bl	800829c <xTaskPriorityDisinherit>
 8007056:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	609a      	str	r2, [r3, #8]
 800705e:	e043      	b.n	80070e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d119      	bne.n	800709a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6858      	ldr	r0, [r3, #4]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	461a      	mov	r2, r3
 8007070:	68b9      	ldr	r1, [r7, #8]
 8007072:	f002 fc09 	bl	8009888 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	441a      	add	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	429a      	cmp	r2, r3
 800708e:	d32b      	bcc.n	80070e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	605a      	str	r2, [r3, #4]
 8007098:	e026      	b.n	80070e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68d8      	ldr	r0, [r3, #12]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	461a      	mov	r2, r3
 80070a4:	68b9      	ldr	r1, [r7, #8]
 80070a6:	f002 fbef 	bl	8009888 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	425b      	negs	r3, r3
 80070b4:	441a      	add	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d207      	bcs.n	80070d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	425b      	negs	r3, r3
 80070d0:	441a      	add	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d105      	bne.n	80070e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070f0:	697b      	ldr	r3, [r7, #20]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	2b00      	cmp	r3, #0
 800710a:	d018      	beq.n	800713e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007114:	441a      	add	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	d303      	bcc.n	800712e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68d9      	ldr	r1, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	461a      	mov	r2, r3
 8007138:	6838      	ldr	r0, [r7, #0]
 800713a:	f002 fba5 	bl	8009888 <memcpy>
	}
}
 800713e:	bf00      	nop
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b084      	sub	sp, #16
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800714e:	f001 fe79 	bl	8008e44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007158:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800715a:	e011      	b.n	8007180 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	2b00      	cmp	r3, #0
 8007162:	d012      	beq.n	800718a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3324      	adds	r3, #36	; 0x24
 8007168:	4618      	mov	r0, r3
 800716a:	f000 fe3f 	bl	8007dec <xTaskRemoveFromEventList>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007174:	f000 ff16 	bl	8007fa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	3b01      	subs	r3, #1
 800717c:	b2db      	uxtb	r3, r3
 800717e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007184:	2b00      	cmp	r3, #0
 8007186:	dce9      	bgt.n	800715c <prvUnlockQueue+0x16>
 8007188:	e000      	b.n	800718c <prvUnlockQueue+0x46>
					break;
 800718a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	22ff      	movs	r2, #255	; 0xff
 8007190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007194:	f001 fe86 	bl	8008ea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007198:	f001 fe54 	bl	8008e44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071a4:	e011      	b.n	80071ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d012      	beq.n	80071d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3310      	adds	r3, #16
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fe1a 	bl	8007dec <xTaskRemoveFromEventList>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071be:	f000 fef1 	bl	8007fa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	dce9      	bgt.n	80071a6 <prvUnlockQueue+0x60>
 80071d2:	e000      	b.n	80071d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	22ff      	movs	r2, #255	; 0xff
 80071da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071de:	f001 fe61 	bl	8008ea4 <vPortExitCritical>
}
 80071e2:	bf00      	nop
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071f2:	f001 fe27 	bl	8008e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d102      	bne.n	8007204 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071fe:	2301      	movs	r3, #1
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	e001      	b.n	8007208 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007208:	f001 fe4c 	bl	8008ea4 <vPortExitCritical>

	return xReturn;
 800720c:	68fb      	ldr	r3, [r7, #12]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800721e:	f001 fe11 	bl	8008e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722a:	429a      	cmp	r2, r3
 800722c:	d102      	bne.n	8007234 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800722e:	2301      	movs	r3, #1
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	e001      	b.n	8007238 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007238:	f001 fe34 	bl	8008ea4 <vPortExitCritical>

	return xReturn;
 800723c:	68fb      	ldr	r3, [r7, #12]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	e014      	b.n	8007282 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007258:	4a0f      	ldr	r2, [pc, #60]	; (8007298 <vQueueAddToRegistry+0x50>)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10b      	bne.n	800727c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007264:	490c      	ldr	r1, [pc, #48]	; (8007298 <vQueueAddToRegistry+0x50>)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800726e:	4a0a      	ldr	r2, [pc, #40]	; (8007298 <vQueueAddToRegistry+0x50>)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	4413      	add	r3, r2
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800727a:	e006      	b.n	800728a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3301      	adds	r3, #1
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b07      	cmp	r3, #7
 8007286:	d9e7      	bls.n	8007258 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	20000bc4 	.word	0x20000bc4

0800729c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	e016      	b.n	80072d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80072aa:	4a10      	ldr	r2, [pc, #64]	; (80072ec <vQueueUnregisterQueue+0x50>)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	4413      	add	r3, r2
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d10b      	bne.n	80072d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80072ba:	4a0c      	ldr	r2, [pc, #48]	; (80072ec <vQueueUnregisterQueue+0x50>)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2100      	movs	r1, #0
 80072c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80072c4:	4a09      	ldr	r2, [pc, #36]	; (80072ec <vQueueUnregisterQueue+0x50>)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	4413      	add	r3, r2
 80072cc:	2200      	movs	r2, #0
 80072ce:	605a      	str	r2, [r3, #4]
				break;
 80072d0:	e006      	b.n	80072e0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3301      	adds	r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b07      	cmp	r3, #7
 80072dc:	d9e5      	bls.n	80072aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80072de:	bf00      	nop
 80072e0:	bf00      	nop
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	20000bc4 	.word	0x20000bc4

080072f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007300:	f001 fda0 	bl	8008e44 <vPortEnterCritical>
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800730a:	b25b      	sxtb	r3, r3
 800730c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007310:	d103      	bne.n	800731a <vQueueWaitForMessageRestricted+0x2a>
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007320:	b25b      	sxtb	r3, r3
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007326:	d103      	bne.n	8007330 <vQueueWaitForMessageRestricted+0x40>
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007330:	f001 fdb8 	bl	8008ea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	2b00      	cmp	r3, #0
 800733a:	d106      	bne.n	800734a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	3324      	adds	r3, #36	; 0x24
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	4618      	mov	r0, r3
 8007346:	f000 fd25 	bl	8007d94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800734a:	6978      	ldr	r0, [r7, #20]
 800734c:	f7ff fefb 	bl	8007146 <prvUnlockQueue>
	}
 8007350:	bf00      	nop
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08e      	sub	sp, #56	; 0x38
 800735c:	af04      	add	r7, sp, #16
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <xTaskCreateStatic+0x2a>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	623b      	str	r3, [r7, #32]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <xTaskCreateStatic+0x46>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	61fb      	str	r3, [r7, #28]
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800739e:	23b0      	movs	r3, #176	; 0xb0
 80073a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	2bb0      	cmp	r3, #176	; 0xb0
 80073a6:	d00a      	beq.n	80073be <xTaskCreateStatic+0x66>
	__asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	61bb      	str	r3, [r7, #24]
}
 80073ba:	bf00      	nop
 80073bc:	e7fe      	b.n	80073bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d01e      	beq.n	8007404 <xTaskCreateStatic+0xac>
 80073c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01b      	beq.n	8007404 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	2202      	movs	r2, #2
 80073da:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073de:	2300      	movs	r3, #0
 80073e0:	9303      	str	r3, [sp, #12]
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	9302      	str	r3, [sp, #8]
 80073e6:	f107 0314 	add.w	r3, r7, #20
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	68b9      	ldr	r1, [r7, #8]
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 f850 	bl	800749c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073fe:	f000 f8f9 	bl	80075f4 <prvAddNewTaskToReadyList>
 8007402:	e001      	b.n	8007408 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007408:	697b      	ldr	r3, [r7, #20]
	}
 800740a:	4618      	mov	r0, r3
 800740c:	3728      	adds	r7, #40	; 0x28
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007412:	b580      	push	{r7, lr}
 8007414:	b08c      	sub	sp, #48	; 0x30
 8007416:	af04      	add	r7, sp, #16
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	603b      	str	r3, [r7, #0]
 800741e:	4613      	mov	r3, r2
 8007420:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007422:	88fb      	ldrh	r3, [r7, #6]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4618      	mov	r0, r3
 8007428:	f001 fe2e 	bl	8009088 <pvPortMalloc>
 800742c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00e      	beq.n	8007452 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007434:	20b0      	movs	r0, #176	; 0xb0
 8007436:	f001 fe27 	bl	8009088 <pvPortMalloc>
 800743a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	631a      	str	r2, [r3, #48]	; 0x30
 8007448:	e005      	b.n	8007456 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800744a:	6978      	ldr	r0, [r7, #20]
 800744c:	f001 fe62 	bl	8009114 <vPortFree>
 8007450:	e001      	b.n	8007456 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d017      	beq.n	800748c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007464:	88fa      	ldrh	r2, [r7, #6]
 8007466:	2300      	movs	r3, #0
 8007468:	9303      	str	r3, [sp, #12]
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	9302      	str	r3, [sp, #8]
 800746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007470:	9301      	str	r3, [sp, #4]
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 f80e 	bl	800749c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007480:	69f8      	ldr	r0, [r7, #28]
 8007482:	f000 f8b7 	bl	80075f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007486:	2301      	movs	r3, #1
 8007488:	61bb      	str	r3, [r7, #24]
 800748a:	e002      	b.n	8007492 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800748c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007490:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007492:	69bb      	ldr	r3, [r7, #24]
	}
 8007494:	4618      	mov	r0, r3
 8007496:	3720      	adds	r7, #32
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	461a      	mov	r2, r3
 80074b4:	21a5      	movs	r1, #165	; 0xa5
 80074b6:	f002 f94d 	bl	8009754 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074c4:	3b01      	subs	r3, #1
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f023 0307 	bic.w	r3, r3, #7
 80074d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	617b      	str	r3, [r7, #20]
}
 80074f0:	bf00      	nop
 80074f2:	e7fe      	b.n	80074f2 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01f      	beq.n	8007540 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007500:	2300      	movs	r3, #0
 8007502:	61fb      	str	r3, [r7, #28]
 8007504:	e012      	b.n	800752c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	4413      	add	r3, r2
 800750c:	7819      	ldrb	r1, [r3, #0]
 800750e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	4413      	add	r3, r2
 8007514:	3334      	adds	r3, #52	; 0x34
 8007516:	460a      	mov	r2, r1
 8007518:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	4413      	add	r3, r2
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d006      	beq.n	8007534 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	3301      	adds	r3, #1
 800752a:	61fb      	str	r3, [r7, #28]
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b0f      	cmp	r3, #15
 8007530:	d9e9      	bls.n	8007506 <prvInitialiseNewTask+0x6a>
 8007532:	e000      	b.n	8007536 <prvInitialiseNewTask+0x9a>
			{
				break;
 8007534:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800753e:	e003      	b.n	8007548 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	2b37      	cmp	r3, #55	; 0x37
 800754c:	d901      	bls.n	8007552 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800754e:	2337      	movs	r3, #55	; 0x37
 8007550:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007556:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800755c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	2200      	movs	r2, #0
 8007562:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	3304      	adds	r3, #4
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe fd9d 	bl	80060a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	3318      	adds	r3, #24
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe fd98 	bl	80060a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800757c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800758c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	2200      	movs	r2, #0
 8007592:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	2200      	movs	r2, #0
 8007598:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	335c      	adds	r3, #92	; 0x5c
 80075a8:	224c      	movs	r2, #76	; 0x4c
 80075aa:	2100      	movs	r1, #0
 80075ac:	4618      	mov	r0, r3
 80075ae:	f002 f8d1 	bl	8009754 <memset>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	4a0c      	ldr	r2, [pc, #48]	; (80075e8 <prvInitialiseNewTask+0x14c>)
 80075b6:	661a      	str	r2, [r3, #96]	; 0x60
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	4a0c      	ldr	r2, [pc, #48]	; (80075ec <prvInitialiseNewTask+0x150>)
 80075bc:	665a      	str	r2, [r3, #100]	; 0x64
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	4a0b      	ldr	r2, [pc, #44]	; (80075f0 <prvInitialiseNewTask+0x154>)
 80075c2:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	68f9      	ldr	r1, [r7, #12]
 80075c8:	69b8      	ldr	r0, [r7, #24]
 80075ca:	f001 fb0d 	bl	8008be8 <pxPortInitialiseStack>
 80075ce:	4602      	mov	r2, r0
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075e0:	bf00      	nop
 80075e2:	3720      	adds	r7, #32
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20004ea8 	.word	0x20004ea8
 80075ec:	20004f10 	.word	0x20004f10
 80075f0:	20004f78 	.word	0x20004f78

080075f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075fc:	f001 fc22 	bl	8008e44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007600:	4b2d      	ldr	r3, [pc, #180]	; (80076b8 <prvAddNewTaskToReadyList+0xc4>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3301      	adds	r3, #1
 8007606:	4a2c      	ldr	r2, [pc, #176]	; (80076b8 <prvAddNewTaskToReadyList+0xc4>)
 8007608:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800760a:	4b2c      	ldr	r3, [pc, #176]	; (80076bc <prvAddNewTaskToReadyList+0xc8>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d109      	bne.n	8007626 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007612:	4a2a      	ldr	r2, [pc, #168]	; (80076bc <prvAddNewTaskToReadyList+0xc8>)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007618:	4b27      	ldr	r3, [pc, #156]	; (80076b8 <prvAddNewTaskToReadyList+0xc4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d110      	bne.n	8007642 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007620:	f000 fce4 	bl	8007fec <prvInitialiseTaskLists>
 8007624:	e00d      	b.n	8007642 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007626:	4b26      	ldr	r3, [pc, #152]	; (80076c0 <prvAddNewTaskToReadyList+0xcc>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d109      	bne.n	8007642 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800762e:	4b23      	ldr	r3, [pc, #140]	; (80076bc <prvAddNewTaskToReadyList+0xc8>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	429a      	cmp	r2, r3
 800763a:	d802      	bhi.n	8007642 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800763c:	4a1f      	ldr	r2, [pc, #124]	; (80076bc <prvAddNewTaskToReadyList+0xc8>)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007642:	4b20      	ldr	r3, [pc, #128]	; (80076c4 <prvAddNewTaskToReadyList+0xd0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3301      	adds	r3, #1
 8007648:	4a1e      	ldr	r2, [pc, #120]	; (80076c4 <prvAddNewTaskToReadyList+0xd0>)
 800764a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800764c:	4b1d      	ldr	r3, [pc, #116]	; (80076c4 <prvAddNewTaskToReadyList+0xd0>)
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007658:	4b1b      	ldr	r3, [pc, #108]	; (80076c8 <prvAddNewTaskToReadyList+0xd4>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d903      	bls.n	8007668 <prvAddNewTaskToReadyList+0x74>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	4a18      	ldr	r2, [pc, #96]	; (80076c8 <prvAddNewTaskToReadyList+0xd4>)
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <prvAddNewTaskToReadyList+0xd8>)
 8007676:	441a      	add	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3304      	adds	r3, #4
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f7fe fd1f 	bl	80060c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007684:	f001 fc0e 	bl	8008ea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007688:	4b0d      	ldr	r3, [pc, #52]	; (80076c0 <prvAddNewTaskToReadyList+0xcc>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00e      	beq.n	80076ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <prvAddNewTaskToReadyList+0xc8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	429a      	cmp	r2, r3
 800769c:	d207      	bcs.n	80076ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800769e:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <prvAddNewTaskToReadyList+0xdc>)
 80076a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076ae:	bf00      	nop
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	200010d8 	.word	0x200010d8
 80076bc:	20000c04 	.word	0x20000c04
 80076c0:	200010e4 	.word	0x200010e4
 80076c4:	200010f4 	.word	0x200010f4
 80076c8:	200010e0 	.word	0x200010e0
 80076cc:	20000c08 	.word	0x20000c08
 80076d0:	e000ed04 	.word	0xe000ed04

080076d4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08a      	sub	sp, #40	; 0x28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80076de:	2300      	movs	r3, #0
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10a      	bne.n	80076fe <vTaskDelayUntil+0x2a>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	617b      	str	r3, [r7, #20]
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <vTaskDelayUntil+0x46>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	613b      	str	r3, [r7, #16]
}
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800771a:	4b2a      	ldr	r3, [pc, #168]	; (80077c4 <vTaskDelayUntil+0xf0>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <vTaskDelayUntil+0x64>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	60fb      	str	r3, [r7, #12]
}
 8007734:	bf00      	nop
 8007736:	e7fe      	b.n	8007736 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007738:	f000 f8f0 	bl	800791c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800773c:	4b22      	ldr	r3, [pc, #136]	; (80077c8 <vTaskDelayUntil+0xf4>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	4413      	add	r3, r2
 800774a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6a3a      	ldr	r2, [r7, #32]
 8007752:	429a      	cmp	r2, r3
 8007754:	d20b      	bcs.n	800776e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	429a      	cmp	r2, r3
 800775e:	d211      	bcs.n	8007784 <vTaskDelayUntil+0xb0>
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	429a      	cmp	r2, r3
 8007766:	d90d      	bls.n	8007784 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007768:	2301      	movs	r3, #1
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
 800776c:	e00a      	b.n	8007784 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	429a      	cmp	r2, r3
 8007776:	d303      	bcc.n	8007780 <vTaskDelayUntil+0xac>
 8007778:	69fa      	ldr	r2, [r7, #28]
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	429a      	cmp	r2, r3
 800777e:	d901      	bls.n	8007784 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007780:	2301      	movs	r3, #1
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	2b00      	cmp	r3, #0
 800778e:	d006      	beq.n	800779e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2100      	movs	r1, #0
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fe83 	bl	80084a4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800779e:	f000 f8cb 	bl	8007938 <xTaskResumeAll>
 80077a2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d107      	bne.n	80077ba <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80077aa:	4b08      	ldr	r3, [pc, #32]	; (80077cc <vTaskDelayUntil+0xf8>)
 80077ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077ba:	bf00      	nop
 80077bc:	3728      	adds	r7, #40	; 0x28
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20001100 	.word	0x20001100
 80077c8:	200010dc 	.word	0x200010dc
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d017      	beq.n	8007812 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077e2:	4b13      	ldr	r3, [pc, #76]	; (8007830 <vTaskDelay+0x60>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <vTaskDelay+0x30>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	60bb      	str	r3, [r7, #8]
}
 80077fc:	bf00      	nop
 80077fe:	e7fe      	b.n	80077fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007800:	f000 f88c 	bl	800791c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007804:	2100      	movs	r1, #0
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fe4c 	bl	80084a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800780c:	f000 f894 	bl	8007938 <xTaskResumeAll>
 8007810:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d107      	bne.n	8007828 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007818:	4b06      	ldr	r3, [pc, #24]	; (8007834 <vTaskDelay+0x64>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007828:	bf00      	nop
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20001100 	.word	0x20001100
 8007834:	e000ed04 	.word	0xe000ed04

08007838 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08a      	sub	sp, #40	; 0x28
 800783c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007842:	2300      	movs	r3, #0
 8007844:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007846:	463a      	mov	r2, r7
 8007848:	1d39      	adds	r1, r7, #4
 800784a:	f107 0308 	add.w	r3, r7, #8
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe fbd6 	bl	8006000 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	9202      	str	r2, [sp, #8]
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	2300      	movs	r3, #0
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	2300      	movs	r3, #0
 8007864:	460a      	mov	r2, r1
 8007866:	4925      	ldr	r1, [pc, #148]	; (80078fc <vTaskStartScheduler+0xc4>)
 8007868:	4825      	ldr	r0, [pc, #148]	; (8007900 <vTaskStartScheduler+0xc8>)
 800786a:	f7ff fd75 	bl	8007358 <xTaskCreateStatic>
 800786e:	4603      	mov	r3, r0
 8007870:	4a24      	ldr	r2, [pc, #144]	; (8007904 <vTaskStartScheduler+0xcc>)
 8007872:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007874:	4b23      	ldr	r3, [pc, #140]	; (8007904 <vTaskStartScheduler+0xcc>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800787c:	2301      	movs	r3, #1
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	e001      	b.n	8007886 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007882:	2300      	movs	r3, #0
 8007884:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d102      	bne.n	8007892 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800788c:	f000 fe5e 	bl	800854c <xTimerCreateTimerTask>
 8007890:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d11d      	bne.n	80078d4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	613b      	str	r3, [r7, #16]
}
 80078aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078ac:	4b16      	ldr	r3, [pc, #88]	; (8007908 <vTaskStartScheduler+0xd0>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	335c      	adds	r3, #92	; 0x5c
 80078b2:	4a16      	ldr	r2, [pc, #88]	; (800790c <vTaskStartScheduler+0xd4>)
 80078b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078b6:	4b16      	ldr	r3, [pc, #88]	; (8007910 <vTaskStartScheduler+0xd8>)
 80078b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078be:	4b15      	ldr	r3, [pc, #84]	; (8007914 <vTaskStartScheduler+0xdc>)
 80078c0:	2201      	movs	r2, #1
 80078c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078c4:	4b14      	ldr	r3, [pc, #80]	; (8007918 <vTaskStartScheduler+0xe0>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80078ca:	f7f9 f9d9 	bl	8000c80 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078ce:	f001 fa17 	bl	8008d00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078d2:	e00e      	b.n	80078f2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078da:	d10a      	bne.n	80078f2 <vTaskStartScheduler+0xba>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	60fb      	str	r3, [r7, #12]
}
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <vTaskStartScheduler+0xb8>
}
 80078f2:	bf00      	nop
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	08009a24 	.word	0x08009a24
 8007900:	08007fbd 	.word	0x08007fbd
 8007904:	200010fc 	.word	0x200010fc
 8007908:	20000c04 	.word	0x20000c04
 800790c:	20000260 	.word	0x20000260
 8007910:	200010f8 	.word	0x200010f8
 8007914:	200010e4 	.word	0x200010e4
 8007918:	200010dc 	.word	0x200010dc

0800791c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007920:	4b04      	ldr	r3, [pc, #16]	; (8007934 <vTaskSuspendAll+0x18>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3301      	adds	r3, #1
 8007926:	4a03      	ldr	r2, [pc, #12]	; (8007934 <vTaskSuspendAll+0x18>)
 8007928:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800792a:	bf00      	nop
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	20001100 	.word	0x20001100

08007938 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007942:	2300      	movs	r3, #0
 8007944:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007946:	4b42      	ldr	r3, [pc, #264]	; (8007a50 <xTaskResumeAll+0x118>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <xTaskResumeAll+0x2c>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	603b      	str	r3, [r7, #0]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007964:	f001 fa6e 	bl	8008e44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007968:	4b39      	ldr	r3, [pc, #228]	; (8007a50 <xTaskResumeAll+0x118>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3b01      	subs	r3, #1
 800796e:	4a38      	ldr	r2, [pc, #224]	; (8007a50 <xTaskResumeAll+0x118>)
 8007970:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007972:	4b37      	ldr	r3, [pc, #220]	; (8007a50 <xTaskResumeAll+0x118>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d162      	bne.n	8007a40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800797a:	4b36      	ldr	r3, [pc, #216]	; (8007a54 <xTaskResumeAll+0x11c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d05e      	beq.n	8007a40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007982:	e02f      	b.n	80079e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007984:	4b34      	ldr	r3, [pc, #208]	; (8007a58 <xTaskResumeAll+0x120>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3318      	adds	r3, #24
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe fbf3 	bl	800617c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3304      	adds	r3, #4
 800799a:	4618      	mov	r0, r3
 800799c:	f7fe fbee 	bl	800617c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a4:	4b2d      	ldr	r3, [pc, #180]	; (8007a5c <xTaskResumeAll+0x124>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d903      	bls.n	80079b4 <xTaskResumeAll+0x7c>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b0:	4a2a      	ldr	r2, [pc, #168]	; (8007a5c <xTaskResumeAll+0x124>)
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4a27      	ldr	r2, [pc, #156]	; (8007a60 <xTaskResumeAll+0x128>)
 80079c2:	441a      	add	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4619      	mov	r1, r3
 80079ca:	4610      	mov	r0, r2
 80079cc:	f7fe fb79 	bl	80060c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d4:	4b23      	ldr	r3, [pc, #140]	; (8007a64 <xTaskResumeAll+0x12c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	429a      	cmp	r2, r3
 80079dc:	d302      	bcc.n	80079e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079de:	4b22      	ldr	r3, [pc, #136]	; (8007a68 <xTaskResumeAll+0x130>)
 80079e0:	2201      	movs	r2, #1
 80079e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079e4:	4b1c      	ldr	r3, [pc, #112]	; (8007a58 <xTaskResumeAll+0x120>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1cb      	bne.n	8007984 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079f2:	f000 fb9d 	bl	8008130 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079f6:	4b1d      	ldr	r3, [pc, #116]	; (8007a6c <xTaskResumeAll+0x134>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d010      	beq.n	8007a24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a02:	f000 f859 	bl	8007ab8 <xTaskIncrementTick>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a0c:	4b16      	ldr	r3, [pc, #88]	; (8007a68 <xTaskResumeAll+0x130>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1f1      	bne.n	8007a02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a1e:	4b13      	ldr	r3, [pc, #76]	; (8007a6c <xTaskResumeAll+0x134>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a24:	4b10      	ldr	r3, [pc, #64]	; (8007a68 <xTaskResumeAll+0x130>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d009      	beq.n	8007a40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a30:	4b0f      	ldr	r3, [pc, #60]	; (8007a70 <xTaskResumeAll+0x138>)
 8007a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a40:	f001 fa30 	bl	8008ea4 <vPortExitCritical>

	return xAlreadyYielded;
 8007a44:	68bb      	ldr	r3, [r7, #8]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20001100 	.word	0x20001100
 8007a54:	200010d8 	.word	0x200010d8
 8007a58:	20001098 	.word	0x20001098
 8007a5c:	200010e0 	.word	0x200010e0
 8007a60:	20000c08 	.word	0x20000c08
 8007a64:	20000c04 	.word	0x20000c04
 8007a68:	200010ec 	.word	0x200010ec
 8007a6c:	200010e8 	.word	0x200010e8
 8007a70:	e000ed04 	.word	0xe000ed04

08007a74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a7a:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <xTaskGetTickCount+0x1c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a80:	687b      	ldr	r3, [r7, #4]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	200010dc 	.word	0x200010dc

08007a94 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a9a:	f001 fab5 	bl	8009008 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007aa2:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <xTaskGetTickCountFromISR+0x20>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007aa8:	683b      	ldr	r3, [r7, #0]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	200010dc 	.word	0x200010dc

08007ab8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ac2:	4b4f      	ldr	r3, [pc, #316]	; (8007c00 <xTaskIncrementTick+0x148>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f040 808f 	bne.w	8007bea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007acc:	4b4d      	ldr	r3, [pc, #308]	; (8007c04 <xTaskIncrementTick+0x14c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ad4:	4a4b      	ldr	r2, [pc, #300]	; (8007c04 <xTaskIncrementTick+0x14c>)
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d120      	bne.n	8007b22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ae0:	4b49      	ldr	r3, [pc, #292]	; (8007c08 <xTaskIncrementTick+0x150>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <xTaskIncrementTick+0x48>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	603b      	str	r3, [r7, #0]
}
 8007afc:	bf00      	nop
 8007afe:	e7fe      	b.n	8007afe <xTaskIncrementTick+0x46>
 8007b00:	4b41      	ldr	r3, [pc, #260]	; (8007c08 <xTaskIncrementTick+0x150>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	4b41      	ldr	r3, [pc, #260]	; (8007c0c <xTaskIncrementTick+0x154>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a3f      	ldr	r2, [pc, #252]	; (8007c08 <xTaskIncrementTick+0x150>)
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	4a3f      	ldr	r2, [pc, #252]	; (8007c0c <xTaskIncrementTick+0x154>)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6013      	str	r3, [r2, #0]
 8007b14:	4b3e      	ldr	r3, [pc, #248]	; (8007c10 <xTaskIncrementTick+0x158>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	4a3d      	ldr	r2, [pc, #244]	; (8007c10 <xTaskIncrementTick+0x158>)
 8007b1c:	6013      	str	r3, [r2, #0]
 8007b1e:	f000 fb07 	bl	8008130 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b22:	4b3c      	ldr	r3, [pc, #240]	; (8007c14 <xTaskIncrementTick+0x15c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d349      	bcc.n	8007bc0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b2c:	4b36      	ldr	r3, [pc, #216]	; (8007c08 <xTaskIncrementTick+0x150>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d104      	bne.n	8007b40 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b36:	4b37      	ldr	r3, [pc, #220]	; (8007c14 <xTaskIncrementTick+0x15c>)
 8007b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b3c:	601a      	str	r2, [r3, #0]
					break;
 8007b3e:	e03f      	b.n	8007bc0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b40:	4b31      	ldr	r3, [pc, #196]	; (8007c08 <xTaskIncrementTick+0x150>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d203      	bcs.n	8007b60 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b58:	4a2e      	ldr	r2, [pc, #184]	; (8007c14 <xTaskIncrementTick+0x15c>)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b5e:	e02f      	b.n	8007bc0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	3304      	adds	r3, #4
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fe fb09 	bl	800617c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d004      	beq.n	8007b7c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	3318      	adds	r3, #24
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe fb00 	bl	800617c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b80:	4b25      	ldr	r3, [pc, #148]	; (8007c18 <xTaskIncrementTick+0x160>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d903      	bls.n	8007b90 <xTaskIncrementTick+0xd8>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	4a22      	ldr	r2, [pc, #136]	; (8007c18 <xTaskIncrementTick+0x160>)
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4a1f      	ldr	r2, [pc, #124]	; (8007c1c <xTaskIncrementTick+0x164>)
 8007b9e:	441a      	add	r2, r3
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	f7fe fa8b 	bl	80060c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb0:	4b1b      	ldr	r3, [pc, #108]	; (8007c20 <xTaskIncrementTick+0x168>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d3b8      	bcc.n	8007b2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bbe:	e7b5      	b.n	8007b2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bc0:	4b17      	ldr	r3, [pc, #92]	; (8007c20 <xTaskIncrementTick+0x168>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc6:	4915      	ldr	r1, [pc, #84]	; (8007c1c <xTaskIncrementTick+0x164>)
 8007bc8:	4613      	mov	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	440b      	add	r3, r1
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d901      	bls.n	8007bdc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007bdc:	4b11      	ldr	r3, [pc, #68]	; (8007c24 <xTaskIncrementTick+0x16c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d007      	beq.n	8007bf4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	e004      	b.n	8007bf4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007bea:	4b0f      	ldr	r3, [pc, #60]	; (8007c28 <xTaskIncrementTick+0x170>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	4a0d      	ldr	r2, [pc, #52]	; (8007c28 <xTaskIncrementTick+0x170>)
 8007bf2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007bf4:	697b      	ldr	r3, [r7, #20]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	20001100 	.word	0x20001100
 8007c04:	200010dc 	.word	0x200010dc
 8007c08:	20001090 	.word	0x20001090
 8007c0c:	20001094 	.word	0x20001094
 8007c10:	200010f0 	.word	0x200010f0
 8007c14:	200010f8 	.word	0x200010f8
 8007c18:	200010e0 	.word	0x200010e0
 8007c1c:	20000c08 	.word	0x20000c08
 8007c20:	20000c04 	.word	0x20000c04
 8007c24:	200010ec 	.word	0x200010ec
 8007c28:	200010e8 	.word	0x200010e8

08007c2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c32:	4b3e      	ldr	r3, [pc, #248]	; (8007d2c <vTaskSwitchContext+0x100>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c3a:	4b3d      	ldr	r3, [pc, #244]	; (8007d30 <vTaskSwitchContext+0x104>)
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c40:	e070      	b.n	8007d24 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 8007c42:	4b3b      	ldr	r3, [pc, #236]	; (8007d30 <vTaskSwitchContext+0x104>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007c48:	f7f9 f834 	bl	8000cb4 <getRunTimeCounterValue>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	4a39      	ldr	r2, [pc, #228]	; (8007d34 <vTaskSwitchContext+0x108>)
 8007c50:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007c52:	4b38      	ldr	r3, [pc, #224]	; (8007d34 <vTaskSwitchContext+0x108>)
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	4b38      	ldr	r3, [pc, #224]	; (8007d38 <vTaskSwitchContext+0x10c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d909      	bls.n	8007c72 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007c5e:	4b37      	ldr	r3, [pc, #220]	; (8007d3c <vTaskSwitchContext+0x110>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8007c64:	4a33      	ldr	r2, [pc, #204]	; (8007d34 <vTaskSwitchContext+0x108>)
 8007c66:	6810      	ldr	r0, [r2, #0]
 8007c68:	4a33      	ldr	r2, [pc, #204]	; (8007d38 <vTaskSwitchContext+0x10c>)
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	1a82      	subs	r2, r0, r2
 8007c6e:	440a      	add	r2, r1
 8007c70:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007c72:	4b30      	ldr	r3, [pc, #192]	; (8007d34 <vTaskSwitchContext+0x108>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a30      	ldr	r2, [pc, #192]	; (8007d38 <vTaskSwitchContext+0x10c>)
 8007c78:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007c7a:	4b30      	ldr	r3, [pc, #192]	; (8007d3c <vTaskSwitchContext+0x110>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	4b2e      	ldr	r3, [pc, #184]	; (8007d3c <vTaskSwitchContext+0x110>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d808      	bhi.n	8007c9c <vTaskSwitchContext+0x70>
 8007c8a:	4b2c      	ldr	r3, [pc, #176]	; (8007d3c <vTaskSwitchContext+0x110>)
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	4b2b      	ldr	r3, [pc, #172]	; (8007d3c <vTaskSwitchContext+0x110>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3334      	adds	r3, #52	; 0x34
 8007c94:	4619      	mov	r1, r3
 8007c96:	4610      	mov	r0, r2
 8007c98:	f7f9 f818 	bl	8000ccc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c9c:	4b28      	ldr	r3, [pc, #160]	; (8007d40 <vTaskSwitchContext+0x114>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60fb      	str	r3, [r7, #12]
 8007ca2:	e010      	b.n	8007cc6 <vTaskSwitchContext+0x9a>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10a      	bne.n	8007cc0 <vTaskSwitchContext+0x94>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	607b      	str	r3, [r7, #4]
}
 8007cbc:	bf00      	nop
 8007cbe:	e7fe      	b.n	8007cbe <vTaskSwitchContext+0x92>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	60fb      	str	r3, [r7, #12]
 8007cc6:	491f      	ldr	r1, [pc, #124]	; (8007d44 <vTaskSwitchContext+0x118>)
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0e4      	beq.n	8007ca4 <vTaskSwitchContext+0x78>
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4a17      	ldr	r2, [pc, #92]	; (8007d44 <vTaskSwitchContext+0x118>)
 8007ce6:	4413      	add	r3, r2
 8007ce8:	60bb      	str	r3, [r7, #8]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	605a      	str	r2, [r3, #4]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d104      	bne.n	8007d0a <vTaskSwitchContext+0xde>
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	605a      	str	r2, [r3, #4]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	4a0a      	ldr	r2, [pc, #40]	; (8007d3c <vTaskSwitchContext+0x110>)
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	4a0a      	ldr	r2, [pc, #40]	; (8007d40 <vTaskSwitchContext+0x114>)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d1a:	4b08      	ldr	r3, [pc, #32]	; (8007d3c <vTaskSwitchContext+0x110>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	335c      	adds	r3, #92	; 0x5c
 8007d20:	4a09      	ldr	r2, [pc, #36]	; (8007d48 <vTaskSwitchContext+0x11c>)
 8007d22:	6013      	str	r3, [r2, #0]
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20001100 	.word	0x20001100
 8007d30:	200010ec 	.word	0x200010ec
 8007d34:	20001108 	.word	0x20001108
 8007d38:	20001104 	.word	0x20001104
 8007d3c:	20000c04 	.word	0x20000c04
 8007d40:	200010e0 	.word	0x200010e0
 8007d44:	20000c08 	.word	0x20000c08
 8007d48:	20000260 	.word	0x20000260

08007d4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10a      	bne.n	8007d72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	60fb      	str	r3, [r7, #12]
}
 8007d6e:	bf00      	nop
 8007d70:	e7fe      	b.n	8007d70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d72:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <vTaskPlaceOnEventList+0x44>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3318      	adds	r3, #24
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fe f9c5 	bl	800610a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d80:	2101      	movs	r1, #1
 8007d82:	6838      	ldr	r0, [r7, #0]
 8007d84:	f000 fb8e 	bl	80084a4 <prvAddCurrentTaskToDelayedList>
}
 8007d88:	bf00      	nop
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	20000c04 	.word	0x20000c04

08007d94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	617b      	str	r3, [r7, #20]
}
 8007db8:	bf00      	nop
 8007dba:	e7fe      	b.n	8007dba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3318      	adds	r3, #24
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7fe f97c 	bl	80060c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d002      	beq.n	8007dd6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	68b8      	ldr	r0, [r7, #8]
 8007dda:	f000 fb63 	bl	80084a4 <prvAddCurrentTaskToDelayedList>
	}
 8007dde:	bf00      	nop
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	20000c04 	.word	0x20000c04

08007dec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10a      	bne.n	8007e18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	60fb      	str	r3, [r7, #12]
}
 8007e14:	bf00      	nop
 8007e16:	e7fe      	b.n	8007e16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	3318      	adds	r3, #24
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe f9ad 	bl	800617c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e22:	4b1e      	ldr	r3, [pc, #120]	; (8007e9c <xTaskRemoveFromEventList+0xb0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d11d      	bne.n	8007e66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fe f9a4 	bl	800617c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e38:	4b19      	ldr	r3, [pc, #100]	; (8007ea0 <xTaskRemoveFromEventList+0xb4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d903      	bls.n	8007e48 <xTaskRemoveFromEventList+0x5c>
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	4a16      	ldr	r2, [pc, #88]	; (8007ea0 <xTaskRemoveFromEventList+0xb4>)
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4a13      	ldr	r2, [pc, #76]	; (8007ea4 <xTaskRemoveFromEventList+0xb8>)
 8007e56:	441a      	add	r2, r3
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	f7fe f92f 	bl	80060c2 <vListInsertEnd>
 8007e64:	e005      	b.n	8007e72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	3318      	adds	r3, #24
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	480e      	ldr	r0, [pc, #56]	; (8007ea8 <xTaskRemoveFromEventList+0xbc>)
 8007e6e:	f7fe f928 	bl	80060c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e76:	4b0d      	ldr	r3, [pc, #52]	; (8007eac <xTaskRemoveFromEventList+0xc0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d905      	bls.n	8007e8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e80:	2301      	movs	r3, #1
 8007e82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e84:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <xTaskRemoveFromEventList+0xc4>)
 8007e86:	2201      	movs	r2, #1
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e001      	b.n	8007e90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e90:	697b      	ldr	r3, [r7, #20]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20001100 	.word	0x20001100
 8007ea0:	200010e0 	.word	0x200010e0
 8007ea4:	20000c08 	.word	0x20000c08
 8007ea8:	20001098 	.word	0x20001098
 8007eac:	20000c04 	.word	0x20000c04
 8007eb0:	200010ec 	.word	0x200010ec

08007eb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ebc:	4b06      	ldr	r3, [pc, #24]	; (8007ed8 <vTaskInternalSetTimeOutState+0x24>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ec4:	4b05      	ldr	r3, [pc, #20]	; (8007edc <vTaskInternalSetTimeOutState+0x28>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	605a      	str	r2, [r3, #4]
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	200010f0 	.word	0x200010f0
 8007edc:	200010dc 	.word	0x200010dc

08007ee0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10a      	bne.n	8007f06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	613b      	str	r3, [r7, #16]
}
 8007f02:	bf00      	nop
 8007f04:	e7fe      	b.n	8007f04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10a      	bne.n	8007f22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	60fb      	str	r3, [r7, #12]
}
 8007f1e:	bf00      	nop
 8007f20:	e7fe      	b.n	8007f20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f22:	f000 ff8f 	bl	8008e44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f26:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <xTaskCheckForTimeOut+0xbc>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f3e:	d102      	bne.n	8007f46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61fb      	str	r3, [r7, #28]
 8007f44:	e023      	b.n	8007f8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	4b15      	ldr	r3, [pc, #84]	; (8007fa0 <xTaskCheckForTimeOut+0xc0>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d007      	beq.n	8007f62 <xTaskCheckForTimeOut+0x82>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d302      	bcc.n	8007f62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	61fb      	str	r3, [r7, #28]
 8007f60:	e015      	b.n	8007f8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d20b      	bcs.n	8007f84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	1ad2      	subs	r2, r2, r3
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7ff ff9b 	bl	8007eb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	61fb      	str	r3, [r7, #28]
 8007f82:	e004      	b.n	8007f8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f8e:	f000 ff89 	bl	8008ea4 <vPortExitCritical>

	return xReturn;
 8007f92:	69fb      	ldr	r3, [r7, #28]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3720      	adds	r7, #32
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	200010dc 	.word	0x200010dc
 8007fa0:	200010f0 	.word	0x200010f0

08007fa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fa8:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <vTaskMissedYield+0x14>)
 8007faa:	2201      	movs	r2, #1
 8007fac:	601a      	str	r2, [r3, #0]
}
 8007fae:	bf00      	nop
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	200010ec 	.word	0x200010ec

08007fbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fc4:	f000 f852 	bl	800806c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fc8:	4b06      	ldr	r3, [pc, #24]	; (8007fe4 <prvIdleTask+0x28>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d9f9      	bls.n	8007fc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fd0:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <prvIdleTask+0x2c>)
 8007fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fe0:	e7f0      	b.n	8007fc4 <prvIdleTask+0x8>
 8007fe2:	bf00      	nop
 8007fe4:	20000c08 	.word	0x20000c08
 8007fe8:	e000ed04 	.word	0xe000ed04

08007fec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	607b      	str	r3, [r7, #4]
 8007ff6:	e00c      	b.n	8008012 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4a12      	ldr	r2, [pc, #72]	; (800804c <prvInitialiseTaskLists+0x60>)
 8008004:	4413      	add	r3, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe f82e 	bl	8006068 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3301      	adds	r3, #1
 8008010:	607b      	str	r3, [r7, #4]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b37      	cmp	r3, #55	; 0x37
 8008016:	d9ef      	bls.n	8007ff8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008018:	480d      	ldr	r0, [pc, #52]	; (8008050 <prvInitialiseTaskLists+0x64>)
 800801a:	f7fe f825 	bl	8006068 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800801e:	480d      	ldr	r0, [pc, #52]	; (8008054 <prvInitialiseTaskLists+0x68>)
 8008020:	f7fe f822 	bl	8006068 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008024:	480c      	ldr	r0, [pc, #48]	; (8008058 <prvInitialiseTaskLists+0x6c>)
 8008026:	f7fe f81f 	bl	8006068 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800802a:	480c      	ldr	r0, [pc, #48]	; (800805c <prvInitialiseTaskLists+0x70>)
 800802c:	f7fe f81c 	bl	8006068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008030:	480b      	ldr	r0, [pc, #44]	; (8008060 <prvInitialiseTaskLists+0x74>)
 8008032:	f7fe f819 	bl	8006068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008036:	4b0b      	ldr	r3, [pc, #44]	; (8008064 <prvInitialiseTaskLists+0x78>)
 8008038:	4a05      	ldr	r2, [pc, #20]	; (8008050 <prvInitialiseTaskLists+0x64>)
 800803a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800803c:	4b0a      	ldr	r3, [pc, #40]	; (8008068 <prvInitialiseTaskLists+0x7c>)
 800803e:	4a05      	ldr	r2, [pc, #20]	; (8008054 <prvInitialiseTaskLists+0x68>)
 8008040:	601a      	str	r2, [r3, #0]
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20000c08 	.word	0x20000c08
 8008050:	20001068 	.word	0x20001068
 8008054:	2000107c 	.word	0x2000107c
 8008058:	20001098 	.word	0x20001098
 800805c:	200010ac 	.word	0x200010ac
 8008060:	200010c4 	.word	0x200010c4
 8008064:	20001090 	.word	0x20001090
 8008068:	20001094 	.word	0x20001094

0800806c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008072:	e019      	b.n	80080a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008074:	f000 fee6 	bl	8008e44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008078:	4b10      	ldr	r3, [pc, #64]	; (80080bc <prvCheckTasksWaitingTermination+0x50>)
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3304      	adds	r3, #4
 8008084:	4618      	mov	r0, r3
 8008086:	f7fe f879 	bl	800617c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800808a:	4b0d      	ldr	r3, [pc, #52]	; (80080c0 <prvCheckTasksWaitingTermination+0x54>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3b01      	subs	r3, #1
 8008090:	4a0b      	ldr	r2, [pc, #44]	; (80080c0 <prvCheckTasksWaitingTermination+0x54>)
 8008092:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008094:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <prvCheckTasksWaitingTermination+0x58>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3b01      	subs	r3, #1
 800809a:	4a0a      	ldr	r2, [pc, #40]	; (80080c4 <prvCheckTasksWaitingTermination+0x58>)
 800809c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800809e:	f000 ff01 	bl	8008ea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f810 	bl	80080c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080a8:	4b06      	ldr	r3, [pc, #24]	; (80080c4 <prvCheckTasksWaitingTermination+0x58>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e1      	bne.n	8008074 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080b0:	bf00      	nop
 80080b2:	bf00      	nop
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	200010ac 	.word	0x200010ac
 80080c0:	200010d8 	.word	0x200010d8
 80080c4:	200010c0 	.word	0x200010c0

080080c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	335c      	adds	r3, #92	; 0x5c
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 fb45 	bl	8009764 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d108      	bne.n	80080f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e8:	4618      	mov	r0, r3
 80080ea:	f001 f813 	bl	8009114 <vPortFree>
				vPortFree( pxTCB );
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 f810 	bl	8009114 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080f4:	e018      	b.n	8008128 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d103      	bne.n	8008108 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f001 f807 	bl	8009114 <vPortFree>
	}
 8008106:	e00f      	b.n	8008128 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800810e:	2b02      	cmp	r3, #2
 8008110:	d00a      	beq.n	8008128 <prvDeleteTCB+0x60>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	60fb      	str	r3, [r7, #12]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <prvDeleteTCB+0x5e>
	}
 8008128:	bf00      	nop
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008136:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <prvResetNextTaskUnblockTime+0x38>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d104      	bne.n	800814a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008140:	4b0a      	ldr	r3, [pc, #40]	; (800816c <prvResetNextTaskUnblockTime+0x3c>)
 8008142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008146:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008148:	e008      	b.n	800815c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800814a:	4b07      	ldr	r3, [pc, #28]	; (8008168 <prvResetNextTaskUnblockTime+0x38>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	4a04      	ldr	r2, [pc, #16]	; (800816c <prvResetNextTaskUnblockTime+0x3c>)
 800815a:	6013      	str	r3, [r2, #0]
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	20001090 	.word	0x20001090
 800816c:	200010f8 	.word	0x200010f8

08008170 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008176:	4b05      	ldr	r3, [pc, #20]	; (800818c <xTaskGetCurrentTaskHandle+0x1c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800817c:	687b      	ldr	r3, [r7, #4]
	}
 800817e:	4618      	mov	r0, r3
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	20000c04 	.word	0x20000c04

08008190 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008196:	4b0b      	ldr	r3, [pc, #44]	; (80081c4 <xTaskGetSchedulerState+0x34>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d102      	bne.n	80081a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800819e:	2301      	movs	r3, #1
 80081a0:	607b      	str	r3, [r7, #4]
 80081a2:	e008      	b.n	80081b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081a4:	4b08      	ldr	r3, [pc, #32]	; (80081c8 <xTaskGetSchedulerState+0x38>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081ac:	2302      	movs	r3, #2
 80081ae:	607b      	str	r3, [r7, #4]
 80081b0:	e001      	b.n	80081b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081b2:	2300      	movs	r3, #0
 80081b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081b6:	687b      	ldr	r3, [r7, #4]
	}
 80081b8:	4618      	mov	r0, r3
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	200010e4 	.word	0x200010e4
 80081c8:	20001100 	.word	0x20001100

080081cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80081d8:	2300      	movs	r3, #0
 80081da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d051      	beq.n	8008286 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e6:	4b2a      	ldr	r3, [pc, #168]	; (8008290 <xTaskPriorityInherit+0xc4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d241      	bcs.n	8008274 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	db06      	blt.n	8008206 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f8:	4b25      	ldr	r3, [pc, #148]	; (8008290 <xTaskPriorityInherit+0xc4>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	6959      	ldr	r1, [r3, #20]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4a1f      	ldr	r2, [pc, #124]	; (8008294 <xTaskPriorityInherit+0xc8>)
 8008218:	4413      	add	r3, r2
 800821a:	4299      	cmp	r1, r3
 800821c:	d122      	bne.n	8008264 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	3304      	adds	r3, #4
 8008222:	4618      	mov	r0, r3
 8008224:	f7fd ffaa 	bl	800617c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008228:	4b19      	ldr	r3, [pc, #100]	; (8008290 <xTaskPriorityInherit+0xc4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008236:	4b18      	ldr	r3, [pc, #96]	; (8008298 <xTaskPriorityInherit+0xcc>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	429a      	cmp	r2, r3
 800823c:	d903      	bls.n	8008246 <xTaskPriorityInherit+0x7a>
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008242:	4a15      	ldr	r2, [pc, #84]	; (8008298 <xTaskPriorityInherit+0xcc>)
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4a10      	ldr	r2, [pc, #64]	; (8008294 <xTaskPriorityInherit+0xc8>)
 8008254:	441a      	add	r2, r3
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	3304      	adds	r3, #4
 800825a:	4619      	mov	r1, r3
 800825c:	4610      	mov	r0, r2
 800825e:	f7fd ff30 	bl	80060c2 <vListInsertEnd>
 8008262:	e004      	b.n	800826e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008264:	4b0a      	ldr	r3, [pc, #40]	; (8008290 <xTaskPriorityInherit+0xc4>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800826e:	2301      	movs	r3, #1
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	e008      	b.n	8008286 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008278:	4b05      	ldr	r3, [pc, #20]	; (8008290 <xTaskPriorityInherit+0xc4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	429a      	cmp	r2, r3
 8008280:	d201      	bcs.n	8008286 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008282:	2301      	movs	r3, #1
 8008284:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008286:	68fb      	ldr	r3, [r7, #12]
	}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20000c04 	.word	0x20000c04
 8008294:	20000c08 	.word	0x20000c08
 8008298:	200010e0 	.word	0x200010e0

0800829c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082a8:	2300      	movs	r3, #0
 80082aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d056      	beq.n	8008360 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082b2:	4b2e      	ldr	r3, [pc, #184]	; (800836c <xTaskPriorityDisinherit+0xd0>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d00a      	beq.n	80082d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	60fb      	str	r3, [r7, #12]
}
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	60bb      	str	r3, [r7, #8]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f4:	1e5a      	subs	r2, r3, #1
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008302:	429a      	cmp	r2, r3
 8008304:	d02c      	beq.n	8008360 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830a:	2b00      	cmp	r3, #0
 800830c:	d128      	bne.n	8008360 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	3304      	adds	r3, #4
 8008312:	4618      	mov	r0, r3
 8008314:	f7fd ff32 	bl	800617c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008324:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008330:	4b0f      	ldr	r3, [pc, #60]	; (8008370 <xTaskPriorityDisinherit+0xd4>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d903      	bls.n	8008340 <xTaskPriorityDisinherit+0xa4>
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	4a0c      	ldr	r2, [pc, #48]	; (8008370 <xTaskPriorityDisinherit+0xd4>)
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4a09      	ldr	r2, [pc, #36]	; (8008374 <xTaskPriorityDisinherit+0xd8>)
 800834e:	441a      	add	r2, r3
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	3304      	adds	r3, #4
 8008354:	4619      	mov	r1, r3
 8008356:	4610      	mov	r0, r2
 8008358:	f7fd feb3 	bl	80060c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800835c:	2301      	movs	r3, #1
 800835e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008360:	697b      	ldr	r3, [r7, #20]
	}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	20000c04 	.word	0x20000c04
 8008370:	200010e0 	.word	0x200010e0
 8008374:	20000c08 	.word	0x20000c08

08008378 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008386:	2301      	movs	r3, #1
 8008388:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d06a      	beq.n	8008466 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	60fb      	str	r3, [r7, #12]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d902      	bls.n	80083be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	61fb      	str	r3, [r7, #28]
 80083bc:	e002      	b.n	80083c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	69fa      	ldr	r2, [r7, #28]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d04b      	beq.n	8008466 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d146      	bne.n	8008466 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80083d8:	4b25      	ldr	r3, [pc, #148]	; (8008470 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d10a      	bne.n	80083f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	60bb      	str	r3, [r7, #8]
}
 80083f4:	bf00      	nop
 80083f6:	e7fe      	b.n	80083f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	69fa      	ldr	r2, [r7, #28]
 8008402:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	2b00      	cmp	r3, #0
 800840a:	db04      	blt.n	8008416 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	6959      	ldr	r1, [r3, #20]
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4a13      	ldr	r2, [pc, #76]	; (8008474 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008426:	4413      	add	r3, r2
 8008428:	4299      	cmp	r1, r3
 800842a:	d11c      	bne.n	8008466 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	3304      	adds	r3, #4
 8008430:	4618      	mov	r0, r3
 8008432:	f7fd fea3 	bl	800617c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843a:	4b0f      	ldr	r3, [pc, #60]	; (8008478 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	429a      	cmp	r2, r3
 8008440:	d903      	bls.n	800844a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008446:	4a0c      	ldr	r2, [pc, #48]	; (8008478 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4a07      	ldr	r2, [pc, #28]	; (8008474 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008458:	441a      	add	r2, r3
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	3304      	adds	r3, #4
 800845e:	4619      	mov	r1, r3
 8008460:	4610      	mov	r0, r2
 8008462:	f7fd fe2e 	bl	80060c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008466:	bf00      	nop
 8008468:	3720      	adds	r7, #32
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20000c04 	.word	0x20000c04
 8008474:	20000c08 	.word	0x20000c08
 8008478:	200010e0 	.word	0x200010e0

0800847c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800847c:	b480      	push	{r7}
 800847e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008480:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d004      	beq.n	8008492 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008488:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800848e:	3201      	adds	r2, #1
 8008490:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8008492:	4b03      	ldr	r3, [pc, #12]	; (80084a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008494:	681b      	ldr	r3, [r3, #0]
	}
 8008496:	4618      	mov	r0, r3
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	20000c04 	.word	0x20000c04

080084a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084ae:	4b21      	ldr	r3, [pc, #132]	; (8008534 <prvAddCurrentTaskToDelayedList+0x90>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084b4:	4b20      	ldr	r3, [pc, #128]	; (8008538 <prvAddCurrentTaskToDelayedList+0x94>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3304      	adds	r3, #4
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fd fe5e 	bl	800617c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084c6:	d10a      	bne.n	80084de <prvAddCurrentTaskToDelayedList+0x3a>
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d007      	beq.n	80084de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084ce:	4b1a      	ldr	r3, [pc, #104]	; (8008538 <prvAddCurrentTaskToDelayedList+0x94>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3304      	adds	r3, #4
 80084d4:	4619      	mov	r1, r3
 80084d6:	4819      	ldr	r0, [pc, #100]	; (800853c <prvAddCurrentTaskToDelayedList+0x98>)
 80084d8:	f7fd fdf3 	bl	80060c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084dc:	e026      	b.n	800852c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084e6:	4b14      	ldr	r3, [pc, #80]	; (8008538 <prvAddCurrentTaskToDelayedList+0x94>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d209      	bcs.n	800850a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084f6:	4b12      	ldr	r3, [pc, #72]	; (8008540 <prvAddCurrentTaskToDelayedList+0x9c>)
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	4b0f      	ldr	r3, [pc, #60]	; (8008538 <prvAddCurrentTaskToDelayedList+0x94>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3304      	adds	r3, #4
 8008500:	4619      	mov	r1, r3
 8008502:	4610      	mov	r0, r2
 8008504:	f7fd fe01 	bl	800610a <vListInsert>
}
 8008508:	e010      	b.n	800852c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800850a:	4b0e      	ldr	r3, [pc, #56]	; (8008544 <prvAddCurrentTaskToDelayedList+0xa0>)
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <prvAddCurrentTaskToDelayedList+0x94>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3304      	adds	r3, #4
 8008514:	4619      	mov	r1, r3
 8008516:	4610      	mov	r0, r2
 8008518:	f7fd fdf7 	bl	800610a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800851c:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <prvAddCurrentTaskToDelayedList+0xa4>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	429a      	cmp	r2, r3
 8008524:	d202      	bcs.n	800852c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008526:	4a08      	ldr	r2, [pc, #32]	; (8008548 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	6013      	str	r3, [r2, #0]
}
 800852c:	bf00      	nop
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	200010dc 	.word	0x200010dc
 8008538:	20000c04 	.word	0x20000c04
 800853c:	200010c4 	.word	0x200010c4
 8008540:	20001094 	.word	0x20001094
 8008544:	20001090 	.word	0x20001090
 8008548:	200010f8 	.word	0x200010f8

0800854c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b08a      	sub	sp, #40	; 0x28
 8008550:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008556:	f000 fb07 	bl	8008b68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800855a:	4b1c      	ldr	r3, [pc, #112]	; (80085cc <xTimerCreateTimerTask+0x80>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d021      	beq.n	80085a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008566:	2300      	movs	r3, #0
 8008568:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800856a:	1d3a      	adds	r2, r7, #4
 800856c:	f107 0108 	add.w	r1, r7, #8
 8008570:	f107 030c 	add.w	r3, r7, #12
 8008574:	4618      	mov	r0, r3
 8008576:	f7fd fd5d 	bl	8006034 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	9202      	str	r2, [sp, #8]
 8008582:	9301      	str	r3, [sp, #4]
 8008584:	2302      	movs	r3, #2
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	2300      	movs	r3, #0
 800858a:	460a      	mov	r2, r1
 800858c:	4910      	ldr	r1, [pc, #64]	; (80085d0 <xTimerCreateTimerTask+0x84>)
 800858e:	4811      	ldr	r0, [pc, #68]	; (80085d4 <xTimerCreateTimerTask+0x88>)
 8008590:	f7fe fee2 	bl	8007358 <xTaskCreateStatic>
 8008594:	4603      	mov	r3, r0
 8008596:	4a10      	ldr	r2, [pc, #64]	; (80085d8 <xTimerCreateTimerTask+0x8c>)
 8008598:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800859a:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <xTimerCreateTimerTask+0x8c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80085a2:	2301      	movs	r3, #1
 80085a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	613b      	str	r3, [r7, #16]
}
 80085be:	bf00      	nop
 80085c0:	e7fe      	b.n	80085c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80085c2:	697b      	ldr	r3, [r7, #20]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	2000113c 	.word	0x2000113c
 80085d0:	08009a54 	.word	0x08009a54
 80085d4:	08008711 	.word	0x08008711
 80085d8:	20001140 	.word	0x20001140

080085dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08a      	sub	sp, #40	; 0x28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80085ea:	2300      	movs	r3, #0
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10a      	bne.n	800860a <xTimerGenericCommand+0x2e>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	623b      	str	r3, [r7, #32]
}
 8008606:	bf00      	nop
 8008608:	e7fe      	b.n	8008608 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800860a:	4b1a      	ldr	r3, [pc, #104]	; (8008674 <xTimerGenericCommand+0x98>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d02a      	beq.n	8008668 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b05      	cmp	r3, #5
 8008622:	dc18      	bgt.n	8008656 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008624:	f7ff fdb4 	bl	8008190 <xTaskGetSchedulerState>
 8008628:	4603      	mov	r3, r0
 800862a:	2b02      	cmp	r3, #2
 800862c:	d109      	bne.n	8008642 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800862e:	4b11      	ldr	r3, [pc, #68]	; (8008674 <xTimerGenericCommand+0x98>)
 8008630:	6818      	ldr	r0, [r3, #0]
 8008632:	f107 0110 	add.w	r1, r7, #16
 8008636:	2300      	movs	r3, #0
 8008638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800863a:	f7fe f827 	bl	800668c <xQueueGenericSend>
 800863e:	6278      	str	r0, [r7, #36]	; 0x24
 8008640:	e012      	b.n	8008668 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008642:	4b0c      	ldr	r3, [pc, #48]	; (8008674 <xTimerGenericCommand+0x98>)
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	f107 0110 	add.w	r1, r7, #16
 800864a:	2300      	movs	r3, #0
 800864c:	2200      	movs	r2, #0
 800864e:	f7fe f81d 	bl	800668c <xQueueGenericSend>
 8008652:	6278      	str	r0, [r7, #36]	; 0x24
 8008654:	e008      	b.n	8008668 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008656:	4b07      	ldr	r3, [pc, #28]	; (8008674 <xTimerGenericCommand+0x98>)
 8008658:	6818      	ldr	r0, [r3, #0]
 800865a:	f107 0110 	add.w	r1, r7, #16
 800865e:	2300      	movs	r3, #0
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	f7fe f911 	bl	8006888 <xQueueGenericSendFromISR>
 8008666:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800866a:	4618      	mov	r0, r3
 800866c:	3728      	adds	r7, #40	; 0x28
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	2000113c 	.word	0x2000113c

08008678 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b088      	sub	sp, #32
 800867c:	af02      	add	r7, sp, #8
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008682:	4b22      	ldr	r3, [pc, #136]	; (800870c <prvProcessExpiredTimer+0x94>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	3304      	adds	r3, #4
 8008690:	4618      	mov	r0, r3
 8008692:	f7fd fd73 	bl	800617c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800869c:	f003 0304 	and.w	r3, r3, #4
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d022      	beq.n	80086ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	699a      	ldr	r2, [r3, #24]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	18d1      	adds	r1, r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	6978      	ldr	r0, [r7, #20]
 80086b2:	f000 f8d1 	bl	8008858 <prvInsertTimerInActiveList>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01f      	beq.n	80086fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086bc:	2300      	movs	r3, #0
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	2300      	movs	r3, #0
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	2100      	movs	r1, #0
 80086c6:	6978      	ldr	r0, [r7, #20]
 80086c8:	f7ff ff88 	bl	80085dc <xTimerGenericCommand>
 80086cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d113      	bne.n	80086fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	60fb      	str	r3, [r7, #12]
}
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086f0:	f023 0301 	bic.w	r3, r3, #1
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	6978      	ldr	r0, [r7, #20]
 8008702:	4798      	blx	r3
}
 8008704:	bf00      	nop
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20001134 	.word	0x20001134

08008710 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008718:	f107 0308 	add.w	r3, r7, #8
 800871c:	4618      	mov	r0, r3
 800871e:	f000 f857 	bl	80087d0 <prvGetNextExpireTime>
 8008722:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	4619      	mov	r1, r3
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 f803 	bl	8008734 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800872e:	f000 f8d5 	bl	80088dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008732:	e7f1      	b.n	8008718 <prvTimerTask+0x8>

08008734 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800873e:	f7ff f8ed 	bl	800791c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008742:	f107 0308 	add.w	r3, r7, #8
 8008746:	4618      	mov	r0, r3
 8008748:	f000 f866 	bl	8008818 <prvSampleTimeNow>
 800874c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d130      	bne.n	80087b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10a      	bne.n	8008770 <prvProcessTimerOrBlockTask+0x3c>
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	429a      	cmp	r2, r3
 8008760:	d806      	bhi.n	8008770 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008762:	f7ff f8e9 	bl	8007938 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff ff85 	bl	8008678 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800876e:	e024      	b.n	80087ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d008      	beq.n	8008788 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008776:	4b13      	ldr	r3, [pc, #76]	; (80087c4 <prvProcessTimerOrBlockTask+0x90>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <prvProcessTimerOrBlockTask+0x50>
 8008780:	2301      	movs	r3, #1
 8008782:	e000      	b.n	8008786 <prvProcessTimerOrBlockTask+0x52>
 8008784:	2300      	movs	r3, #0
 8008786:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008788:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <prvProcessTimerOrBlockTask+0x94>)
 800878a:	6818      	ldr	r0, [r3, #0]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	4619      	mov	r1, r3
 8008796:	f7fe fdab 	bl	80072f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800879a:	f7ff f8cd 	bl	8007938 <xTaskResumeAll>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10a      	bne.n	80087ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80087a4:	4b09      	ldr	r3, [pc, #36]	; (80087cc <prvProcessTimerOrBlockTask+0x98>)
 80087a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	f3bf 8f6f 	isb	sy
}
 80087b4:	e001      	b.n	80087ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80087b6:	f7ff f8bf 	bl	8007938 <xTaskResumeAll>
}
 80087ba:	bf00      	nop
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20001138 	.word	0x20001138
 80087c8:	2000113c 	.word	0x2000113c
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087d8:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <prvGetNextExpireTime+0x44>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <prvGetNextExpireTime+0x16>
 80087e2:	2201      	movs	r2, #1
 80087e4:	e000      	b.n	80087e8 <prvGetNextExpireTime+0x18>
 80087e6:	2200      	movs	r2, #0
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d105      	bne.n	8008800 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087f4:	4b07      	ldr	r3, [pc, #28]	; (8008814 <prvGetNextExpireTime+0x44>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60fb      	str	r3, [r7, #12]
 80087fe:	e001      	b.n	8008804 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008804:	68fb      	ldr	r3, [r7, #12]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20001134 	.word	0x20001134

08008818 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008820:	f7ff f928 	bl	8007a74 <xTaskGetTickCount>
 8008824:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008826:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <prvSampleTimeNow+0x3c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	429a      	cmp	r2, r3
 800882e:	d205      	bcs.n	800883c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008830:	f000 f936 	bl	8008aa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	e002      	b.n	8008842 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008842:	4a04      	ldr	r2, [pc, #16]	; (8008854 <prvSampleTimeNow+0x3c>)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008848:	68fb      	ldr	r3, [r7, #12]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20001144 	.word	0x20001144

08008858 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008866:	2300      	movs	r3, #0
 8008868:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	429a      	cmp	r2, r3
 800887c:	d812      	bhi.n	80088a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	1ad2      	subs	r2, r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	429a      	cmp	r2, r3
 800888a:	d302      	bcc.n	8008892 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800888c:	2301      	movs	r3, #1
 800888e:	617b      	str	r3, [r7, #20]
 8008890:	e01b      	b.n	80088ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008892:	4b10      	ldr	r3, [pc, #64]	; (80088d4 <prvInsertTimerInActiveList+0x7c>)
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3304      	adds	r3, #4
 800889a:	4619      	mov	r1, r3
 800889c:	4610      	mov	r0, r2
 800889e:	f7fd fc34 	bl	800610a <vListInsert>
 80088a2:	e012      	b.n	80088ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d206      	bcs.n	80088ba <prvInsertTimerInActiveList+0x62>
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d302      	bcc.n	80088ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80088b4:	2301      	movs	r3, #1
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	e007      	b.n	80088ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088ba:	4b07      	ldr	r3, [pc, #28]	; (80088d8 <prvInsertTimerInActiveList+0x80>)
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3304      	adds	r3, #4
 80088c2:	4619      	mov	r1, r3
 80088c4:	4610      	mov	r0, r2
 80088c6:	f7fd fc20 	bl	800610a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80088ca:	697b      	ldr	r3, [r7, #20]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	20001138 	.word	0x20001138
 80088d8:	20001134 	.word	0x20001134

080088dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08e      	sub	sp, #56	; 0x38
 80088e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088e2:	e0ca      	b.n	8008a7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	da18      	bge.n	800891c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80088ea:	1d3b      	adds	r3, r7, #4
 80088ec:	3304      	adds	r3, #4
 80088ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10a      	bne.n	800890c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80088f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	61fb      	str	r3, [r7, #28]
}
 8008908:	bf00      	nop
 800890a:	e7fe      	b.n	800890a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008912:	6850      	ldr	r0, [r2, #4]
 8008914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008916:	6892      	ldr	r2, [r2, #8]
 8008918:	4611      	mov	r1, r2
 800891a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f2c0 80ab 	blt.w	8008a7a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d004      	beq.n	800893a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	3304      	adds	r3, #4
 8008934:	4618      	mov	r0, r3
 8008936:	f7fd fc21 	bl	800617c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800893a:	463b      	mov	r3, r7
 800893c:	4618      	mov	r0, r3
 800893e:	f7ff ff6b 	bl	8008818 <prvSampleTimeNow>
 8008942:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b09      	cmp	r3, #9
 8008948:	f200 8096 	bhi.w	8008a78 <prvProcessReceivedCommands+0x19c>
 800894c:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <prvProcessReceivedCommands+0x78>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	0800897d 	.word	0x0800897d
 8008958:	0800897d 	.word	0x0800897d
 800895c:	0800897d 	.word	0x0800897d
 8008960:	080089f1 	.word	0x080089f1
 8008964:	08008a05 	.word	0x08008a05
 8008968:	08008a4f 	.word	0x08008a4f
 800896c:	0800897d 	.word	0x0800897d
 8008970:	0800897d 	.word	0x0800897d
 8008974:	080089f1 	.word	0x080089f1
 8008978:	08008a05 	.word	0x08008a05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008982:	f043 0301 	orr.w	r3, r3, #1
 8008986:	b2da      	uxtb	r2, r3
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	18d1      	adds	r1, r2, r3
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800899c:	f7ff ff5c 	bl	8008858 <prvInsertTimerInActiveList>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d069      	beq.n	8008a7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d05e      	beq.n	8008a7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	441a      	add	r2, r3
 80089c4:	2300      	movs	r3, #0
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	2300      	movs	r3, #0
 80089ca:	2100      	movs	r1, #0
 80089cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ce:	f7ff fe05 	bl	80085dc <xTimerGenericCommand>
 80089d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d14f      	bne.n	8008a7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	61bb      	str	r3, [r7, #24]
}
 80089ec:	bf00      	nop
 80089ee:	e7fe      	b.n	80089ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089f6:	f023 0301 	bic.w	r3, r3, #1
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008a02:	e03a      	b.n	8008a7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a0a:	f043 0301 	orr.w	r3, r3, #1
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10a      	bne.n	8008a3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	617b      	str	r3, [r7, #20]
}
 8008a36:	bf00      	nop
 8008a38:	e7fe      	b.n	8008a38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3c:	699a      	ldr	r2, [r3, #24]
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	18d1      	adds	r1, r2, r3
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a48:	f7ff ff06 	bl	8008858 <prvInsertTimerInActiveList>
					break;
 8008a4c:	e015      	b.n	8008a7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d103      	bne.n	8008a64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a5e:	f000 fb59 	bl	8009114 <vPortFree>
 8008a62:	e00a      	b.n	8008a7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a6a:	f023 0301 	bic.w	r3, r3, #1
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a76:	e000      	b.n	8008a7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008a78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a7a:	4b08      	ldr	r3, [pc, #32]	; (8008a9c <prvProcessReceivedCommands+0x1c0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	1d39      	adds	r1, r7, #4
 8008a80:	2200      	movs	r2, #0
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe f828 	bl	8006ad8 <xQueueReceive>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f47f af2a 	bne.w	80088e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	3730      	adds	r7, #48	; 0x30
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	2000113c 	.word	0x2000113c

08008aa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008aa6:	e048      	b.n	8008b3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008aa8:	4b2d      	ldr	r3, [pc, #180]	; (8008b60 <prvSwitchTimerLists+0xc0>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab2:	4b2b      	ldr	r3, [pc, #172]	; (8008b60 <prvSwitchTimerLists+0xc0>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fd fb5b 	bl	800617c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d02e      	beq.n	8008b3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d90e      	bls.n	8008b0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008afa:	4b19      	ldr	r3, [pc, #100]	; (8008b60 <prvSwitchTimerLists+0xc0>)
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3304      	adds	r3, #4
 8008b02:	4619      	mov	r1, r3
 8008b04:	4610      	mov	r0, r2
 8008b06:	f7fd fb00 	bl	800610a <vListInsert>
 8008b0a:	e016      	b.n	8008b3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	2300      	movs	r3, #0
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	2100      	movs	r1, #0
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7ff fd60 	bl	80085dc <xTimerGenericCommand>
 8008b1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10a      	bne.n	8008b3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	603b      	str	r3, [r7, #0]
}
 8008b36:	bf00      	nop
 8008b38:	e7fe      	b.n	8008b38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b3a:	4b09      	ldr	r3, [pc, #36]	; (8008b60 <prvSwitchTimerLists+0xc0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1b1      	bne.n	8008aa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b44:	4b06      	ldr	r3, [pc, #24]	; (8008b60 <prvSwitchTimerLists+0xc0>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b4a:	4b06      	ldr	r3, [pc, #24]	; (8008b64 <prvSwitchTimerLists+0xc4>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a04      	ldr	r2, [pc, #16]	; (8008b60 <prvSwitchTimerLists+0xc0>)
 8008b50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b52:	4a04      	ldr	r2, [pc, #16]	; (8008b64 <prvSwitchTimerLists+0xc4>)
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	6013      	str	r3, [r2, #0]
}
 8008b58:	bf00      	nop
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20001134 	.word	0x20001134
 8008b64:	20001138 	.word	0x20001138

08008b68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b6e:	f000 f969 	bl	8008e44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b72:	4b15      	ldr	r3, [pc, #84]	; (8008bc8 <prvCheckForValidListAndQueue+0x60>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d120      	bne.n	8008bbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b7a:	4814      	ldr	r0, [pc, #80]	; (8008bcc <prvCheckForValidListAndQueue+0x64>)
 8008b7c:	f7fd fa74 	bl	8006068 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b80:	4813      	ldr	r0, [pc, #76]	; (8008bd0 <prvCheckForValidListAndQueue+0x68>)
 8008b82:	f7fd fa71 	bl	8006068 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b86:	4b13      	ldr	r3, [pc, #76]	; (8008bd4 <prvCheckForValidListAndQueue+0x6c>)
 8008b88:	4a10      	ldr	r2, [pc, #64]	; (8008bcc <prvCheckForValidListAndQueue+0x64>)
 8008b8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b8c:	4b12      	ldr	r3, [pc, #72]	; (8008bd8 <prvCheckForValidListAndQueue+0x70>)
 8008b8e:	4a10      	ldr	r2, [pc, #64]	; (8008bd0 <prvCheckForValidListAndQueue+0x68>)
 8008b90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b92:	2300      	movs	r3, #0
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	4b11      	ldr	r3, [pc, #68]	; (8008bdc <prvCheckForValidListAndQueue+0x74>)
 8008b98:	4a11      	ldr	r2, [pc, #68]	; (8008be0 <prvCheckForValidListAndQueue+0x78>)
 8008b9a:	2110      	movs	r1, #16
 8008b9c:	200a      	movs	r0, #10
 8008b9e:	f7fd fb7f 	bl	80062a0 <xQueueGenericCreateStatic>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	4a08      	ldr	r2, [pc, #32]	; (8008bc8 <prvCheckForValidListAndQueue+0x60>)
 8008ba6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ba8:	4b07      	ldr	r3, [pc, #28]	; (8008bc8 <prvCheckForValidListAndQueue+0x60>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d005      	beq.n	8008bbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008bb0:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <prvCheckForValidListAndQueue+0x60>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	490b      	ldr	r1, [pc, #44]	; (8008be4 <prvCheckForValidListAndQueue+0x7c>)
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe fb46 	bl	8007248 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bbc:	f000 f972 	bl	8008ea4 <vPortExitCritical>
}
 8008bc0:	bf00      	nop
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	2000113c 	.word	0x2000113c
 8008bcc:	2000110c 	.word	0x2000110c
 8008bd0:	20001120 	.word	0x20001120
 8008bd4:	20001134 	.word	0x20001134
 8008bd8:	20001138 	.word	0x20001138
 8008bdc:	200011e8 	.word	0x200011e8
 8008be0:	20001148 	.word	0x20001148
 8008be4:	08009a5c 	.word	0x08009a5c

08008be8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	3b04      	subs	r3, #4
 8008bf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	3b04      	subs	r3, #4
 8008c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	f023 0201 	bic.w	r2, r3, #1
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3b04      	subs	r3, #4
 8008c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c18:	4a0c      	ldr	r2, [pc, #48]	; (8008c4c <pxPortInitialiseStack+0x64>)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	3b14      	subs	r3, #20
 8008c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3b04      	subs	r3, #4
 8008c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f06f 0202 	mvn.w	r2, #2
 8008c36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3b20      	subs	r3, #32
 8008c3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	08008c51 	.word	0x08008c51

08008c50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c5a:	4b12      	ldr	r3, [pc, #72]	; (8008ca4 <prvTaskExitError+0x54>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c62:	d00a      	beq.n	8008c7a <prvTaskExitError+0x2a>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	60fb      	str	r3, [r7, #12]
}
 8008c76:	bf00      	nop
 8008c78:	e7fe      	b.n	8008c78 <prvTaskExitError+0x28>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	60bb      	str	r3, [r7, #8]
}
 8008c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c8e:	bf00      	nop
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d0fc      	beq.n	8008c90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c96:	bf00      	nop
 8008c98:	bf00      	nop
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	2000020c 	.word	0x2000020c
	...

08008cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008cb0:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <pxCurrentTCBConst2>)
 8008cb2:	6819      	ldr	r1, [r3, #0]
 8008cb4:	6808      	ldr	r0, [r1, #0]
 8008cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cba:	f380 8809 	msr	PSP, r0
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f04f 0000 	mov.w	r0, #0
 8008cc6:	f380 8811 	msr	BASEPRI, r0
 8008cca:	4770      	bx	lr
 8008ccc:	f3af 8000 	nop.w

08008cd0 <pxCurrentTCBConst2>:
 8008cd0:	20000c04 	.word	0x20000c04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop

08008cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008cd8:	4808      	ldr	r0, [pc, #32]	; (8008cfc <prvPortStartFirstTask+0x24>)
 8008cda:	6800      	ldr	r0, [r0, #0]
 8008cdc:	6800      	ldr	r0, [r0, #0]
 8008cde:	f380 8808 	msr	MSP, r0
 8008ce2:	f04f 0000 	mov.w	r0, #0
 8008ce6:	f380 8814 	msr	CONTROL, r0
 8008cea:	b662      	cpsie	i
 8008cec:	b661      	cpsie	f
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	df00      	svc	0
 8008cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cfa:	bf00      	nop
 8008cfc:	e000ed08 	.word	0xe000ed08

08008d00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d06:	4b46      	ldr	r3, [pc, #280]	; (8008e20 <xPortStartScheduler+0x120>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a46      	ldr	r2, [pc, #280]	; (8008e24 <xPortStartScheduler+0x124>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d10a      	bne.n	8008d26 <xPortStartScheduler+0x26>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	613b      	str	r3, [r7, #16]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d26:	4b3e      	ldr	r3, [pc, #248]	; (8008e20 <xPortStartScheduler+0x120>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a3f      	ldr	r2, [pc, #252]	; (8008e28 <xPortStartScheduler+0x128>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d10a      	bne.n	8008d46 <xPortStartScheduler+0x46>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	60fb      	str	r3, [r7, #12]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d46:	4b39      	ldr	r3, [pc, #228]	; (8008e2c <xPortStartScheduler+0x12c>)
 8008d48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	22ff      	movs	r2, #255	; 0xff
 8008d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	4b31      	ldr	r3, [pc, #196]	; (8008e30 <xPortStartScheduler+0x130>)
 8008d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d6e:	4b31      	ldr	r3, [pc, #196]	; (8008e34 <xPortStartScheduler+0x134>)
 8008d70:	2207      	movs	r2, #7
 8008d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d74:	e009      	b.n	8008d8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d76:	4b2f      	ldr	r3, [pc, #188]	; (8008e34 <xPortStartScheduler+0x134>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	4a2d      	ldr	r2, [pc, #180]	; (8008e34 <xPortStartScheduler+0x134>)
 8008d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d8a:	78fb      	ldrb	r3, [r7, #3]
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d92:	2b80      	cmp	r3, #128	; 0x80
 8008d94:	d0ef      	beq.n	8008d76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d96:	4b27      	ldr	r3, [pc, #156]	; (8008e34 <xPortStartScheduler+0x134>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f1c3 0307 	rsb	r3, r3, #7
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d00a      	beq.n	8008db8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	60bb      	str	r3, [r7, #8]
}
 8008db4:	bf00      	nop
 8008db6:	e7fe      	b.n	8008db6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008db8:	4b1e      	ldr	r3, [pc, #120]	; (8008e34 <xPortStartScheduler+0x134>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	021b      	lsls	r3, r3, #8
 8008dbe:	4a1d      	ldr	r2, [pc, #116]	; (8008e34 <xPortStartScheduler+0x134>)
 8008dc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008dc2:	4b1c      	ldr	r3, [pc, #112]	; (8008e34 <xPortStartScheduler+0x134>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008dca:	4a1a      	ldr	r2, [pc, #104]	; (8008e34 <xPortStartScheduler+0x134>)
 8008dcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008dd6:	4b18      	ldr	r3, [pc, #96]	; (8008e38 <xPortStartScheduler+0x138>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a17      	ldr	r2, [pc, #92]	; (8008e38 <xPortStartScheduler+0x138>)
 8008ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008de0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008de2:	4b15      	ldr	r3, [pc, #84]	; (8008e38 <xPortStartScheduler+0x138>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a14      	ldr	r2, [pc, #80]	; (8008e38 <xPortStartScheduler+0x138>)
 8008de8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008dec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dee:	f000 f8dd 	bl	8008fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008df2:	4b12      	ldr	r3, [pc, #72]	; (8008e3c <xPortStartScheduler+0x13c>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008df8:	f000 f8fc 	bl	8008ff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008dfc:	4b10      	ldr	r3, [pc, #64]	; (8008e40 <xPortStartScheduler+0x140>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a0f      	ldr	r2, [pc, #60]	; (8008e40 <xPortStartScheduler+0x140>)
 8008e02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e08:	f7ff ff66 	bl	8008cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e0c:	f7fe ff0e 	bl	8007c2c <vTaskSwitchContext>
	prvTaskExitError();
 8008e10:	f7ff ff1e 	bl	8008c50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	e000ed00 	.word	0xe000ed00
 8008e24:	410fc271 	.word	0x410fc271
 8008e28:	410fc270 	.word	0x410fc270
 8008e2c:	e000e400 	.word	0xe000e400
 8008e30:	20001238 	.word	0x20001238
 8008e34:	2000123c 	.word	0x2000123c
 8008e38:	e000ed20 	.word	0xe000ed20
 8008e3c:	2000020c 	.word	0x2000020c
 8008e40:	e000ef34 	.word	0xe000ef34

08008e44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	607b      	str	r3, [r7, #4]
}
 8008e5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e5e:	4b0f      	ldr	r3, [pc, #60]	; (8008e9c <vPortEnterCritical+0x58>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	3301      	adds	r3, #1
 8008e64:	4a0d      	ldr	r2, [pc, #52]	; (8008e9c <vPortEnterCritical+0x58>)
 8008e66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e68:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <vPortEnterCritical+0x58>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d10f      	bne.n	8008e90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e70:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <vPortEnterCritical+0x5c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00a      	beq.n	8008e90 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	603b      	str	r3, [r7, #0]
}
 8008e8c:	bf00      	nop
 8008e8e:	e7fe      	b.n	8008e8e <vPortEnterCritical+0x4a>
	}
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	2000020c 	.word	0x2000020c
 8008ea0:	e000ed04 	.word	0xe000ed04

08008ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008eaa:	4b12      	ldr	r3, [pc, #72]	; (8008ef4 <vPortExitCritical+0x50>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <vPortExitCritical+0x24>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	607b      	str	r3, [r7, #4]
}
 8008ec4:	bf00      	nop
 8008ec6:	e7fe      	b.n	8008ec6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ec8:	4b0a      	ldr	r3, [pc, #40]	; (8008ef4 <vPortExitCritical+0x50>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	4a09      	ldr	r2, [pc, #36]	; (8008ef4 <vPortExitCritical+0x50>)
 8008ed0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ed2:	4b08      	ldr	r3, [pc, #32]	; (8008ef4 <vPortExitCritical+0x50>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d105      	bne.n	8008ee6 <vPortExitCritical+0x42>
 8008eda:	2300      	movs	r3, #0
 8008edc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	f383 8811 	msr	BASEPRI, r3
}
 8008ee4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ee6:	bf00      	nop
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	2000020c 	.word	0x2000020c
	...

08008f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f00:	f3ef 8009 	mrs	r0, PSP
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	4b15      	ldr	r3, [pc, #84]	; (8008f60 <pxCurrentTCBConst>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	f01e 0f10 	tst.w	lr, #16
 8008f10:	bf08      	it	eq
 8008f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1a:	6010      	str	r0, [r2, #0]
 8008f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f24:	f380 8811 	msr	BASEPRI, r0
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f7fe fe7c 	bl	8007c2c <vTaskSwitchContext>
 8008f34:	f04f 0000 	mov.w	r0, #0
 8008f38:	f380 8811 	msr	BASEPRI, r0
 8008f3c:	bc09      	pop	{r0, r3}
 8008f3e:	6819      	ldr	r1, [r3, #0]
 8008f40:	6808      	ldr	r0, [r1, #0]
 8008f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f46:	f01e 0f10 	tst.w	lr, #16
 8008f4a:	bf08      	it	eq
 8008f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f50:	f380 8809 	msr	PSP, r0
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	f3af 8000 	nop.w

08008f60 <pxCurrentTCBConst>:
 8008f60:	20000c04 	.word	0x20000c04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop

08008f68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	607b      	str	r3, [r7, #4]
}
 8008f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f82:	f7fe fd99 	bl	8007ab8 <xTaskIncrementTick>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f8c:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <xPortSysTickHandler+0x40>)
 8008f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	2300      	movs	r3, #0
 8008f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	f383 8811 	msr	BASEPRI, r3
}
 8008f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	e000ed04 	.word	0xe000ed04

08008fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fb0:	4b0b      	ldr	r3, [pc, #44]	; (8008fe0 <vPortSetupTimerInterrupt+0x34>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fb6:	4b0b      	ldr	r3, [pc, #44]	; (8008fe4 <vPortSetupTimerInterrupt+0x38>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fbc:	4b0a      	ldr	r3, [pc, #40]	; (8008fe8 <vPortSetupTimerInterrupt+0x3c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a0a      	ldr	r2, [pc, #40]	; (8008fec <vPortSetupTimerInterrupt+0x40>)
 8008fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc6:	099b      	lsrs	r3, r3, #6
 8008fc8:	4a09      	ldr	r2, [pc, #36]	; (8008ff0 <vPortSetupTimerInterrupt+0x44>)
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fce:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <vPortSetupTimerInterrupt+0x34>)
 8008fd0:	2207      	movs	r2, #7
 8008fd2:	601a      	str	r2, [r3, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	e000e010 	.word	0xe000e010
 8008fe4:	e000e018 	.word	0xe000e018
 8008fe8:	20000200 	.word	0x20000200
 8008fec:	10624dd3 	.word	0x10624dd3
 8008ff0:	e000e014 	.word	0xe000e014

08008ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009004 <vPortEnableVFP+0x10>
 8008ff8:	6801      	ldr	r1, [r0, #0]
 8008ffa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008ffe:	6001      	str	r1, [r0, #0]
 8009000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009002:	bf00      	nop
 8009004:	e000ed88 	.word	0xe000ed88

08009008 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800900e:	f3ef 8305 	mrs	r3, IPSR
 8009012:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b0f      	cmp	r3, #15
 8009018:	d914      	bls.n	8009044 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800901a:	4a17      	ldr	r2, [pc, #92]	; (8009078 <vPortValidateInterruptPriority+0x70>)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009024:	4b15      	ldr	r3, [pc, #84]	; (800907c <vPortValidateInterruptPriority+0x74>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	7afa      	ldrb	r2, [r7, #11]
 800902a:	429a      	cmp	r2, r3
 800902c:	d20a      	bcs.n	8009044 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	607b      	str	r3, [r7, #4]
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009044:	4b0e      	ldr	r3, [pc, #56]	; (8009080 <vPortValidateInterruptPriority+0x78>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800904c:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <vPortValidateInterruptPriority+0x7c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	429a      	cmp	r2, r3
 8009052:	d90a      	bls.n	800906a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	603b      	str	r3, [r7, #0]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <vPortValidateInterruptPriority+0x60>
	}
 800906a:	bf00      	nop
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	e000e3f0 	.word	0xe000e3f0
 800907c:	20001238 	.word	0x20001238
 8009080:	e000ed0c 	.word	0xe000ed0c
 8009084:	2000123c 	.word	0x2000123c

08009088 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8009090:	2300      	movs	r3, #0
 8009092:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b00      	cmp	r3, #0
 800909c:	d004      	beq.n	80090a8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f023 0307 	bic.w	r3, r3, #7
 80090a4:	3308      	adds	r3, #8
 80090a6:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80090a8:	f7fe fc38 	bl	800791c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80090ac:	4b16      	ldr	r3, [pc, #88]	; (8009108 <pvPortMalloc+0x80>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d105      	bne.n	80090c0 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80090b4:	4b15      	ldr	r3, [pc, #84]	; (800910c <pvPortMalloc+0x84>)
 80090b6:	f023 0307 	bic.w	r3, r3, #7
 80090ba:	461a      	mov	r2, r3
 80090bc:	4b12      	ldr	r3, [pc, #72]	; (8009108 <pvPortMalloc+0x80>)
 80090be:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80090c0:	4b13      	ldr	r3, [pc, #76]	; (8009110 <pvPortMalloc+0x88>)
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4413      	add	r3, r2
 80090c8:	f643 32f7 	movw	r2, #15351	; 0x3bf7
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d813      	bhi.n	80090f8 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80090d0:	4b0f      	ldr	r3, [pc, #60]	; (8009110 <pvPortMalloc+0x88>)
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	441a      	add	r2, r3
 80090d8:	4b0d      	ldr	r3, [pc, #52]	; (8009110 <pvPortMalloc+0x88>)
 80090da:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80090dc:	429a      	cmp	r2, r3
 80090de:	d90b      	bls.n	80090f8 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80090e0:	4b09      	ldr	r3, [pc, #36]	; (8009108 <pvPortMalloc+0x80>)
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	4b0a      	ldr	r3, [pc, #40]	; (8009110 <pvPortMalloc+0x88>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4413      	add	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80090ec:	4b08      	ldr	r3, [pc, #32]	; (8009110 <pvPortMalloc+0x88>)
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4413      	add	r3, r2
 80090f4:	4a06      	ldr	r2, [pc, #24]	; (8009110 <pvPortMalloc+0x88>)
 80090f6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090f8:	f7fe fc1e 	bl	8007938 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80090fc:	68fb      	ldr	r3, [r7, #12]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20004e44 	.word	0x20004e44
 800910c:	20001248 	.word	0x20001248
 8009110:	20004e40 	.word	0x20004e40

08009114 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00a      	beq.n	8009138 <vPortFree+0x24>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	60fb      	str	r3, [r7, #12]
}
 8009134:	bf00      	nop
 8009136:	e7fe      	b.n	8009136 <vPortFree+0x22>
}
 8009138:	bf00      	nop
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8009148:	4814      	ldr	r0, [pc, #80]	; (800919c <I2Cx_Init+0x58>)
 800914a:	f7fa f98f 	bl	800346c <HAL_I2C_GetState>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d121      	bne.n	8009198 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8009154:	4b11      	ldr	r3, [pc, #68]	; (800919c <I2Cx_Init+0x58>)
 8009156:	4a12      	ldr	r2, [pc, #72]	; (80091a0 <I2Cx_Init+0x5c>)
 8009158:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800915a:	4b10      	ldr	r3, [pc, #64]	; (800919c <I2Cx_Init+0x58>)
 800915c:	2243      	movs	r2, #67	; 0x43
 800915e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8009160:	4b0e      	ldr	r3, [pc, #56]	; (800919c <I2Cx_Init+0x58>)
 8009162:	4a10      	ldr	r2, [pc, #64]	; (80091a4 <I2Cx_Init+0x60>)
 8009164:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009166:	4b0d      	ldr	r3, [pc, #52]	; (800919c <I2Cx_Init+0x58>)
 8009168:	2200      	movs	r2, #0
 800916a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800916c:	4b0b      	ldr	r3, [pc, #44]	; (800919c <I2Cx_Init+0x58>)
 800916e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009172:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8009174:	4b09      	ldr	r3, [pc, #36]	; (800919c <I2Cx_Init+0x58>)
 8009176:	2200      	movs	r2, #0
 8009178:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800917a:	4b08      	ldr	r3, [pc, #32]	; (800919c <I2Cx_Init+0x58>)
 800917c:	2200      	movs	r2, #0
 800917e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8009180:	4b06      	ldr	r3, [pc, #24]	; (800919c <I2Cx_Init+0x58>)
 8009182:	2200      	movs	r2, #0
 8009184:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8009186:	4b05      	ldr	r3, [pc, #20]	; (800919c <I2Cx_Init+0x58>)
 8009188:	2200      	movs	r2, #0
 800918a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800918c:	4803      	ldr	r0, [pc, #12]	; (800919c <I2Cx_Init+0x58>)
 800918e:	f000 f86b 	bl	8009268 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8009192:	4802      	ldr	r0, [pc, #8]	; (800919c <I2Cx_Init+0x58>)
 8009194:	f7f9 fcd6 	bl	8002b44 <HAL_I2C_Init>
  }
}
 8009198:	bf00      	nop
 800919a:	bd80      	pop	{r7, pc}
 800919c:	20004e48 	.word	0x20004e48
 80091a0:	40005400 	.word	0x40005400
 80091a4:	000186a0 	.word	0x000186a0

080091a8 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af04      	add	r7, sp, #16
 80091ae:	4603      	mov	r3, r0
 80091b0:	80fb      	strh	r3, [r7, #6]
 80091b2:	460b      	mov	r3, r1
 80091b4:	717b      	strb	r3, [r7, #5]
 80091b6:	4613      	mov	r3, r2
 80091b8:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80091be:	797b      	ldrb	r3, [r7, #5]
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	4b0b      	ldr	r3, [pc, #44]	; (80091f0 <I2Cx_WriteData+0x48>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	88f9      	ldrh	r1, [r7, #6]
 80091c8:	9302      	str	r3, [sp, #8]
 80091ca:	2301      	movs	r3, #1
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	1d3b      	adds	r3, r7, #4
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	2301      	movs	r3, #1
 80091d4:	4807      	ldr	r0, [pc, #28]	; (80091f4 <I2Cx_WriteData+0x4c>)
 80091d6:	f7f9 fe29 	bl	8002e2c <HAL_I2C_Mem_Write>
 80091da:	4603      	mov	r3, r0
 80091dc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80091e4:	f000 f834 	bl	8009250 <I2Cx_Error>
  }
}
 80091e8:	bf00      	nop
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20000210 	.word	0x20000210
 80091f4:	20004e48 	.word	0x20004e48

080091f8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af04      	add	r7, sp, #16
 80091fe:	4603      	mov	r3, r0
 8009200:	460a      	mov	r2, r1
 8009202:	80fb      	strh	r3, [r7, #6]
 8009204:	4613      	mov	r3, r2
 8009206:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8009210:	797b      	ldrb	r3, [r7, #5]
 8009212:	b29a      	uxth	r2, r3
 8009214:	4b0c      	ldr	r3, [pc, #48]	; (8009248 <I2Cx_ReadData+0x50>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	88f9      	ldrh	r1, [r7, #6]
 800921a:	9302      	str	r3, [sp, #8]
 800921c:	2301      	movs	r3, #1
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	f107 030e 	add.w	r3, r7, #14
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	2301      	movs	r3, #1
 8009228:	4808      	ldr	r0, [pc, #32]	; (800924c <I2Cx_ReadData+0x54>)
 800922a:	f7f9 fef9 	bl	8003020 <HAL_I2C_Mem_Read>
 800922e:	4603      	mov	r3, r0
 8009230:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8009232:	7bfb      	ldrb	r3, [r7, #15]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8009238:	f000 f80a 	bl	8009250 <I2Cx_Error>
  }
  return value;
 800923c:	7bbb      	ldrb	r3, [r7, #14]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20000210 	.word	0x20000210
 800924c:	20004e48 	.word	0x20004e48

08009250 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8009254:	4803      	ldr	r0, [pc, #12]	; (8009264 <I2Cx_Error+0x14>)
 8009256:	f7f9 fdb9 	bl	8002dcc <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800925a:	f7ff ff73 	bl	8009144 <I2Cx_Init>
}
 800925e:	bf00      	nop
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20004e48 	.word	0x20004e48

08009268 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08a      	sub	sp, #40	; 0x28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8009270:	2300      	movs	r3, #0
 8009272:	613b      	str	r3, [r7, #16]
 8009274:	4b25      	ldr	r3, [pc, #148]	; (800930c <I2Cx_MspInit+0xa4>)
 8009276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009278:	4a24      	ldr	r2, [pc, #144]	; (800930c <I2Cx_MspInit+0xa4>)
 800927a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800927e:	6413      	str	r3, [r2, #64]	; 0x40
 8009280:	4b22      	ldr	r3, [pc, #136]	; (800930c <I2Cx_MspInit+0xa4>)
 8009282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009288:	613b      	str	r3, [r7, #16]
 800928a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800928c:	2300      	movs	r3, #0
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	4b1e      	ldr	r3, [pc, #120]	; (800930c <I2Cx_MspInit+0xa4>)
 8009292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009294:	4a1d      	ldr	r2, [pc, #116]	; (800930c <I2Cx_MspInit+0xa4>)
 8009296:	f043 0302 	orr.w	r3, r3, #2
 800929a:	6313      	str	r3, [r2, #48]	; 0x30
 800929c:	4b1b      	ldr	r3, [pc, #108]	; (800930c <I2Cx_MspInit+0xa4>)
 800929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a0:	f003 0302 	and.w	r3, r3, #2
 80092a4:	60fb      	str	r3, [r7, #12]
 80092a6:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 80092a8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80092ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80092ae:	2312      	movs	r3, #18
 80092b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80092b6:	2302      	movs	r3, #2
 80092b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80092ba:	2304      	movs	r3, #4
 80092bc:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80092be:	f107 0314 	add.w	r3, r7, #20
 80092c2:	4619      	mov	r1, r3
 80092c4:	4812      	ldr	r0, [pc, #72]	; (8009310 <I2Cx_MspInit+0xa8>)
 80092c6:	f7f9 f989 	bl	80025dc <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80092ca:	4b10      	ldr	r3, [pc, #64]	; (800930c <I2Cx_MspInit+0xa4>)
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	4a0f      	ldr	r2, [pc, #60]	; (800930c <I2Cx_MspInit+0xa4>)
 80092d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092d4:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80092d6:	4b0d      	ldr	r3, [pc, #52]	; (800930c <I2Cx_MspInit+0xa4>)
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	4a0c      	ldr	r2, [pc, #48]	; (800930c <I2Cx_MspInit+0xa4>)
 80092dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092e0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80092e2:	2200      	movs	r2, #0
 80092e4:	210f      	movs	r1, #15
 80092e6:	201f      	movs	r0, #31
 80092e8:	f7f9 f94e 	bl	8002588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80092ec:	201f      	movs	r0, #31
 80092ee:	f7f9 f967 	bl	80025c0 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80092f2:	2200      	movs	r2, #0
 80092f4:	210f      	movs	r1, #15
 80092f6:	2020      	movs	r0, #32
 80092f8:	f7f9 f946 	bl	8002588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80092fc:	2020      	movs	r0, #32
 80092fe:	f7f9 f95f 	bl	80025c0 <HAL_NVIC_EnableIRQ>
}
 8009302:	bf00      	nop
 8009304:	3728      	adds	r7, #40	; 0x28
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	40023800 	.word	0x40023800
 8009310:	40020400 	.word	0x40020400

08009314 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800931a:	2300      	movs	r3, #0
 800931c:	603b      	str	r3, [r7, #0]
 800931e:	4b0f      	ldr	r3, [pc, #60]	; (800935c <COMPASSACCELERO_IO_Init+0x48>)
 8009320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009322:	4a0e      	ldr	r2, [pc, #56]	; (800935c <COMPASSACCELERO_IO_Init+0x48>)
 8009324:	f043 0310 	orr.w	r3, r3, #16
 8009328:	6313      	str	r3, [r2, #48]	; 0x30
 800932a:	4b0c      	ldr	r3, [pc, #48]	; (800935c <COMPASSACCELERO_IO_Init+0x48>)
 800932c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932e:	f003 0310 	and.w	r3, r3, #16
 8009332:	603b      	str	r3, [r7, #0]
 8009334:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8009336:	2304      	movs	r3, #4
 8009338:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800933a:	2300      	movs	r3, #0
 800933c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800933e:	2300      	movs	r3, #0
 8009340:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8009342:	2302      	movs	r3, #2
 8009344:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8009346:	1d3b      	adds	r3, r7, #4
 8009348:	4619      	mov	r1, r3
 800934a:	4805      	ldr	r0, [pc, #20]	; (8009360 <COMPASSACCELERO_IO_Init+0x4c>)
 800934c:	f7f9 f946 	bl	80025dc <HAL_GPIO_Init>
  
  I2Cx_Init();
 8009350:	f7ff fef8 	bl	8009144 <I2Cx_Init>
}
 8009354:	bf00      	nop
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	40023800 	.word	0x40023800
 8009360:	40021000 	.word	0x40021000

08009364 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800936a:	2300      	movs	r3, #0
 800936c:	603b      	str	r3, [r7, #0]
 800936e:	4b13      	ldr	r3, [pc, #76]	; (80093bc <COMPASSACCELERO_IO_ITConfig+0x58>)
 8009370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009372:	4a12      	ldr	r2, [pc, #72]	; (80093bc <COMPASSACCELERO_IO_ITConfig+0x58>)
 8009374:	f043 0310 	orr.w	r3, r3, #16
 8009378:	6313      	str	r3, [r2, #48]	; 0x30
 800937a:	4b10      	ldr	r3, [pc, #64]	; (80093bc <COMPASSACCELERO_IO_ITConfig+0x58>)
 800937c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937e:	f003 0310 	and.w	r3, r3, #16
 8009382:	603b      	str	r3, [r7, #0]
 8009384:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8009386:	2330      	movs	r3, #48	; 0x30
 8009388:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800938a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800938e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8009390:	2302      	movs	r3, #2
 8009392:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8009398:	1d3b      	adds	r3, r7, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4808      	ldr	r0, [pc, #32]	; (80093c0 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 800939e:	f7f9 f91d 	bl	80025dc <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80093a2:	2200      	movs	r2, #0
 80093a4:	210f      	movs	r1, #15
 80093a6:	200a      	movs	r0, #10
 80093a8:	f7f9 f8ee 	bl	8002588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80093ac:	200a      	movs	r0, #10
 80093ae:	f7f9 f907 	bl	80025c0 <HAL_NVIC_EnableIRQ>
}
 80093b2:	bf00      	nop
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	40023800 	.word	0x40023800
 80093c0:	40021000 	.word	0x40021000

080093c4 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	80fb      	strh	r3, [r7, #6]
 80093ce:	460b      	mov	r3, r1
 80093d0:	717b      	strb	r3, [r7, #5]
 80093d2:	4613      	mov	r3, r2
 80093d4:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 80093d6:	793a      	ldrb	r2, [r7, #4]
 80093d8:	7979      	ldrb	r1, [r7, #5]
 80093da:	88fb      	ldrh	r3, [r7, #6]
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff fee3 	bl	80091a8 <I2Cx_WriteData>
}
 80093e2:	bf00      	nop
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	4603      	mov	r3, r0
 80093f2:	460a      	mov	r2, r1
 80093f4:	80fb      	strh	r3, [r7, #6]
 80093f6:	4613      	mov	r3, r2
 80093f8:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 80093fa:	797a      	ldrb	r2, [r7, #5]
 80093fc:	88fb      	ldrh	r3, [r7, #6]
 80093fe:	4611      	mov	r1, r2
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff fef9 	bl	80091f8 <I2Cx_ReadData>
 8009406:	4603      	mov	r3, r0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 800941a:	2300      	movs	r3, #0
 800941c:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 800941e:	1d3b      	adds	r3, r7, #4
 8009420:	2200      	movs	r2, #0
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8009426:	4b58      	ldr	r3, [pc, #352]	; (8009588 <BSP_ACCELERO_Init+0x178>)
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	4798      	blx	r3
 800942c:	4603      	mov	r3, r0
 800942e:	2b33      	cmp	r3, #51	; 0x33
 8009430:	d14f      	bne.n	80094d2 <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8009432:	4b56      	ldr	r3, [pc, #344]	; (800958c <BSP_ACCELERO_Init+0x17c>)
 8009434:	4a54      	ldr	r2, [pc, #336]	; (8009588 <BSP_ACCELERO_Init+0x178>)
 8009436:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8009438:	2300      	movs	r3, #0
 800943a:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_200_HZ; // cambiar a 200Hz
 800943c:	2360      	movs	r3, #96	; 0x60
 800943e:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8009440:	2307      	movs	r3, #7
 8009442:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8009444:	2300      	movs	r3, #0
 8009446:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8009448:	2300      	movs	r3, #0
 800944a:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 800944c:	2300      	movs	r3, #0
 800944e:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8009450:	2308      	movs	r3, #8
 8009452:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8009454:	7b3a      	ldrb	r2, [r7, #12]
 8009456:	7b7b      	ldrb	r3, [r7, #13]
 8009458:	4313      	orrs	r3, r2
 800945a:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 800945c:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800945e:	4313      	orrs	r3, r2
 8009460:	b2db      	uxtb	r3, r3
 8009462:	b29a      	uxth	r2, r3
 8009464:	8abb      	ldrh	r3, [r7, #20]
 8009466:	4313      	orrs	r3, r2
 8009468:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800946a:	7c3a      	ldrb	r2, [r7, #16]
 800946c:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 800946e:	4313      	orrs	r3, r2
 8009470:	b2da      	uxtb	r2, r3
 8009472:	7cbb      	ldrb	r3, [r7, #18]
 8009474:	4313      	orrs	r3, r2
 8009476:	b2da      	uxtb	r2, r3
 8009478:	7bfb      	ldrb	r3, [r7, #15]
 800947a:	4313      	orrs	r3, r2
 800947c:	b2db      	uxtb	r3, r3
 800947e:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8009480:	b21a      	sxth	r2, r3
 8009482:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009486:	4313      	orrs	r3, r2
 8009488:	b21b      	sxth	r3, r3
 800948a:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800948c:	4b3f      	ldr	r3, [pc, #252]	; (800958c <BSP_ACCELERO_Init+0x17c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	8aba      	ldrh	r2, [r7, #20]
 8009494:	4610      	mov	r0, r2
 8009496:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8009498:	2380      	movs	r3, #128	; 0x80
 800949a:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 800949c:	2310      	movs	r3, #16
 800949e:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 80094a0:	2300      	movs	r3, #0
 80094a2:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 80094a4:	2300      	movs	r3, #0
 80094a6:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80094a8:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80094aa:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80094ac:	4313      	orrs	r3, r2
 80094ae:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80094b0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80094b2:	4313      	orrs	r3, r2
 80094b4:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80094b6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80094b8:	4313      	orrs	r3, r2
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80094be:	4b33      	ldr	r3, [pc, #204]	; (800958c <BSP_ACCELERO_Init+0x17c>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c4:	8aba      	ldrh	r2, [r7, #20]
 80094c6:	b2d2      	uxtb	r2, r2
 80094c8:	4610      	mov	r0, r2
 80094ca:	4798      	blx	r3

    ret = ACCELERO_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	75fb      	strb	r3, [r7, #23]
 80094d0:	e054      	b.n	800957c <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 80094d2:	4b2f      	ldr	r3, [pc, #188]	; (8009590 <BSP_ACCELERO_Init+0x180>)
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	4798      	blx	r3
 80094d8:	4603      	mov	r3, r0
 80094da:	2b33      	cmp	r3, #51	; 0x33
 80094dc:	d14e      	bne.n	800957c <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 80094de:	4b2b      	ldr	r3, [pc, #172]	; (800958c <BSP_ACCELERO_Init+0x17c>)
 80094e0:	4a2b      	ldr	r2, [pc, #172]	; (8009590 <BSP_ACCELERO_Init+0x180>)
 80094e2:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 80094e4:	2300      	movs	r3, #0
 80094e6:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 80094e8:	2340      	movs	r3, #64	; 0x40
 80094ea:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 80094ec:	2307      	movs	r3, #7
 80094ee:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 80094f0:	2300      	movs	r3, #0
 80094f2:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 80094f4:	2300      	movs	r3, #0
 80094f6:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 80094f8:	2300      	movs	r3, #0
 80094fa:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 80094fc:	2308      	movs	r3, #8
 80094fe:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8009500:	7b3a      	ldrb	r2, [r7, #12]
 8009502:	7b7b      	ldrb	r3, [r7, #13]
 8009504:	4313      	orrs	r3, r2
 8009506:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8009508:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800950a:	4313      	orrs	r3, r2
 800950c:	b2db      	uxtb	r3, r3
 800950e:	b29a      	uxth	r2, r3
 8009510:	8abb      	ldrh	r3, [r7, #20]
 8009512:	4313      	orrs	r3, r2
 8009514:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8009516:	7c3a      	ldrb	r2, [r7, #16]
 8009518:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 800951a:	4313      	orrs	r3, r2
 800951c:	b2da      	uxtb	r2, r3
 800951e:	7cbb      	ldrb	r3, [r7, #18]
 8009520:	4313      	orrs	r3, r2
 8009522:	b2da      	uxtb	r2, r3
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	4313      	orrs	r3, r2
 8009528:	b2db      	uxtb	r3, r3
 800952a:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800952c:	b21a      	sxth	r2, r3
 800952e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009532:	4313      	orrs	r3, r2
 8009534:	b21b      	sxth	r3, r3
 8009536:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8009538:	4b14      	ldr	r3, [pc, #80]	; (800958c <BSP_ACCELERO_Init+0x17c>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	8aba      	ldrh	r2, [r7, #20]
 8009540:	4610      	mov	r0, r2
 8009542:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8009544:	2380      	movs	r3, #128	; 0x80
 8009546:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8009548:	2310      	movs	r3, #16
 800954a:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 800954c:	2300      	movs	r3, #0
 800954e:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8009550:	2300      	movs	r3, #0
 8009552:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8009554:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8009556:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8009558:	4313      	orrs	r3, r2
 800955a:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 800955c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800955e:	4313      	orrs	r3, r2
 8009560:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8009562:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8009564:	4313      	orrs	r3, r2
 8009566:	b2db      	uxtb	r3, r3
 8009568:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800956a:	4b08      	ldr	r3, [pc, #32]	; (800958c <BSP_ACCELERO_Init+0x17c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009570:	8aba      	ldrh	r2, [r7, #20]
 8009572:	b2d2      	uxtb	r2, r2
 8009574:	4610      	mov	r0, r2
 8009576:	4798      	blx	r3

    ret = ACCELERO_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800957c:	7dfb      	ldrb	r3, [r7, #23]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3718      	adds	r7, #24
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20000034 	.word	0x20000034
 800958c:	20004e9c 	.word	0x20004e9c
 8009590:	20000000 	.word	0x20000000

08009594 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 80095a0:	4b10      	ldr	r3, [pc, #64]	; (80095e4 <BSP_ACCELERO_GetXYZ+0x50>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d018      	beq.n	80095dc <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80095aa:	4b0e      	ldr	r3, [pc, #56]	; (80095e4 <BSP_ACCELERO_GetXYZ+0x50>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 80095b4:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <BSP_ACCELERO_GetXYZ+0x50>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a0b      	ldr	r2, [pc, #44]	; (80095e8 <BSP_ACCELERO_GetXYZ+0x54>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d10e      	bne.n	80095dc <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 80095ce:	89fb      	ldrh	r3, [r7, #14]
 80095d0:	425b      	negs	r3, r3
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3302      	adds	r3, #2
 80095d8:	b212      	sxth	r2, r2
 80095da:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80095dc:	bf00      	nop
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	20004e9c 	.word	0x20004e9c
 80095e8:	20000034 	.word	0x20000034

080095ec <malloc>:
 80095ec:	4b02      	ldr	r3, [pc, #8]	; (80095f8 <malloc+0xc>)
 80095ee:	4601      	mov	r1, r0
 80095f0:	6818      	ldr	r0, [r3, #0]
 80095f2:	f000 b823 	b.w	800963c <_malloc_r>
 80095f6:	bf00      	nop
 80095f8:	20000260 	.word	0x20000260

080095fc <sbrk_aligned>:
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	4e0e      	ldr	r6, [pc, #56]	; (8009638 <sbrk_aligned+0x3c>)
 8009600:	460c      	mov	r4, r1
 8009602:	6831      	ldr	r1, [r6, #0]
 8009604:	4605      	mov	r5, r0
 8009606:	b911      	cbnz	r1, 800960e <sbrk_aligned+0x12>
 8009608:	f000 f902 	bl	8009810 <_sbrk_r>
 800960c:	6030      	str	r0, [r6, #0]
 800960e:	4621      	mov	r1, r4
 8009610:	4628      	mov	r0, r5
 8009612:	f000 f8fd 	bl	8009810 <_sbrk_r>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	d00a      	beq.n	8009630 <sbrk_aligned+0x34>
 800961a:	1cc4      	adds	r4, r0, #3
 800961c:	f024 0403 	bic.w	r4, r4, #3
 8009620:	42a0      	cmp	r0, r4
 8009622:	d007      	beq.n	8009634 <sbrk_aligned+0x38>
 8009624:	1a21      	subs	r1, r4, r0
 8009626:	4628      	mov	r0, r5
 8009628:	f000 f8f2 	bl	8009810 <_sbrk_r>
 800962c:	3001      	adds	r0, #1
 800962e:	d101      	bne.n	8009634 <sbrk_aligned+0x38>
 8009630:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009634:	4620      	mov	r0, r4
 8009636:	bd70      	pop	{r4, r5, r6, pc}
 8009638:	20004ea4 	.word	0x20004ea4

0800963c <_malloc_r>:
 800963c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009640:	1ccd      	adds	r5, r1, #3
 8009642:	f025 0503 	bic.w	r5, r5, #3
 8009646:	3508      	adds	r5, #8
 8009648:	2d0c      	cmp	r5, #12
 800964a:	bf38      	it	cc
 800964c:	250c      	movcc	r5, #12
 800964e:	2d00      	cmp	r5, #0
 8009650:	4607      	mov	r7, r0
 8009652:	db01      	blt.n	8009658 <_malloc_r+0x1c>
 8009654:	42a9      	cmp	r1, r5
 8009656:	d905      	bls.n	8009664 <_malloc_r+0x28>
 8009658:	230c      	movs	r3, #12
 800965a:	603b      	str	r3, [r7, #0]
 800965c:	2600      	movs	r6, #0
 800965e:	4630      	mov	r0, r6
 8009660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009664:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009738 <_malloc_r+0xfc>
 8009668:	f000 f868 	bl	800973c <__malloc_lock>
 800966c:	f8d8 3000 	ldr.w	r3, [r8]
 8009670:	461c      	mov	r4, r3
 8009672:	bb5c      	cbnz	r4, 80096cc <_malloc_r+0x90>
 8009674:	4629      	mov	r1, r5
 8009676:	4638      	mov	r0, r7
 8009678:	f7ff ffc0 	bl	80095fc <sbrk_aligned>
 800967c:	1c43      	adds	r3, r0, #1
 800967e:	4604      	mov	r4, r0
 8009680:	d155      	bne.n	800972e <_malloc_r+0xf2>
 8009682:	f8d8 4000 	ldr.w	r4, [r8]
 8009686:	4626      	mov	r6, r4
 8009688:	2e00      	cmp	r6, #0
 800968a:	d145      	bne.n	8009718 <_malloc_r+0xdc>
 800968c:	2c00      	cmp	r4, #0
 800968e:	d048      	beq.n	8009722 <_malloc_r+0xe6>
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	4631      	mov	r1, r6
 8009694:	4638      	mov	r0, r7
 8009696:	eb04 0903 	add.w	r9, r4, r3
 800969a:	f000 f8b9 	bl	8009810 <_sbrk_r>
 800969e:	4581      	cmp	r9, r0
 80096a0:	d13f      	bne.n	8009722 <_malloc_r+0xe6>
 80096a2:	6821      	ldr	r1, [r4, #0]
 80096a4:	1a6d      	subs	r5, r5, r1
 80096a6:	4629      	mov	r1, r5
 80096a8:	4638      	mov	r0, r7
 80096aa:	f7ff ffa7 	bl	80095fc <sbrk_aligned>
 80096ae:	3001      	adds	r0, #1
 80096b0:	d037      	beq.n	8009722 <_malloc_r+0xe6>
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	442b      	add	r3, r5
 80096b6:	6023      	str	r3, [r4, #0]
 80096b8:	f8d8 3000 	ldr.w	r3, [r8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d038      	beq.n	8009732 <_malloc_r+0xf6>
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	42a2      	cmp	r2, r4
 80096c4:	d12b      	bne.n	800971e <_malloc_r+0xe2>
 80096c6:	2200      	movs	r2, #0
 80096c8:	605a      	str	r2, [r3, #4]
 80096ca:	e00f      	b.n	80096ec <_malloc_r+0xb0>
 80096cc:	6822      	ldr	r2, [r4, #0]
 80096ce:	1b52      	subs	r2, r2, r5
 80096d0:	d41f      	bmi.n	8009712 <_malloc_r+0xd6>
 80096d2:	2a0b      	cmp	r2, #11
 80096d4:	d917      	bls.n	8009706 <_malloc_r+0xca>
 80096d6:	1961      	adds	r1, r4, r5
 80096d8:	42a3      	cmp	r3, r4
 80096da:	6025      	str	r5, [r4, #0]
 80096dc:	bf18      	it	ne
 80096de:	6059      	strne	r1, [r3, #4]
 80096e0:	6863      	ldr	r3, [r4, #4]
 80096e2:	bf08      	it	eq
 80096e4:	f8c8 1000 	streq.w	r1, [r8]
 80096e8:	5162      	str	r2, [r4, r5]
 80096ea:	604b      	str	r3, [r1, #4]
 80096ec:	4638      	mov	r0, r7
 80096ee:	f104 060b 	add.w	r6, r4, #11
 80096f2:	f000 f829 	bl	8009748 <__malloc_unlock>
 80096f6:	f026 0607 	bic.w	r6, r6, #7
 80096fa:	1d23      	adds	r3, r4, #4
 80096fc:	1af2      	subs	r2, r6, r3
 80096fe:	d0ae      	beq.n	800965e <_malloc_r+0x22>
 8009700:	1b9b      	subs	r3, r3, r6
 8009702:	50a3      	str	r3, [r4, r2]
 8009704:	e7ab      	b.n	800965e <_malloc_r+0x22>
 8009706:	42a3      	cmp	r3, r4
 8009708:	6862      	ldr	r2, [r4, #4]
 800970a:	d1dd      	bne.n	80096c8 <_malloc_r+0x8c>
 800970c:	f8c8 2000 	str.w	r2, [r8]
 8009710:	e7ec      	b.n	80096ec <_malloc_r+0xb0>
 8009712:	4623      	mov	r3, r4
 8009714:	6864      	ldr	r4, [r4, #4]
 8009716:	e7ac      	b.n	8009672 <_malloc_r+0x36>
 8009718:	4634      	mov	r4, r6
 800971a:	6876      	ldr	r6, [r6, #4]
 800971c:	e7b4      	b.n	8009688 <_malloc_r+0x4c>
 800971e:	4613      	mov	r3, r2
 8009720:	e7cc      	b.n	80096bc <_malloc_r+0x80>
 8009722:	230c      	movs	r3, #12
 8009724:	603b      	str	r3, [r7, #0]
 8009726:	4638      	mov	r0, r7
 8009728:	f000 f80e 	bl	8009748 <__malloc_unlock>
 800972c:	e797      	b.n	800965e <_malloc_r+0x22>
 800972e:	6025      	str	r5, [r4, #0]
 8009730:	e7dc      	b.n	80096ec <_malloc_r+0xb0>
 8009732:	605b      	str	r3, [r3, #4]
 8009734:	deff      	udf	#255	; 0xff
 8009736:	bf00      	nop
 8009738:	20004ea0 	.word	0x20004ea0

0800973c <__malloc_lock>:
 800973c:	4801      	ldr	r0, [pc, #4]	; (8009744 <__malloc_lock+0x8>)
 800973e:	f000 b8a1 	b.w	8009884 <__retarget_lock_acquire_recursive>
 8009742:	bf00      	nop
 8009744:	20004fe4 	.word	0x20004fe4

08009748 <__malloc_unlock>:
 8009748:	4801      	ldr	r0, [pc, #4]	; (8009750 <__malloc_unlock+0x8>)
 800974a:	f000 b89c 	b.w	8009886 <__retarget_lock_release_recursive>
 800974e:	bf00      	nop
 8009750:	20004fe4 	.word	0x20004fe4

08009754 <memset>:
 8009754:	4402      	add	r2, r0
 8009756:	4603      	mov	r3, r0
 8009758:	4293      	cmp	r3, r2
 800975a:	d100      	bne.n	800975e <memset+0xa>
 800975c:	4770      	bx	lr
 800975e:	f803 1b01 	strb.w	r1, [r3], #1
 8009762:	e7f9      	b.n	8009758 <memset+0x4>

08009764 <_reclaim_reent>:
 8009764:	4b29      	ldr	r3, [pc, #164]	; (800980c <_reclaim_reent+0xa8>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4283      	cmp	r3, r0
 800976a:	b570      	push	{r4, r5, r6, lr}
 800976c:	4604      	mov	r4, r0
 800976e:	d04b      	beq.n	8009808 <_reclaim_reent+0xa4>
 8009770:	69c3      	ldr	r3, [r0, #28]
 8009772:	b143      	cbz	r3, 8009786 <_reclaim_reent+0x22>
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d144      	bne.n	8009804 <_reclaim_reent+0xa0>
 800977a:	69e3      	ldr	r3, [r4, #28]
 800977c:	6819      	ldr	r1, [r3, #0]
 800977e:	b111      	cbz	r1, 8009786 <_reclaim_reent+0x22>
 8009780:	4620      	mov	r0, r4
 8009782:	f000 f88f 	bl	80098a4 <_free_r>
 8009786:	6961      	ldr	r1, [r4, #20]
 8009788:	b111      	cbz	r1, 8009790 <_reclaim_reent+0x2c>
 800978a:	4620      	mov	r0, r4
 800978c:	f000 f88a 	bl	80098a4 <_free_r>
 8009790:	69e1      	ldr	r1, [r4, #28]
 8009792:	b111      	cbz	r1, 800979a <_reclaim_reent+0x36>
 8009794:	4620      	mov	r0, r4
 8009796:	f000 f885 	bl	80098a4 <_free_r>
 800979a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800979c:	b111      	cbz	r1, 80097a4 <_reclaim_reent+0x40>
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 f880 	bl	80098a4 <_free_r>
 80097a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097a6:	b111      	cbz	r1, 80097ae <_reclaim_reent+0x4a>
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 f87b 	bl	80098a4 <_free_r>
 80097ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80097b0:	b111      	cbz	r1, 80097b8 <_reclaim_reent+0x54>
 80097b2:	4620      	mov	r0, r4
 80097b4:	f000 f876 	bl	80098a4 <_free_r>
 80097b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80097ba:	b111      	cbz	r1, 80097c2 <_reclaim_reent+0x5e>
 80097bc:	4620      	mov	r0, r4
 80097be:	f000 f871 	bl	80098a4 <_free_r>
 80097c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80097c4:	b111      	cbz	r1, 80097cc <_reclaim_reent+0x68>
 80097c6:	4620      	mov	r0, r4
 80097c8:	f000 f86c 	bl	80098a4 <_free_r>
 80097cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80097ce:	b111      	cbz	r1, 80097d6 <_reclaim_reent+0x72>
 80097d0:	4620      	mov	r0, r4
 80097d2:	f000 f867 	bl	80098a4 <_free_r>
 80097d6:	6a23      	ldr	r3, [r4, #32]
 80097d8:	b1b3      	cbz	r3, 8009808 <_reclaim_reent+0xa4>
 80097da:	4620      	mov	r0, r4
 80097dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80097e0:	4718      	bx	r3
 80097e2:	5949      	ldr	r1, [r1, r5]
 80097e4:	b941      	cbnz	r1, 80097f8 <_reclaim_reent+0x94>
 80097e6:	3504      	adds	r5, #4
 80097e8:	69e3      	ldr	r3, [r4, #28]
 80097ea:	2d80      	cmp	r5, #128	; 0x80
 80097ec:	68d9      	ldr	r1, [r3, #12]
 80097ee:	d1f8      	bne.n	80097e2 <_reclaim_reent+0x7e>
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 f857 	bl	80098a4 <_free_r>
 80097f6:	e7c0      	b.n	800977a <_reclaim_reent+0x16>
 80097f8:	680e      	ldr	r6, [r1, #0]
 80097fa:	4620      	mov	r0, r4
 80097fc:	f000 f852 	bl	80098a4 <_free_r>
 8009800:	4631      	mov	r1, r6
 8009802:	e7ef      	b.n	80097e4 <_reclaim_reent+0x80>
 8009804:	2500      	movs	r5, #0
 8009806:	e7ef      	b.n	80097e8 <_reclaim_reent+0x84>
 8009808:	bd70      	pop	{r4, r5, r6, pc}
 800980a:	bf00      	nop
 800980c:	20000260 	.word	0x20000260

08009810 <_sbrk_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	4d06      	ldr	r5, [pc, #24]	; (800982c <_sbrk_r+0x1c>)
 8009814:	2300      	movs	r3, #0
 8009816:	4604      	mov	r4, r0
 8009818:	4608      	mov	r0, r1
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	f7f8 fd48 	bl	80022b0 <_sbrk>
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d102      	bne.n	800982a <_sbrk_r+0x1a>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b103      	cbz	r3, 800982a <_sbrk_r+0x1a>
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	20004fe0 	.word	0x20004fe0

08009830 <__errno>:
 8009830:	4b01      	ldr	r3, [pc, #4]	; (8009838 <__errno+0x8>)
 8009832:	6818      	ldr	r0, [r3, #0]
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	20000260 	.word	0x20000260

0800983c <__libc_init_array>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	4d0d      	ldr	r5, [pc, #52]	; (8009874 <__libc_init_array+0x38>)
 8009840:	4c0d      	ldr	r4, [pc, #52]	; (8009878 <__libc_init_array+0x3c>)
 8009842:	1b64      	subs	r4, r4, r5
 8009844:	10a4      	asrs	r4, r4, #2
 8009846:	2600      	movs	r6, #0
 8009848:	42a6      	cmp	r6, r4
 800984a:	d109      	bne.n	8009860 <__libc_init_array+0x24>
 800984c:	4d0b      	ldr	r5, [pc, #44]	; (800987c <__libc_init_array+0x40>)
 800984e:	4c0c      	ldr	r4, [pc, #48]	; (8009880 <__libc_init_array+0x44>)
 8009850:	f000 f896 	bl	8009980 <_init>
 8009854:	1b64      	subs	r4, r4, r5
 8009856:	10a4      	asrs	r4, r4, #2
 8009858:	2600      	movs	r6, #0
 800985a:	42a6      	cmp	r6, r4
 800985c:	d105      	bne.n	800986a <__libc_init_array+0x2e>
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	f855 3b04 	ldr.w	r3, [r5], #4
 8009864:	4798      	blx	r3
 8009866:	3601      	adds	r6, #1
 8009868:	e7ee      	b.n	8009848 <__libc_init_array+0xc>
 800986a:	f855 3b04 	ldr.w	r3, [r5], #4
 800986e:	4798      	blx	r3
 8009870:	3601      	adds	r6, #1
 8009872:	e7f2      	b.n	800985a <__libc_init_array+0x1e>
 8009874:	08009bd0 	.word	0x08009bd0
 8009878:	08009bd0 	.word	0x08009bd0
 800987c:	08009bd0 	.word	0x08009bd0
 8009880:	08009bd4 	.word	0x08009bd4

08009884 <__retarget_lock_acquire_recursive>:
 8009884:	4770      	bx	lr

08009886 <__retarget_lock_release_recursive>:
 8009886:	4770      	bx	lr

08009888 <memcpy>:
 8009888:	440a      	add	r2, r1
 800988a:	4291      	cmp	r1, r2
 800988c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009890:	d100      	bne.n	8009894 <memcpy+0xc>
 8009892:	4770      	bx	lr
 8009894:	b510      	push	{r4, lr}
 8009896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800989a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800989e:	4291      	cmp	r1, r2
 80098a0:	d1f9      	bne.n	8009896 <memcpy+0xe>
 80098a2:	bd10      	pop	{r4, pc}

080098a4 <_free_r>:
 80098a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098a6:	2900      	cmp	r1, #0
 80098a8:	d044      	beq.n	8009934 <_free_r+0x90>
 80098aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ae:	9001      	str	r0, [sp, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f1a1 0404 	sub.w	r4, r1, #4
 80098b6:	bfb8      	it	lt
 80098b8:	18e4      	addlt	r4, r4, r3
 80098ba:	f7ff ff3f 	bl	800973c <__malloc_lock>
 80098be:	4a1e      	ldr	r2, [pc, #120]	; (8009938 <_free_r+0x94>)
 80098c0:	9801      	ldr	r0, [sp, #4]
 80098c2:	6813      	ldr	r3, [r2, #0]
 80098c4:	b933      	cbnz	r3, 80098d4 <_free_r+0x30>
 80098c6:	6063      	str	r3, [r4, #4]
 80098c8:	6014      	str	r4, [r2, #0]
 80098ca:	b003      	add	sp, #12
 80098cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098d0:	f7ff bf3a 	b.w	8009748 <__malloc_unlock>
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	d908      	bls.n	80098ea <_free_r+0x46>
 80098d8:	6825      	ldr	r5, [r4, #0]
 80098da:	1961      	adds	r1, r4, r5
 80098dc:	428b      	cmp	r3, r1
 80098de:	bf01      	itttt	eq
 80098e0:	6819      	ldreq	r1, [r3, #0]
 80098e2:	685b      	ldreq	r3, [r3, #4]
 80098e4:	1949      	addeq	r1, r1, r5
 80098e6:	6021      	streq	r1, [r4, #0]
 80098e8:	e7ed      	b.n	80098c6 <_free_r+0x22>
 80098ea:	461a      	mov	r2, r3
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	b10b      	cbz	r3, 80098f4 <_free_r+0x50>
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d9fa      	bls.n	80098ea <_free_r+0x46>
 80098f4:	6811      	ldr	r1, [r2, #0]
 80098f6:	1855      	adds	r5, r2, r1
 80098f8:	42a5      	cmp	r5, r4
 80098fa:	d10b      	bne.n	8009914 <_free_r+0x70>
 80098fc:	6824      	ldr	r4, [r4, #0]
 80098fe:	4421      	add	r1, r4
 8009900:	1854      	adds	r4, r2, r1
 8009902:	42a3      	cmp	r3, r4
 8009904:	6011      	str	r1, [r2, #0]
 8009906:	d1e0      	bne.n	80098ca <_free_r+0x26>
 8009908:	681c      	ldr	r4, [r3, #0]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	6053      	str	r3, [r2, #4]
 800990e:	440c      	add	r4, r1
 8009910:	6014      	str	r4, [r2, #0]
 8009912:	e7da      	b.n	80098ca <_free_r+0x26>
 8009914:	d902      	bls.n	800991c <_free_r+0x78>
 8009916:	230c      	movs	r3, #12
 8009918:	6003      	str	r3, [r0, #0]
 800991a:	e7d6      	b.n	80098ca <_free_r+0x26>
 800991c:	6825      	ldr	r5, [r4, #0]
 800991e:	1961      	adds	r1, r4, r5
 8009920:	428b      	cmp	r3, r1
 8009922:	bf04      	itt	eq
 8009924:	6819      	ldreq	r1, [r3, #0]
 8009926:	685b      	ldreq	r3, [r3, #4]
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	bf04      	itt	eq
 800992c:	1949      	addeq	r1, r1, r5
 800992e:	6021      	streq	r1, [r4, #0]
 8009930:	6054      	str	r4, [r2, #4]
 8009932:	e7ca      	b.n	80098ca <_free_r+0x26>
 8009934:	b003      	add	sp, #12
 8009936:	bd30      	pop	{r4, r5, pc}
 8009938:	20004ea0 	.word	0x20004ea0

0800993c <sqrtf>:
 800993c:	b508      	push	{r3, lr}
 800993e:	ed2d 8b02 	vpush	{d8}
 8009942:	eeb0 8a40 	vmov.f32	s16, s0
 8009946:	f000 f817 	bl	8009978 <__ieee754_sqrtf>
 800994a:	eeb4 8a48 	vcmp.f32	s16, s16
 800994e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009952:	d60c      	bvs.n	800996e <sqrtf+0x32>
 8009954:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009974 <sqrtf+0x38>
 8009958:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800995c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009960:	d505      	bpl.n	800996e <sqrtf+0x32>
 8009962:	f7ff ff65 	bl	8009830 <__errno>
 8009966:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800996a:	2321      	movs	r3, #33	; 0x21
 800996c:	6003      	str	r3, [r0, #0]
 800996e:	ecbd 8b02 	vpop	{d8}
 8009972:	bd08      	pop	{r3, pc}
 8009974:	00000000 	.word	0x00000000

08009978 <__ieee754_sqrtf>:
 8009978:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800997c:	4770      	bx	lr
	...

08009980 <_init>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	bf00      	nop
 8009984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009986:	bc08      	pop	{r3}
 8009988:	469e      	mov	lr, r3
 800998a:	4770      	bx	lr

0800998c <_fini>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	bf00      	nop
 8009990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009992:	bc08      	pop	{r3}
 8009994:	469e      	mov	lr, r3
 8009996:	4770      	bx	lr
