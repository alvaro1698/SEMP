
P2_SEMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b770  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800b908  0800b908  0001b908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b924  0800b924  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b924  0800b924  0001b924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b92c  0800b92c  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b92c  0800b92c  0001b92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b930  0800b930  0001b930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800b934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b20  2000024c  0800bb80  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d6c  0800bb80  00020d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dc89  00000000  00000000  000202bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005210  00000000  00000000  0003df48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac8  00000000  00000000  00043158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001474  00000000  00000000  00044c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af67  00000000  00000000  00046094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021e2c  00000000  00000000  00060ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cc68  00000000  00000000  00082e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000737c  00000000  00000000  0011fa90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00126e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000024c 	.word	0x2000024c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b8f0 	.word	0x0800b8f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000250 	.word	0x20000250
 80001d4:	0800b8f0 	.word	0x0800b8f0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_uldivmod>:
 80005f0:	b953      	cbnz	r3, 8000608 <__aeabi_uldivmod+0x18>
 80005f2:	b94a      	cbnz	r2, 8000608 <__aeabi_uldivmod+0x18>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	bf08      	it	eq
 80005f8:	2800      	cmpeq	r0, #0
 80005fa:	bf1c      	itt	ne
 80005fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000600:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000604:	f000 b970 	b.w	80008e8 <__aeabi_idiv0>
 8000608:	f1ad 0c08 	sub.w	ip, sp, #8
 800060c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000610:	f000 f806 	bl	8000620 <__udivmoddi4>
 8000614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	9e08      	ldr	r6, [sp, #32]
 8000626:	460d      	mov	r5, r1
 8000628:	4604      	mov	r4, r0
 800062a:	460f      	mov	r7, r1
 800062c:	2b00      	cmp	r3, #0
 800062e:	d14a      	bne.n	80006c6 <__udivmoddi4+0xa6>
 8000630:	428a      	cmp	r2, r1
 8000632:	4694      	mov	ip, r2
 8000634:	d965      	bls.n	8000702 <__udivmoddi4+0xe2>
 8000636:	fab2 f382 	clz	r3, r2
 800063a:	b143      	cbz	r3, 800064e <__udivmoddi4+0x2e>
 800063c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000640:	f1c3 0220 	rsb	r2, r3, #32
 8000644:	409f      	lsls	r7, r3
 8000646:	fa20 f202 	lsr.w	r2, r0, r2
 800064a:	4317      	orrs	r7, r2
 800064c:	409c      	lsls	r4, r3
 800064e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000652:	fa1f f58c 	uxth.w	r5, ip
 8000656:	fbb7 f1fe 	udiv	r1, r7, lr
 800065a:	0c22      	lsrs	r2, r4, #16
 800065c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000660:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000664:	fb01 f005 	mul.w	r0, r1, r5
 8000668:	4290      	cmp	r0, r2
 800066a:	d90a      	bls.n	8000682 <__udivmoddi4+0x62>
 800066c:	eb1c 0202 	adds.w	r2, ip, r2
 8000670:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000674:	f080 811c 	bcs.w	80008b0 <__udivmoddi4+0x290>
 8000678:	4290      	cmp	r0, r2
 800067a:	f240 8119 	bls.w	80008b0 <__udivmoddi4+0x290>
 800067e:	3902      	subs	r1, #2
 8000680:	4462      	add	r2, ip
 8000682:	1a12      	subs	r2, r2, r0
 8000684:	b2a4      	uxth	r4, r4
 8000686:	fbb2 f0fe 	udiv	r0, r2, lr
 800068a:	fb0e 2210 	mls	r2, lr, r0, r2
 800068e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000692:	fb00 f505 	mul.w	r5, r0, r5
 8000696:	42a5      	cmp	r5, r4
 8000698:	d90a      	bls.n	80006b0 <__udivmoddi4+0x90>
 800069a:	eb1c 0404 	adds.w	r4, ip, r4
 800069e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80006a2:	f080 8107 	bcs.w	80008b4 <__udivmoddi4+0x294>
 80006a6:	42a5      	cmp	r5, r4
 80006a8:	f240 8104 	bls.w	80008b4 <__udivmoddi4+0x294>
 80006ac:	4464      	add	r4, ip
 80006ae:	3802      	subs	r0, #2
 80006b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006b4:	1b64      	subs	r4, r4, r5
 80006b6:	2100      	movs	r1, #0
 80006b8:	b11e      	cbz	r6, 80006c2 <__udivmoddi4+0xa2>
 80006ba:	40dc      	lsrs	r4, r3
 80006bc:	2300      	movs	r3, #0
 80006be:	e9c6 4300 	strd	r4, r3, [r6]
 80006c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d908      	bls.n	80006dc <__udivmoddi4+0xbc>
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	f000 80ed 	beq.w	80008aa <__udivmoddi4+0x28a>
 80006d0:	2100      	movs	r1, #0
 80006d2:	e9c6 0500 	strd	r0, r5, [r6]
 80006d6:	4608      	mov	r0, r1
 80006d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006dc:	fab3 f183 	clz	r1, r3
 80006e0:	2900      	cmp	r1, #0
 80006e2:	d149      	bne.n	8000778 <__udivmoddi4+0x158>
 80006e4:	42ab      	cmp	r3, r5
 80006e6:	d302      	bcc.n	80006ee <__udivmoddi4+0xce>
 80006e8:	4282      	cmp	r2, r0
 80006ea:	f200 80f8 	bhi.w	80008de <__udivmoddi4+0x2be>
 80006ee:	1a84      	subs	r4, r0, r2
 80006f0:	eb65 0203 	sbc.w	r2, r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	4617      	mov	r7, r2
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	d0e2      	beq.n	80006c2 <__udivmoddi4+0xa2>
 80006fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000700:	e7df      	b.n	80006c2 <__udivmoddi4+0xa2>
 8000702:	b902      	cbnz	r2, 8000706 <__udivmoddi4+0xe6>
 8000704:	deff      	udf	#255	; 0xff
 8000706:	fab2 f382 	clz	r3, r2
 800070a:	2b00      	cmp	r3, #0
 800070c:	f040 8090 	bne.w	8000830 <__udivmoddi4+0x210>
 8000710:	1a8a      	subs	r2, r1, r2
 8000712:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000716:	fa1f fe8c 	uxth.w	lr, ip
 800071a:	2101      	movs	r1, #1
 800071c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000720:	fb07 2015 	mls	r0, r7, r5, r2
 8000724:	0c22      	lsrs	r2, r4, #16
 8000726:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800072a:	fb0e f005 	mul.w	r0, lr, r5
 800072e:	4290      	cmp	r0, r2
 8000730:	d908      	bls.n	8000744 <__udivmoddi4+0x124>
 8000732:	eb1c 0202 	adds.w	r2, ip, r2
 8000736:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x122>
 800073c:	4290      	cmp	r0, r2
 800073e:	f200 80cb 	bhi.w	80008d8 <__udivmoddi4+0x2b8>
 8000742:	4645      	mov	r5, r8
 8000744:	1a12      	subs	r2, r2, r0
 8000746:	b2a4      	uxth	r4, r4
 8000748:	fbb2 f0f7 	udiv	r0, r2, r7
 800074c:	fb07 2210 	mls	r2, r7, r0, r2
 8000750:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000754:	fb0e fe00 	mul.w	lr, lr, r0
 8000758:	45a6      	cmp	lr, r4
 800075a:	d908      	bls.n	800076e <__udivmoddi4+0x14e>
 800075c:	eb1c 0404 	adds.w	r4, ip, r4
 8000760:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000764:	d202      	bcs.n	800076c <__udivmoddi4+0x14c>
 8000766:	45a6      	cmp	lr, r4
 8000768:	f200 80bb 	bhi.w	80008e2 <__udivmoddi4+0x2c2>
 800076c:	4610      	mov	r0, r2
 800076e:	eba4 040e 	sub.w	r4, r4, lr
 8000772:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000776:	e79f      	b.n	80006b8 <__udivmoddi4+0x98>
 8000778:	f1c1 0720 	rsb	r7, r1, #32
 800077c:	408b      	lsls	r3, r1
 800077e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000782:	ea4c 0c03 	orr.w	ip, ip, r3
 8000786:	fa05 f401 	lsl.w	r4, r5, r1
 800078a:	fa20 f307 	lsr.w	r3, r0, r7
 800078e:	40fd      	lsrs	r5, r7
 8000790:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000794:	4323      	orrs	r3, r4
 8000796:	fbb5 f8f9 	udiv	r8, r5, r9
 800079a:	fa1f fe8c 	uxth.w	lr, ip
 800079e:	fb09 5518 	mls	r5, r9, r8, r5
 80007a2:	0c1c      	lsrs	r4, r3, #16
 80007a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007a8:	fb08 f50e 	mul.w	r5, r8, lr
 80007ac:	42a5      	cmp	r5, r4
 80007ae:	fa02 f201 	lsl.w	r2, r2, r1
 80007b2:	fa00 f001 	lsl.w	r0, r0, r1
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b0>
 80007b8:	eb1c 0404 	adds.w	r4, ip, r4
 80007bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007c0:	f080 8088 	bcs.w	80008d4 <__udivmoddi4+0x2b4>
 80007c4:	42a5      	cmp	r5, r4
 80007c6:	f240 8085 	bls.w	80008d4 <__udivmoddi4+0x2b4>
 80007ca:	f1a8 0802 	sub.w	r8, r8, #2
 80007ce:	4464      	add	r4, ip
 80007d0:	1b64      	subs	r4, r4, r5
 80007d2:	b29d      	uxth	r5, r3
 80007d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80007d8:	fb09 4413 	mls	r4, r9, r3, r4
 80007dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80007e4:	45a6      	cmp	lr, r4
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1da>
 80007e8:	eb1c 0404 	adds.w	r4, ip, r4
 80007ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80007f0:	d26c      	bcs.n	80008cc <__udivmoddi4+0x2ac>
 80007f2:	45a6      	cmp	lr, r4
 80007f4:	d96a      	bls.n	80008cc <__udivmoddi4+0x2ac>
 80007f6:	3b02      	subs	r3, #2
 80007f8:	4464      	add	r4, ip
 80007fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000802:	eba4 040e 	sub.w	r4, r4, lr
 8000806:	42ac      	cmp	r4, r5
 8000808:	46c8      	mov	r8, r9
 800080a:	46ae      	mov	lr, r5
 800080c:	d356      	bcc.n	80008bc <__udivmoddi4+0x29c>
 800080e:	d053      	beq.n	80008b8 <__udivmoddi4+0x298>
 8000810:	b156      	cbz	r6, 8000828 <__udivmoddi4+0x208>
 8000812:	ebb0 0208 	subs.w	r2, r0, r8
 8000816:	eb64 040e 	sbc.w	r4, r4, lr
 800081a:	fa04 f707 	lsl.w	r7, r4, r7
 800081e:	40ca      	lsrs	r2, r1
 8000820:	40cc      	lsrs	r4, r1
 8000822:	4317      	orrs	r7, r2
 8000824:	e9c6 7400 	strd	r7, r4, [r6]
 8000828:	4618      	mov	r0, r3
 800082a:	2100      	movs	r1, #0
 800082c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000830:	f1c3 0120 	rsb	r1, r3, #32
 8000834:	fa02 fc03 	lsl.w	ip, r2, r3
 8000838:	fa20 f201 	lsr.w	r2, r0, r1
 800083c:	fa25 f101 	lsr.w	r1, r5, r1
 8000840:	409d      	lsls	r5, r3
 8000842:	432a      	orrs	r2, r5
 8000844:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000848:	fa1f fe8c 	uxth.w	lr, ip
 800084c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000850:	fb07 1510 	mls	r5, r7, r0, r1
 8000854:	0c11      	lsrs	r1, r2, #16
 8000856:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800085a:	fb00 f50e 	mul.w	r5, r0, lr
 800085e:	428d      	cmp	r5, r1
 8000860:	fa04 f403 	lsl.w	r4, r4, r3
 8000864:	d908      	bls.n	8000878 <__udivmoddi4+0x258>
 8000866:	eb1c 0101 	adds.w	r1, ip, r1
 800086a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800086e:	d22f      	bcs.n	80008d0 <__udivmoddi4+0x2b0>
 8000870:	428d      	cmp	r5, r1
 8000872:	d92d      	bls.n	80008d0 <__udivmoddi4+0x2b0>
 8000874:	3802      	subs	r0, #2
 8000876:	4461      	add	r1, ip
 8000878:	1b49      	subs	r1, r1, r5
 800087a:	b292      	uxth	r2, r2
 800087c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000880:	fb07 1115 	mls	r1, r7, r5, r1
 8000884:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000888:	fb05 f10e 	mul.w	r1, r5, lr
 800088c:	4291      	cmp	r1, r2
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0x282>
 8000890:	eb1c 0202 	adds.w	r2, ip, r2
 8000894:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000898:	d216      	bcs.n	80008c8 <__udivmoddi4+0x2a8>
 800089a:	4291      	cmp	r1, r2
 800089c:	d914      	bls.n	80008c8 <__udivmoddi4+0x2a8>
 800089e:	3d02      	subs	r5, #2
 80008a0:	4462      	add	r2, ip
 80008a2:	1a52      	subs	r2, r2, r1
 80008a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008a8:	e738      	b.n	800071c <__udivmoddi4+0xfc>
 80008aa:	4631      	mov	r1, r6
 80008ac:	4630      	mov	r0, r6
 80008ae:	e708      	b.n	80006c2 <__udivmoddi4+0xa2>
 80008b0:	4639      	mov	r1, r7
 80008b2:	e6e6      	b.n	8000682 <__udivmoddi4+0x62>
 80008b4:	4610      	mov	r0, r2
 80008b6:	e6fb      	b.n	80006b0 <__udivmoddi4+0x90>
 80008b8:	4548      	cmp	r0, r9
 80008ba:	d2a9      	bcs.n	8000810 <__udivmoddi4+0x1f0>
 80008bc:	ebb9 0802 	subs.w	r8, r9, r2
 80008c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008c4:	3b01      	subs	r3, #1
 80008c6:	e7a3      	b.n	8000810 <__udivmoddi4+0x1f0>
 80008c8:	4645      	mov	r5, r8
 80008ca:	e7ea      	b.n	80008a2 <__udivmoddi4+0x282>
 80008cc:	462b      	mov	r3, r5
 80008ce:	e794      	b.n	80007fa <__udivmoddi4+0x1da>
 80008d0:	4640      	mov	r0, r8
 80008d2:	e7d1      	b.n	8000878 <__udivmoddi4+0x258>
 80008d4:	46d0      	mov	r8, sl
 80008d6:	e77b      	b.n	80007d0 <__udivmoddi4+0x1b0>
 80008d8:	3d02      	subs	r5, #2
 80008da:	4462      	add	r2, ip
 80008dc:	e732      	b.n	8000744 <__udivmoddi4+0x124>
 80008de:	4608      	mov	r0, r1
 80008e0:	e70a      	b.n	80006f8 <__udivmoddi4+0xd8>
 80008e2:	4464      	add	r4, ip
 80008e4:	3802      	subs	r0, #2
 80008e6:	e742      	b.n	800076e <__udivmoddi4+0x14e>

080008e8 <__aeabi_idiv0>:
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80008fa:	f00a fa17 	bl	800ad2c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	461a      	mov	r2, r3
 8000906:	2120      	movs	r1, #32
 8000908:	2032      	movs	r0, #50	; 0x32
 800090a:	f00a fa67 	bl	800addc <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800090e:	2300      	movs	r3, #0
 8000910:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	461a      	mov	r2, r3
 8000916:	2123      	movs	r1, #35	; 0x23
 8000918:	2032      	movs	r0, #50	; 0x32
 800091a:	f00a fa5f 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800093a:	2300      	movs	r3, #0
 800093c:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800093e:	f00a f9f5 	bl	800ad2c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8000942:	210f      	movs	r1, #15
 8000944:	2032      	movs	r0, #50	; 0x32
 8000946:	f00a fa5c 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 800094e:	79fb      	ldrb	r3, [r7, #7]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800095e:	2124      	movs	r1, #36	; 0x24
 8000960:	2032      	movs	r0, #50	; 0x32
 8000962:	f00a fa4e 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000970:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	461a      	mov	r2, r3
 8000976:	2124      	movs	r1, #36	; 0x24
 8000978:	2032      	movs	r0, #50	; 0x32
 800097a:	f00a fa2f 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b084      	sub	sp, #16
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000990:	2121      	movs	r1, #33	; 0x21
 8000992:	2032      	movs	r0, #50	; 0x32
 8000994:	f00a fa35 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000998:	4603      	mov	r3, r0
 800099a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	f003 030c 	and.w	r3, r3, #12
 80009a2:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80009a4:	7bfa      	ldrb	r2, [r7, #15]
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	461a      	mov	r2, r3
 80009b0:	2121      	movs	r1, #33	; 0x21
 80009b2:	2032      	movs	r0, #50	; 0x32
 80009b4:	f00a fa12 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80009ca:	2121      	movs	r1, #33	; 0x21
 80009cc:	2032      	movs	r0, #50	; 0x32
 80009ce:	f00a fa18 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 80009d2:	4603      	mov	r3, r0
 80009d4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	f023 0308 	bic.w	r3, r3, #8
 80009dc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	461a      	mov	r2, r3
 80009ea:	2121      	movs	r1, #33	; 0x21
 80009ec:	2032      	movs	r0, #50	; 0x32
 80009ee:	f00a f9f5 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b088      	sub	sp, #32
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000a02:	2300      	movs	r3, #0
 8000a04:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8000a0e:	2123      	movs	r1, #35	; 0x23
 8000a10:	2032      	movs	r0, #50	; 0x32
 8000a12:	f00a f9f6 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000a16:	4603      	mov	r3, r0
 8000a18:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000a1a:	2124      	movs	r1, #36	; 0x24
 8000a1c:	2032      	movs	r0, #50	; 0x32
 8000a1e:	f00a f9f0 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000a22:	4603      	mov	r3, r0
 8000a24:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8000a26:	2128      	movs	r1, #40	; 0x28
 8000a28:	2032      	movs	r0, #50	; 0x32
 8000a2a:	f00a f9ea 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8000a34:	2129      	movs	r1, #41	; 0x29
 8000a36:	2032      	movs	r0, #50	; 0x32
 8000a38:	f00a f9e3 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8000a42:	212a      	movs	r1, #42	; 0x2a
 8000a44:	2032      	movs	r0, #50	; 0x32
 8000a46:	f00a f9dc 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8000a50:	212b      	movs	r1, #43	; 0x2b
 8000a52:	2032      	movs	r0, #50	; 0x32
 8000a54:	f00a f9d5 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8000a5e:	212c      	movs	r1, #44	; 0x2c
 8000a60:	2032      	movs	r0, #50	; 0x32
 8000a62:	f00a f9ce 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8000a6c:	212d      	movs	r1, #45	; 0x2d
 8000a6e:	2032      	movs	r0, #50	; 0x32
 8000a70:	f00a f9c7 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8000a7a:	7d3b      	ldrb	r3, [r7, #20]
 8000a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d123      	bne.n	8000acc <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	77fb      	strb	r3, [r7, #31]
 8000a88:	e01c      	b.n	8000ac4 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000a8a:	7ffb      	ldrb	r3, [r7, #31]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	3301      	adds	r3, #1
 8000a90:	3320      	adds	r3, #32
 8000a92:	443b      	add	r3, r7
 8000a94:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	021b      	lsls	r3, r3, #8
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	7ffb      	ldrb	r3, [r7, #31]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	3320      	adds	r3, #32
 8000aa4:	443b      	add	r3, r7
 8000aa6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4413      	add	r3, r2
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	7ffb      	ldrb	r3, [r7, #31]
 8000ab2:	b212      	sxth	r2, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	3320      	adds	r3, #32
 8000ab8:	443b      	add	r3, r7
 8000aba:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000abe:	7ffb      	ldrb	r3, [r7, #31]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	77fb      	strb	r3, [r7, #31]
 8000ac4:	7ffb      	ldrb	r3, [r7, #31]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d9df      	bls.n	8000a8a <LSM303AGR_AccReadXYZ+0x90>
 8000aca:	e022      	b.n	8000b12 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	77fb      	strb	r3, [r7, #31]
 8000ad0:	e01c      	b.n	8000b0c <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000ad2:	7ffb      	ldrb	r3, [r7, #31]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	3320      	adds	r3, #32
 8000ad8:	443b      	add	r3, r7
 8000ada:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	7ffb      	ldrb	r3, [r7, #31]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	3301      	adds	r3, #1
 8000aea:	3320      	adds	r3, #32
 8000aec:	443b      	add	r3, r7
 8000aee:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	4413      	add	r3, r2
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	7ffb      	ldrb	r3, [r7, #31]
 8000afa:	b212      	sxth	r2, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	3320      	adds	r3, #32
 8000b00:	443b      	add	r3, r7
 8000b02:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000b06:	7ffb      	ldrb	r3, [r7, #31]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	77fb      	strb	r3, [r7, #31]
 8000b0c:	7ffb      	ldrb	r3, [r7, #31]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d9df      	bls.n	8000ad2 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8000b12:	7d3b      	ldrb	r3, [r7, #20]
 8000b14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000b18:	2b30      	cmp	r3, #48	; 0x30
 8000b1a:	d013      	beq.n	8000b44 <LSM303AGR_AccReadXYZ+0x14a>
 8000b1c:	2b30      	cmp	r3, #48	; 0x30
 8000b1e:	dc14      	bgt.n	8000b4a <LSM303AGR_AccReadXYZ+0x150>
 8000b20:	2b20      	cmp	r3, #32
 8000b22:	d00c      	beq.n	8000b3e <LSM303AGR_AccReadXYZ+0x144>
 8000b24:	2b20      	cmp	r3, #32
 8000b26:	dc10      	bgt.n	8000b4a <LSM303AGR_AccReadXYZ+0x150>
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <LSM303AGR_AccReadXYZ+0x138>
 8000b2c:	2b10      	cmp	r3, #16
 8000b2e:	d003      	beq.n	8000b38 <LSM303AGR_AccReadXYZ+0x13e>
 8000b30:	e00b      	b.n	8000b4a <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8000b32:	2301      	movs	r3, #1
 8000b34:	77bb      	strb	r3, [r7, #30]
    break;
 8000b36:	e008      	b.n	8000b4a <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	77bb      	strb	r3, [r7, #30]
    break;
 8000b3c:	e005      	b.n	8000b4a <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	77bb      	strb	r3, [r7, #30]
    break;
 8000b42:	e002      	b.n	8000b4a <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8000b44:	230c      	movs	r3, #12
 8000b46:	77bb      	strb	r3, [r7, #30]
    break;
 8000b48:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	77fb      	strb	r3, [r7, #31]
 8000b4e:	e014      	b.n	8000b7a <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000b50:	7ffb      	ldrb	r3, [r7, #31]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	3320      	adds	r3, #32
 8000b56:	443b      	add	r3, r7
 8000b58:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	7fbb      	ldrb	r3, [r7, #30]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	fb12 f303 	smulbb	r3, r2, r3
 8000b66:	b299      	uxth	r1, r3
 8000b68:	7ffb      	ldrb	r3, [r7, #31]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	b20a      	sxth	r2, r1
 8000b72:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000b74:	7ffb      	ldrb	r3, [r7, #31]
 8000b76:	3301      	adds	r3, #1
 8000b78:	77fb      	strb	r3, [r7, #31]
 8000b7a:	7ffb      	ldrb	r3, [r7, #31]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d9e7      	bls.n	8000b50 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3720      	adds	r7, #32
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b084      	sub	sp, #16
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000b98:	2121      	movs	r1, #33	; 0x21
 8000b9a:	2032      	movs	r0, #50	; 0x32
 8000b9c:	f00a f931 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	f023 0304 	bic.w	r3, r3, #4
 8000baa:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000bac:	7bfa      	ldrb	r2, [r7, #15]
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	2121      	movs	r1, #33	; 0x21
 8000bba:	2032      	movs	r0, #50	; 0x32
 8000bbc:	f00a f90e 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8000bd6:	2122      	movs	r1, #34	; 0x22
 8000bd8:	2032      	movs	r0, #50	; 0x32
 8000bda:	f00a f912 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000bde:	4603      	mov	r3, r0
 8000be0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8000be2:	7bfa      	ldrb	r2, [r7, #15]
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	461a      	mov	r2, r3
 8000bee:	2122      	movs	r1, #34	; 0x22
 8000bf0:	2032      	movs	r0, #50	; 0x32
 8000bf2:	f00a f8f3 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8000c0c:	2138      	movs	r1, #56	; 0x38
 8000c0e:	2032      	movs	r0, #50	; 0x32
 8000c10:	f00a f8f7 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000c14:	4603      	mov	r3, r0
 8000c16:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000c18:	7bfa      	ldrb	r2, [r7, #15]
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	461a      	mov	r2, r3
 8000c24:	2138      	movs	r1, #56	; 0x38
 8000c26:	2032      	movs	r0, #50	; 0x32
 8000c28:	f00a f8d8 	bl	800addc <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000c2c:	230a      	movs	r3, #10
 8000c2e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	461a      	mov	r2, r3
 8000c34:	213a      	movs	r1, #58	; 0x3a
 8000c36:	2032      	movs	r0, #50	; 0x32
 8000c38:	f00a f8d0 	bl	800addc <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000c3c:	2305      	movs	r3, #5
 8000c3e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	461a      	mov	r2, r3
 8000c44:	213b      	movs	r1, #59	; 0x3b
 8000c46:	2032      	movs	r0, #50	; 0x32
 8000c48:	f00a f8c8 	bl	800addc <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	213c      	movs	r1, #60	; 0x3c
 8000c52:	2032      	movs	r0, #50	; 0x32
 8000c54:	f00a f8c2 	bl	800addc <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000c58:	2332      	movs	r3, #50	; 0x32
 8000c5a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	213d      	movs	r1, #61	; 0x3d
 8000c62:	2032      	movs	r0, #50	; 0x32
 8000c64:	f00a f8ba 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000c74:	f00a f882 	bl	800ad7c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8000c78:	2080      	movs	r0, #128	; 0x80
 8000c7a:	f7ff ffa5 	bl	8000bc8 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8000c7e:	2004      	movs	r0, #4
 8000c80:	f7ff ff83 	bl	8000b8a <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8000c84:	2010      	movs	r0, #16
 8000c86:	f7ff ffba 	bl	8000bfe <LSM303AGR_AccClickITEnable>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b084      	sub	sp, #16
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000c9c:	f00a f846 	bl	800ad2c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	2120      	movs	r1, #32
 8000caa:	2032      	movs	r0, #50	; 0x32
 8000cac:	f00a f896 	bl	800addc <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2123      	movs	r1, #35	; 0x23
 8000cba:	2032      	movs	r0, #50	; 0x32
 8000cbc:	f00a f88e 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000ce0:	f00a f824 	bl	800ad2c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8000ce4:	210f      	movs	r1, #15
 8000ce6:	2032      	movs	r0, #50	; 0x32
 8000ce8:	f00a f88b 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000d00:	2124      	movs	r1, #36	; 0x24
 8000d02:	2032      	movs	r0, #50	; 0x32
 8000d04:	f00a f87d 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d12:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	461a      	mov	r2, r3
 8000d18:	2124      	movs	r1, #36	; 0x24
 8000d1a:	2032      	movs	r0, #50	; 0x32
 8000d1c:	f00a f85e 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000d32:	2121      	movs	r1, #33	; 0x21
 8000d34:	2032      	movs	r0, #50	; 0x32
 8000d36:	f00a f864 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000d46:	7bfa      	ldrb	r2, [r7, #15]
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	461a      	mov	r2, r3
 8000d52:	2121      	movs	r1, #33	; 0x21
 8000d54:	2032      	movs	r0, #50	; 0x32
 8000d56:	f00a f841 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b084      	sub	sp, #16
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000d6c:	2121      	movs	r1, #33	; 0x21
 8000d6e:	2032      	movs	r0, #50	; 0x32
 8000d70:	f00a f847 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	f023 0308 	bic.w	r3, r3, #8
 8000d7e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000d80:	7bfa      	ldrb	r2, [r7, #15]
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	2121      	movs	r1, #33	; 0x21
 8000d8e:	2032      	movs	r0, #50	; 0x32
 8000d90:	f00a f824 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000da4:	2300      	movs	r3, #0
 8000da6:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000dac:	2301      	movs	r3, #1
 8000dae:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000db0:	2123      	movs	r1, #35	; 0x23
 8000db2:	2032      	movs	r0, #50	; 0x32
 8000db4:	f00a f825 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000db8:	4603      	mov	r3, r0
 8000dba:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000dbc:	2124      	movs	r1, #36	; 0x24
 8000dbe:	2032      	movs	r0, #50	; 0x32
 8000dc0:	f00a f81f 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8000dc8:	2128      	movs	r1, #40	; 0x28
 8000dca:	2032      	movs	r0, #50	; 0x32
 8000dcc:	f00a f819 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000dd6:	2129      	movs	r1, #41	; 0x29
 8000dd8:	2032      	movs	r0, #50	; 0x32
 8000dda:	f00a f812 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000de4:	212a      	movs	r1, #42	; 0x2a
 8000de6:	2032      	movs	r0, #50	; 0x32
 8000de8:	f00a f80b 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000df2:	212b      	movs	r1, #43	; 0x2b
 8000df4:	2032      	movs	r0, #50	; 0x32
 8000df6:	f00a f804 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000e00:	212c      	movs	r1, #44	; 0x2c
 8000e02:	2032      	movs	r0, #50	; 0x32
 8000e04:	f009 fffd 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000e0e:	212d      	movs	r1, #45	; 0x2d
 8000e10:	2032      	movs	r0, #50	; 0x32
 8000e12:	f009 fff6 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8000e1c:	7d3b      	ldrb	r3, [r7, #20]
 8000e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d123      	bne.n	8000e6e <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	77fb      	strb	r3, [r7, #31]
 8000e2a:	e01c      	b.n	8000e66 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000e2c:	7ffb      	ldrb	r3, [r7, #31]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	3301      	adds	r3, #1
 8000e32:	3320      	adds	r3, #32
 8000e34:	443b      	add	r3, r7
 8000e36:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	7ffb      	ldrb	r3, [r7, #31]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	3320      	adds	r3, #32
 8000e46:	443b      	add	r3, r7
 8000e48:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	4413      	add	r3, r2
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	7ffb      	ldrb	r3, [r7, #31]
 8000e54:	b212      	sxth	r2, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	3320      	adds	r3, #32
 8000e5a:	443b      	add	r3, r7
 8000e5c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000e60:	7ffb      	ldrb	r3, [r7, #31]
 8000e62:	3301      	adds	r3, #1
 8000e64:	77fb      	strb	r3, [r7, #31]
 8000e66:	7ffb      	ldrb	r3, [r7, #31]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d9df      	bls.n	8000e2c <LSM303DLHC_AccReadXYZ+0x90>
 8000e6c:	e022      	b.n	8000eb4 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	77fb      	strb	r3, [r7, #31]
 8000e72:	e01c      	b.n	8000eae <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000e74:	7ffb      	ldrb	r3, [r7, #31]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	3320      	adds	r3, #32
 8000e7a:	443b      	add	r3, r7
 8000e7c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	7ffb      	ldrb	r3, [r7, #31]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	3320      	adds	r3, #32
 8000e8e:	443b      	add	r3, r7
 8000e90:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	4413      	add	r3, r2
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	7ffb      	ldrb	r3, [r7, #31]
 8000e9c:	b212      	sxth	r2, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	3320      	adds	r3, #32
 8000ea2:	443b      	add	r3, r7
 8000ea4:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000ea8:	7ffb      	ldrb	r3, [r7, #31]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	77fb      	strb	r3, [r7, #31]
 8000eae:	7ffb      	ldrb	r3, [r7, #31]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d9df      	bls.n	8000e74 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000eb4:	7d3b      	ldrb	r3, [r7, #20]
 8000eb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000eba:	2b30      	cmp	r3, #48	; 0x30
 8000ebc:	d013      	beq.n	8000ee6 <LSM303DLHC_AccReadXYZ+0x14a>
 8000ebe:	2b30      	cmp	r3, #48	; 0x30
 8000ec0:	dc14      	bgt.n	8000eec <LSM303DLHC_AccReadXYZ+0x150>
 8000ec2:	2b20      	cmp	r3, #32
 8000ec4:	d00c      	beq.n	8000ee0 <LSM303DLHC_AccReadXYZ+0x144>
 8000ec6:	2b20      	cmp	r3, #32
 8000ec8:	dc10      	bgt.n	8000eec <LSM303DLHC_AccReadXYZ+0x150>
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <LSM303DLHC_AccReadXYZ+0x138>
 8000ece:	2b10      	cmp	r3, #16
 8000ed0:	d003      	beq.n	8000eda <LSM303DLHC_AccReadXYZ+0x13e>
 8000ed2:	e00b      	b.n	8000eec <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	77bb      	strb	r3, [r7, #30]
    break;
 8000ed8:	e008      	b.n	8000eec <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8000eda:	2302      	movs	r3, #2
 8000edc:	77bb      	strb	r3, [r7, #30]
    break;
 8000ede:	e005      	b.n	8000eec <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	77bb      	strb	r3, [r7, #30]
    break;
 8000ee4:	e002      	b.n	8000eec <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8000ee6:	230c      	movs	r3, #12
 8000ee8:	77bb      	strb	r3, [r7, #30]
    break;
 8000eea:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	77fb      	strb	r3, [r7, #31]
 8000ef0:	e014      	b.n	8000f1c <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000ef2:	7ffb      	ldrb	r3, [r7, #31]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	3320      	adds	r3, #32
 8000ef8:	443b      	add	r3, r7
 8000efa:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	7fbb      	ldrb	r3, [r7, #30]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	fb12 f303 	smulbb	r3, r2, r3
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	7ffb      	ldrb	r3, [r7, #31]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	b20a      	sxth	r2, r1
 8000f14:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000f16:	7ffb      	ldrb	r3, [r7, #31]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	77fb      	strb	r3, [r7, #31]
 8000f1c:	7ffb      	ldrb	r3, [r7, #31]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d9e7      	bls.n	8000ef2 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000f3a:	2121      	movs	r1, #33	; 0x21
 8000f3c:	2032      	movs	r0, #50	; 0x32
 8000f3e:	f009 ff60 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000f42:	4603      	mov	r3, r0
 8000f44:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	f023 0304 	bic.w	r3, r3, #4
 8000f4c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2121      	movs	r1, #33	; 0x21
 8000f5c:	2032      	movs	r0, #50	; 0x32
 8000f5e:	f009 ff3d 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8000f78:	2122      	movs	r1, #34	; 0x22
 8000f7a:	2032      	movs	r0, #50	; 0x32
 8000f7c:	f009 ff41 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2122      	movs	r1, #34	; 0x22
 8000f92:	2032      	movs	r0, #50	; 0x32
 8000f94:	f009 ff22 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8000fae:	2138      	movs	r1, #56	; 0x38
 8000fb0:	2032      	movs	r0, #50	; 0x32
 8000fb2:	f009 ff26 	bl	800ae02 <COMPASSACCELERO_IO_Read>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2138      	movs	r1, #56	; 0x38
 8000fc8:	2032      	movs	r0, #50	; 0x32
 8000fca:	f009 ff07 	bl	800addc <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000fce:	230a      	movs	r3, #10
 8000fd0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	213a      	movs	r1, #58	; 0x3a
 8000fd8:	2032      	movs	r0, #50	; 0x32
 8000fda:	f009 feff 	bl	800addc <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	213b      	movs	r1, #59	; 0x3b
 8000fe8:	2032      	movs	r0, #50	; 0x32
 8000fea:	f009 fef7 	bl	800addc <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	213c      	movs	r1, #60	; 0x3c
 8000ff4:	2032      	movs	r0, #50	; 0x32
 8000ff6:	f009 fef1 	bl	800addc <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000ffa:	2332      	movs	r3, #50	; 0x32
 8000ffc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	461a      	mov	r2, r3
 8001002:	213d      	movs	r1, #61	; 0x3d
 8001004:	2032      	movs	r0, #50	; 0x32
 8001006:	f009 fee9 	bl	800addc <COMPASSACCELERO_IO_Write>
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001016:	f009 feb1 	bl	800ad7c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 800101a:	2080      	movs	r0, #128	; 0x80
 800101c:	f7ff ffa5 	bl	8000f6a <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001020:	2004      	movs	r0, #4
 8001022:	f7ff ff83 	bl	8000f2c <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001026:	2010      	movs	r0, #16
 8001028:	f7ff ffba 	bl	8000fa0 <LSM303DLHC_AccClickITEnable>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <fsm_new>:

fsm_t*

fsm_new (fsm_trans_t* tt)

{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 8001038:	2008      	movs	r0, #8
 800103a:	f00a faeb 	bl	800b614 <malloc>
 800103e:	4603      	mov	r3, r0
 8001040:	60fb      	str	r3, [r7, #12]

  fsm_init (this, tt);
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f805 	bl	8001054 <fsm_init>

  return this;
 800104a:	68fb      	ldr	r3, [r7, #12]

}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <fsm_init>:

void

fsm_init (fsm_t* this, fsm_trans_t* tt)

{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]

  this->tt = tt;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	605a      	str	r2, [r3, #4]

  this->current_state = tt[0].orig_state;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	601a      	str	r2, [r3, #0]

}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <fsm_fire>:

void

fsm_fire (fsm_t* this)

{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  fsm_trans_t* t;

  for (t = this->tt; t->orig_state >= 0; ++t) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e01c      	b.n	80010c2 <fsm_fire+0x4a>

    if ((this->current_state == t->orig_state) && t->in(this)) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d113      	bne.n	80010bc <fsm_fire+0x44>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	4798      	blx	r3
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00c      	beq.n	80010bc <fsm_fire+0x44>

      this->current_state = t->dest_state;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	601a      	str	r2, [r3, #0]

      if (t->out)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00c      	beq.n	80010cc <fsm_fire+0x54>

        t->out(this);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	4798      	blx	r3

      break;
 80010ba:	e007      	b.n	80010cc <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3310      	adds	r3, #16
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	dade      	bge.n	8001088 <fsm_fire+0x10>

    }

  }

 80010ca:	e000      	b.n	80010ce <fsm_fire+0x56>
      break;
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
 80010f2:	4b65      	ldr	r3, [pc, #404]	; (8001288 <MX_GPIO_Init+0x1b0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a64      	ldr	r2, [pc, #400]	; (8001288 <MX_GPIO_Init+0x1b0>)
 80010f8:	f043 0310 	orr.w	r3, r3, #16
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b62      	ldr	r3, [pc, #392]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	4b5e      	ldr	r3, [pc, #376]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a5d      	ldr	r2, [pc, #372]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b5b      	ldr	r3, [pc, #364]	; (8001288 <MX_GPIO_Init+0x1b0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <MX_GPIO_Init+0x1b0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a56      	ldr	r2, [pc, #344]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b54      	ldr	r3, [pc, #336]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b50      	ldr	r3, [pc, #320]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a4f      	ldr	r2, [pc, #316]	; (8001288 <MX_GPIO_Init+0x1b0>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b4d      	ldr	r3, [pc, #308]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b49      	ldr	r3, [pc, #292]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a48      	ldr	r2, [pc, #288]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b46      	ldr	r3, [pc, #280]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b42      	ldr	r3, [pc, #264]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a41      	ldr	r2, [pc, #260]	; (8001288 <MX_GPIO_Init+0x1b0>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <MX_GPIO_Init+0x1b0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2108      	movs	r1, #8
 800119a:	483c      	ldr	r0, [pc, #240]	; (800128c <MX_GPIO_Init+0x1b4>)
 800119c:	f001 fd68 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2101      	movs	r1, #1
 80011a4:	483a      	ldr	r0, [pc, #232]	; (8001290 <MX_GPIO_Init+0x1b8>)
 80011a6:	f001 fd63 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f24e 0110 	movw	r1, #57360	; 0xe010
 80011b0:	4838      	ldr	r0, [pc, #224]	; (8001294 <MX_GPIO_Init+0x1bc>)
 80011b2:	f001 fd5d 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80011b6:	2304      	movs	r3, #4
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4830      	ldr	r0, [pc, #192]	; (800128c <MX_GPIO_Init+0x1b4>)
 80011ca:	f001 fae9 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011ce:	2308      	movs	r3, #8
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	4829      	ldr	r0, [pc, #164]	; (800128c <MX_GPIO_Init+0x1b4>)
 80011e6:	f001 fadb 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80011ea:	2332      	movs	r3, #50	; 0x32
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011ee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4823      	ldr	r0, [pc, #140]	; (800128c <MX_GPIO_Init+0x1b4>)
 8001200:	f001 face 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001204:	2301      	movs	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	481d      	ldr	r0, [pc, #116]	; (8001290 <MX_GPIO_Init+0x1b8>)
 800121c:	f001 fac0 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = boton_Pin;
 8001220:	2301      	movs	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001224:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(boton_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	4818      	ldr	r0, [pc, #96]	; (8001298 <MX_GPIO_Init+0x1c0>)
 8001236:	f001 fab3 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 800123a:	f24e 0310 	movw	r3, #57360	; 0xe010
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	4810      	ldr	r0, [pc, #64]	; (8001294 <MX_GPIO_Init+0x1bc>)
 8001254:	f001 faa4 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001258:	2320      	movs	r3, #32
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4619      	mov	r1, r3
 800126a:	480a      	ldr	r0, [pc, #40]	; (8001294 <MX_GPIO_Init+0x1bc>)
 800126c:	f001 fa98 	bl	80027a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	2006      	movs	r0, #6
 8001276:	f001 fa5c 	bl	8002732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800127a:	2006      	movs	r0, #6
 800127c:	f001 fa75 	bl	800276a <HAL_NVIC_EnableIRQ>

}
 8001280:	bf00      	nop
 8001282:	3730      	adds	r7, #48	; 0x30
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	40021000 	.word	0x40021000
 8001290:	40020800 	.word	0x40020800
 8001294:	40020c00 	.word	0x40020c00
 8001298:	40020000 	.word	0x40020000

0800129c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_I2C1_Init+0x50>)
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <MX_I2C1_Init+0x54>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_I2C1_Init+0x50>)
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <MX_I2C1_Init+0x58>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_I2C1_Init+0x50>)
 80012da:	f003 f91f 	bl	800451c <HAL_I2C_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e4:	f000 fd64 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000268 	.word	0x20000268
 80012f0:	40005400 	.word	0x40005400
 80012f4:	000186a0 	.word	0x000186a0

080012f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a19      	ldr	r2, [pc, #100]	; (800137c <HAL_I2C_MspInit+0x84>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d12c      	bne.n	8001374 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_I2C_MspInit+0x88>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a17      	ldr	r2, [pc, #92]	; (8001380 <HAL_I2C_MspInit+0x88>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_I2C_MspInit+0x88>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001336:	f44f 7310 	mov.w	r3, #576	; 0x240
 800133a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133c:	2312      	movs	r3, #18
 800133e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001340:	2301      	movs	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001348:	2304      	movs	r3, #4
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	480c      	ldr	r0, [pc, #48]	; (8001384 <HAL_I2C_MspInit+0x8c>)
 8001354:	f001 fa24 	bl	80027a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_I2C_MspInit+0x88>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_I2C_MspInit+0x88>)
 8001362:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_I2C_MspInit+0x88>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	; 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40005400 	.word	0x40005400
 8001380:	40023800 	.word	0x40023800
 8001384:	40020400 	.word	0x40020400

08001388 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_I2C_MspDeInit+0x38>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d10e      	bne.n	80013b8 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_I2C_MspDeInit+0x3c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <HAL_I2C_MspDeInit+0x3c>)
 80013a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 80013a6:	2140      	movs	r1, #64	; 0x40
 80013a8:	4807      	ldr	r0, [pc, #28]	; (80013c8 <HAL_I2C_MspDeInit+0x40>)
 80013aa:	f001 fb7d 	bl	8002aa8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 80013ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_I2C_MspDeInit+0x40>)
 80013b4:	f001 fb78 	bl	8002aa8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40005400 	.word	0x40005400
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020400 	.word	0x40020400

080013cc <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2S2_Init+0x50>)
 80013d2:	4a13      	ldr	r2, [pc, #76]	; (8001420 <MX_I2S2_Init+0x54>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_I2S2_Init+0x50>)
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_I2S2_Init+0x50>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <MX_I2S2_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_I2S2_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <MX_I2S2_Init+0x50>)
 80013f2:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <MX_I2S2_Init+0x58>)
 80013f4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_I2S2_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <MX_I2S2_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_I2S2_Init+0x50>)
 8001404:	2201      	movs	r2, #1
 8001406:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_I2S2_Init+0x50>)
 800140a:	f004 f885 	bl	8005518 <HAL_I2S_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001414:	f000 fccc 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200002bc 	.word	0x200002bc
 8001420:	40003800 	.word	0x40003800
 8001424:	00017700 	.word	0x00017700

08001428 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <MX_I2S3_Init+0x54>)
 800142e:	4a14      	ldr	r2, [pc, #80]	; (8001480 <MX_I2S3_Init+0x58>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_I2S3_Init+0x54>)
 8001434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001438:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_I2S3_Init+0x54>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_I2S3_Init+0x54>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <MX_I2S3_Init+0x54>)
 8001448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_I2S3_Init+0x54>)
 8001450:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <MX_I2S3_Init+0x5c>)
 8001452:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_I2S3_Init+0x54>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_I2S3_Init+0x54>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_I2S3_Init+0x54>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_I2S3_Init+0x54>)
 8001468:	f004 f856 	bl	8005518 <HAL_I2S_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001472:	f000 fc9d 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000304 	.word	0x20000304
 8001480:	40003c00 	.word	0x40003c00
 8001484:	00017700 	.word	0x00017700

08001488 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a59      	ldr	r2, [pc, #356]	; (800160c <HAL_I2S_MspInit+0x184>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d15b      	bne.n	8001562 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
 80014ae:	4b58      	ldr	r3, [pc, #352]	; (8001610 <HAL_I2S_MspInit+0x188>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a57      	ldr	r2, [pc, #348]	; (8001610 <HAL_I2S_MspInit+0x188>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b55      	ldr	r3, [pc, #340]	; (8001610 <HAL_I2S_MspInit+0x188>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	623b      	str	r3, [r7, #32]
 80014c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	4b51      	ldr	r3, [pc, #324]	; (8001610 <HAL_I2S_MspInit+0x188>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a50      	ldr	r2, [pc, #320]	; (8001610 <HAL_I2S_MspInit+0x188>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b4e      	ldr	r3, [pc, #312]	; (8001610 <HAL_I2S_MspInit+0x188>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <HAL_I2S_MspInit+0x188>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a49      	ldr	r2, [pc, #292]	; (8001610 <HAL_I2S_MspInit+0x188>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_I2S_MspInit+0x188>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014fe:	2304      	movs	r3, #4
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800150e:	2306      	movs	r3, #6
 8001510:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	483e      	ldr	r0, [pc, #248]	; (8001614 <HAL_I2S_MspInit+0x18c>)
 800151a:	f001 f941 	bl	80027a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800151e:	2308      	movs	r3, #8
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800152e:	2305      	movs	r3, #5
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	4836      	ldr	r0, [pc, #216]	; (8001614 <HAL_I2S_MspInit+0x18c>)
 800153a:	f001 f931 	bl	80027a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800153e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001550:	2305      	movs	r3, #5
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	482f      	ldr	r0, [pc, #188]	; (8001618 <HAL_I2S_MspInit+0x190>)
 800155c:	f001 f920 	bl	80027a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001560:	e04f      	b.n	8001602 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a2d      	ldr	r2, [pc, #180]	; (800161c <HAL_I2S_MspInit+0x194>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d14a      	bne.n	8001602 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <HAL_I2S_MspInit+0x188>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	4a26      	ldr	r2, [pc, #152]	; (8001610 <HAL_I2S_MspInit+0x188>)
 8001576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157a:	6413      	str	r3, [r2, #64]	; 0x40
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <HAL_I2S_MspInit+0x188>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_I2S_MspInit+0x188>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <HAL_I2S_MspInit+0x188>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6313      	str	r3, [r2, #48]	; 0x30
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_I2S_MspInit+0x188>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_I2S_MspInit+0x188>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	4a18      	ldr	r2, [pc, #96]	; (8001610 <HAL_I2S_MspInit+0x188>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6313      	str	r3, [r2, #48]	; 0x30
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <HAL_I2S_MspInit+0x188>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015c0:	2310      	movs	r3, #16
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015d0:	2306      	movs	r3, #6
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	4811      	ldr	r0, [pc, #68]	; (8001620 <HAL_I2S_MspInit+0x198>)
 80015dc:	f001 f8e0 	bl	80027a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80015e0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015f2:	2306      	movs	r3, #6
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_I2S_MspInit+0x18c>)
 80015fe:	f001 f8cf 	bl	80027a0 <HAL_GPIO_Init>
}
 8001602:	bf00      	nop
 8001604:	3738      	adds	r7, #56	; 0x38
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40003800 	.word	0x40003800
 8001610:	40023800 	.word	0x40023800
 8001614:	40020800 	.word	0x40020800
 8001618:	40020400 	.word	0x40020400
 800161c:	40003c00 	.word	0x40003c00
 8001620:	40020000 	.word	0x40020000

08001624 <boton_pulsado>:
};



static int boton_pulsado (fsm_t* this) //boton a true
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	if (boton == 1)
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <boton_pulsado+0x24>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <boton_pulsado+0x14>
	{
		return 1;
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <boton_pulsado+0x16>
	}
	return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	2000034c 	.word	0x2000034c

0800164c <boton_sin_pulsar>:

static int boton_sin_pulsar (fsm_t* this) //boton a false
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if (boton == 1)
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <boton_sin_pulsar+0x24>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <boton_sin_pulsar+0x14>
	{
		return 1;
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <boton_sin_pulsar+0x16>
	}
	return 0;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2000034c 	.word	0x2000034c

08001674 <LED_azul_empieza>:




static int LED_azul_empieza (fsm_t* this)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	if (tiempo_t2 == 1)//&& boton == 1) //boton a true y 500ms cumplidos -> Sistema activo
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <LED_azul_empieza+0x24>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <LED_azul_empieza+0x14>
	{
		return 1;
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <LED_azul_empieza+0x16>
	}
	return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000358 	.word	0x20000358

0800169c <LED_azul_parpadeo>:

static int LED_azul_parpadeo (fsm_t* this)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	if (tiempo_t1 == 1) // 1s cumplido->LED azul parpadea
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <LED_azul_parpadeo+0x24>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <LED_azul_parpadeo+0x14>
	{
		return 1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <LED_azul_parpadeo+0x16>
	}
	return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	2000035c 	.word	0x2000035c

080016c4 <LED_azul_termina>:

static int LED_azul_termina (fsm_t* this)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	if(tiempo_t2 == 1) //boton == 0 boton sin pulsar (sistema off) y 500 ms cumplidos
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <LED_azul_termina+0x24>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <LED_azul_termina+0x14>
	{
		return 1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <LED_azul_termina+0x16>
	}
	return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000358 	.word	0x20000358

080016ec <Sistema_Activo>:

static int Sistema_Activo (fsm_t* this)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	if (SA == 1)
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <Sistema_Activo+0x24>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <Sistema_Activo+0x14>
	{
		return 1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <Sistema_Activo+0x16>
	}
	return 0;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000350 	.word	0x20000350

08001714 <empieza_muestras>:

static int empieza_muestras (fsm_t* this)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	if(tiempo_t3 == 1)
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <empieza_muestras+0x24>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <empieza_muestras+0x14>
	{
		return 1;
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <empieza_muestras+0x16>
	}
	return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000360 	.word	0x20000360

0800173c <muestras_cumplidas>:

static int muestras_cumplidas (fsm_t* this)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	if(muestras == 200)
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <muestras_cumplidas+0x24>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2bc8      	cmp	r3, #200	; 0xc8
 800174a:	d101      	bne.n	8001750 <muestras_cumplidas+0x14>
	{
		return 1;
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <muestras_cumplidas+0x16>
	}
	return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000364 	.word	0x20000364

08001764 <Sistema_No_Activo>:

static int Sistema_No_Activo (fsm_t* this)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	if (SA == 0)
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <Sistema_No_Activo+0x24>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <Sistema_No_Activo+0x14>
	{
		return 1;
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <Sistema_No_Activo+0x16>
	}
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000350 	.word	0x20000350

0800178c <funcion_LED_azul>:




static void funcion_LED_azul (fsm_t* this)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	tiempo_t2=0;
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <funcion_LED_azul+0x28>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
	tiempo_t1=0;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <funcion_LED_azul+0x2c>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2); //500 ms
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <funcion_LED_azul+0x30>)
 80017a2:	f005 fa09 	bl	8006bb8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3); //1 s
 80017a6:	4806      	ldr	r0, [pc, #24]	; (80017c0 <funcion_LED_azul+0x34>)
 80017a8:	f005 fa06 	bl	8006bb8 <HAL_TIM_Base_Start_IT>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000358 	.word	0x20000358
 80017b8:	2000035c 	.word	0x2000035c
 80017bc:	200003c8 	.word	0x200003c8
 80017c0:	20000410 	.word	0x20000410

080017c4 <funcion_LED_azul_empieza>:

static void funcion_LED_azul_empieza (fsm_t* this)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	boton=0;
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <funcion_LED_azul_empieza+0x28>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
	tiempo_t2=0;
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <funcion_LED_azul_empieza+0x2c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
	SA=1;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <funcion_LED_azul_empieza+0x30>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	2000034c 	.word	0x2000034c
 80017f0:	20000358 	.word	0x20000358
 80017f4:	20000350 	.word	0x20000350

080017f8 <funcion_LED_azul_encendido>:

static void funcion_LED_azul_encendido (fsm_t* this)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	tiempo_t1=0;
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <funcion_LED_azul_encendido+0x20>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);//Led azul
 8001806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800180a:	4804      	ldr	r0, [pc, #16]	; (800181c <funcion_LED_azul_encendido+0x24>)
 800180c:	f001 fa49 	bl	8002ca2 <HAL_GPIO_TogglePin>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2000035c 	.word	0x2000035c
 800181c:	40020c00 	.word	0x40020c00

08001820 <funcion_LED_azul_apagado>:

static void funcion_LED_azul_apagado (fsm_t* this)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	boton=0;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <funcion_LED_azul_apagado+0x3c>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
	tiempo_t2=0;
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <funcion_LED_azul_apagado+0x40>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
	SA=0;
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <funcion_LED_azul_apagado+0x44>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3);//timer 3 (1s) zero
 800183a:	480b      	ldr	r0, [pc, #44]	; (8001868 <funcion_LED_azul_apagado+0x48>)
 800183c:	f005 fa1e 	bl	8006c7c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);//timer 2 (500ms) zero
 8001840:	480a      	ldr	r0, [pc, #40]	; (800186c <funcion_LED_azul_apagado+0x4c>)
 8001842:	f005 fa1b 	bl	8006c7c <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(GPIOD, (uint16_t) LD6_Pin,0); //Led azul off
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <funcion_LED_azul_apagado+0x50>)
 800184e:	f001 fa0f 	bl	8002c70 <HAL_GPIO_WritePin>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000034c 	.word	0x2000034c
 8001860:	20000358 	.word	0x20000358
 8001864:	20000350 	.word	0x20000350
 8001868:	20000410 	.word	0x20000410
 800186c:	200003c8 	.word	0x200003c8
 8001870:	40020c00 	.word	0x40020c00

08001874 <funcion_muestreo>:



static void funcion_muestreo (fsm_t* this)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  tiempo_t3=0;
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <funcion_muestreo+0x1c>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim10); //5ms
 8001882:	4804      	ldr	r0, [pc, #16]	; (8001894 <funcion_muestreo+0x20>)
 8001884:	f005 f998 	bl	8006bb8 <HAL_TIM_Base_Start_IT>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000360 	.word	0x20000360
 8001894:	200004a0 	.word	0x200004a0

08001898 <funcion_comparar_calculo>:

static void funcion_comparar_calculo (fsm_t* this)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	; 0x30
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	float32_t sensory;
	float32_t sensorz;
	float32_t modulo;
	int16_t pDataXYZ[3];

	muestras++;
 80018a0:	4b40      	ldr	r3, [pc, #256]	; (80019a4 <funcion_comparar_calculo+0x10c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	4a3f      	ldr	r2, [pc, #252]	; (80019a4 <funcion_comparar_calculo+0x10c>)
 80018a8:	6013      	str	r3, [r2, #0]
	tiempo_t3=0;
 80018aa:	4b3f      	ldr	r3, [pc, #252]	; (80019a8 <funcion_comparar_calculo+0x110>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
	BSP_ACCELERO_GetXYZ(pDataXYZ);
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4618      	mov	r0, r3
 80018b6:	f009 fb79 	bl	800afac <BSP_ACCELERO_GetXYZ>

	sensorx = 1.0*pDataXYZ[0]; //1.0* para convertir a float
 80018ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fddc 	bl	800047c <__aeabi_i2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7fe fe40 	bl	8000550 <__aeabi_d2f>
 80018d0:	4603      	mov	r3, r0
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sensory = 1.0*pDataXYZ[1];
 80018d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fdcf 	bl	800047c <__aeabi_i2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7fe fe33 	bl	8000550 <__aeabi_d2f>
 80018ea:	4603      	mov	r3, r0
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
	sensorz = 1.0*pDataXYZ[2];
 80018ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fdc2 	bl	800047c <__aeabi_i2d>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7fe fe26 	bl	8000550 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t sc = (sensorx*sensorx) + (sensory*sensory) + (sensorz*sensorz);
 8001908:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800190c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001910:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001914:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800191c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001920:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001928:	edc7 7a08 	vstr	s15, [r7, #32]
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	61bb      	str	r3, [r7, #24]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001936:	edd7 7a07 	vldr	s15, [r7, #28]
 800193a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800193e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001942:	db09      	blt.n	8001958 <funcion_comparar_calculo+0xc0>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001944:	ed97 0a07 	vldr	s0, [r7, #28]
 8001948:	f009 ffb0 	bl	800b8ac <sqrtf>
 800194c:	eef0 7a40 	vmov.f32	s15, s0
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001956:	e004      	b.n	8001962 <funcion_comparar_calculo+0xca>
    }
    else
    {
      *pOut = 0.0f;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001960:	bf00      	nop
	arm_sqrt_f32(sc, &modulo);
	if(modulo>=maximo)
 8001962:	ed97 7a05 	vldr	s14, [r7, #20]
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <funcion_comparar_calculo+0x114>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	db03      	blt.n	800197e <funcion_comparar_calculo+0xe6>
	{
		maximo=modulo;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <funcion_comparar_calculo+0x114>)
 800197a:	6013      	str	r3, [r2, #0]
	}
	else if(modulo<=minimo)
	{
		minimo=modulo;
	}
}
 800197c:	e00d      	b.n	800199a <funcion_comparar_calculo+0x102>
	else if(modulo<=minimo)
 800197e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <funcion_comparar_calculo+0x118>)
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	d900      	bls.n	8001994 <funcion_comparar_calculo+0xfc>
}
 8001992:	e002      	b.n	800199a <funcion_comparar_calculo+0x102>
		minimo=modulo;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <funcion_comparar_calculo+0x118>)
 8001998:	6013      	str	r3, [r2, #0]
}
 800199a:	bf00      	nop
 800199c:	3730      	adds	r7, #48	; 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000364 	.word	0x20000364
 80019a8:	20000360 	.word	0x20000360
 80019ac:	20000368 	.word	0x20000368
 80019b0:	20000068 	.word	0x20000068

080019b4 <funcion_calculo>:
static void funcion_calculo (fsm_t* this)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	delta=maximo-minimo;
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <funcion_calculo+0x44>)
 80019be:	ed93 7a00 	vldr	s14, [r3]
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <funcion_calculo+0x48>)
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d0:	ee17 2a90 	vmov	r2, s15
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <funcion_calculo+0x4c>)
 80019d6:	601a      	str	r2, [r3, #0]
	maximo = 0;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <funcion_calculo+0x44>)
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
	minimo = FLT_MAX;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <funcion_calculo+0x48>)
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <funcion_calculo+0x50>)
 80019e4:	601a      	str	r2, [r3, #0]
	muestras = 0;
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <funcion_calculo+0x54>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	20000368 	.word	0x20000368
 80019fc:	20000068 	.word	0x20000068
 8001a00:	20000354 	.word	0x20000354
 8001a04:	7f7fffff 	.word	0x7f7fffff
 8001a08:	20000364 	.word	0x20000364

08001a0c <esta_parado>:


static int esta_parado (fsm_t* this)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if (muestras>=200 && delta < TH_ACC_HIGH)
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <esta_parado+0x30>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2bc7      	cmp	r3, #199	; 0xc7
 8001a1a:	dd07      	ble.n	8001a2c <esta_parado+0x20>
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <esta_parado+0x34>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a24:	4293      	cmp	r3, r2
 8001a26:	dc01      	bgt.n	8001a2c <esta_parado+0x20>
  {
	  return 1;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <esta_parado+0x22>
  }
  else
  {
	  return 0;
 8001a2c:	2300      	movs	r3, #0
  }
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000364 	.word	0x20000364
 8001a40:	20000354 	.word	0x20000354

08001a44 <esta_andando>:



static int esta_andando (fsm_t* this)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	if (muestras>=200 && delta > TH_ACC_HIGH)
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <esta_andando+0x30>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2bc7      	cmp	r3, #199	; 0xc7
 8001a52:	dd07      	ble.n	8001a64 <esta_andando+0x20>
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <esta_andando+0x34>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	dd01      	ble.n	8001a64 <esta_andando+0x20>
	{
	  return 1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <esta_andando+0x22>
	}
	else
	{
	  return 0;
 8001a64:	2300      	movs	r3, #0
	}
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000364 	.word	0x20000364
 8001a78:	20000354 	.word	0x20000354

08001a7c <esta_aviso>:

static int esta_aviso (fsm_t* this)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if (muestras>=200 && delta < TH_ACC_HIGH)
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <esta_aviso+0x30>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2bc7      	cmp	r3, #199	; 0xc7
 8001a8a:	dd07      	ble.n	8001a9c <esta_aviso+0x20>
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <esta_aviso+0x34>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a94:	4293      	cmp	r3, r2
 8001a96:	dc01      	bgt.n	8001a9c <esta_aviso+0x20>
  {
	 return 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <esta_aviso+0x22>
  }
  else
  {
	 return 0;
 8001a9c:	2300      	movs	r3, #0
  }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000364 	.word	0x20000364
 8001ab0:	20000354 	.word	0x20000354

08001ab4 <funcion_sistemaoff>:

static void funcion_sistemaoff (fsm_t* this)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1); //timer 4 pwm a zero
 8001abc:	2100      	movs	r1, #0
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <funcion_sistemaoff+0x20>)
 8001ac0:	f005 fa0a 	bl	8006ed8 <HAL_TIM_PWM_Stop>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); // brillo a 0??
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <funcion_sistemaoff+0x20>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000458 	.word	0x20000458

08001ad8 <funcion_terminar>:

static void funcion_terminar (fsm_t* this)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	  HAL_TIM_Base_Stop_IT(&htim10);//timer 10 (5ms) a zero
 8001ae0:	480b      	ldr	r0, [pc, #44]	; (8001b10 <funcion_terminar+0x38>)
 8001ae2:	f005 f8cb 	bl	8006c7c <HAL_TIM_Base_Stop_IT>
	  muestras=0;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <funcion_terminar+0x3c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
	  maximo=0;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <funcion_terminar+0x40>)
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
	  minimo=FLT_MAX;
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <funcion_terminar+0x44>)
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <funcion_terminar+0x48>)
 8001af8:	601a      	str	r2, [r3, #0]
	  SA=0;
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <funcion_terminar+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
	  boton=0;
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <funcion_terminar+0x50>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200004a0 	.word	0x200004a0
 8001b14:	20000364 	.word	0x20000364
 8001b18:	20000368 	.word	0x20000368
 8001b1c:	20000068 	.word	0x20000068
 8001b20:	7f7fffff 	.word	0x7f7fffff
 8001b24:	20000350 	.word	0x20000350
 8001b28:	2000034c 	.word	0x2000034c

08001b2c <funcion_andando>:

static void funcion_andando (fsm_t* this)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001b34:	2100      	movs	r1, #0
 8001b36:	4806      	ldr	r0, [pc, #24]	; (8001b50 <funcion_andando+0x24>)
 8001b38:	f005 f91e 	bl	8006d78 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 5999); //60 a 10 brillo 5999
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <funcion_andando+0x24>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f241 726f 	movw	r2, #5999	; 0x176f
 8001b44:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000458 	.word	0x20000458

08001b54 <funcion_aviso>:
static void funcion_aviso (fsm_t* this)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <funcion_aviso+0x20>)
 8001b60:	f005 f90a 	bl	8006d78 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 89999); //90 a 100 brillo 8999
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <funcion_aviso+0x20>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a03      	ldr	r2, [pc, #12]	; (8001b78 <funcion_aviso+0x24>)
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000458 	.word	0x20000458
 8001b78:	00015f8f 	.word	0x00015f8f

08001b7c <funcion_parado>:
static void funcion_parado (fsm_t* this)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001b84:	2100      	movs	r1, #0
 8001b86:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <funcion_parado+0x24>)
 8001b88:	f005 f8f6 	bl	8006d78 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 999); //30 a 5 brillo 2999
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <funcion_parado+0x24>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b94:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000458 	.word	0x20000458

08001ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
 	fsm_t * LEDazul_fsm = fsm_new (LEDazul);
 8001baa:	481a      	ldr	r0, [pc, #104]	; (8001c14 <main+0x70>)
 8001bac:	f7ff fa40 	bl	8001030 <fsm_new>
 8001bb0:	60f8      	str	r0, [r7, #12]
	fsm_t * muestreoP1_fsm = fsm_new (muestreoP1);
 8001bb2:	4819      	ldr	r0, [pc, #100]	; (8001c18 <main+0x74>)
 8001bb4:	f7ff fa3c 	bl	8001030 <fsm_new>
 8001bb8:	60b8      	str	r0, [r7, #8]
  	fsm_t * P1_fsm = fsm_new (P1);
 8001bba:	4818      	ldr	r0, [pc, #96]	; (8001c1c <main+0x78>)
 8001bbc:	f7ff fa38 	bl	8001030 <fsm_new>
 8001bc0:	6078      	str	r0, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc2:	f000 fc45 	bl	8002450 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc6:	f000 f82b 	bl	8001c20 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001bca:	f000 f891 	bl	8001cf0 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_ACCELERO_Init();
 8001bce:	f009 f92b 	bl	800ae28 <BSP_ACCELERO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd2:	f7ff fa81 	bl	80010d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bd6:	f7ff fb61 	bl	800129c <MX_I2C1_Init>
  MX_I2S2_Init();
 8001bda:	f7ff fbf7 	bl	80013cc <MX_I2S2_Init>
  MX_I2S3_Init();
 8001bde:	f7ff fc23 	bl	8001428 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001be2:	f000 f8eb 	bl	8001dbc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001be6:	f009 fa0d 	bl	800b004 <MX_USB_HOST_Init>
  MX_TIM3_Init();
 8001bea:	f000 fa7d 	bl	80020e8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001bee:	f000 fa2d 	bl	800204c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001bf2:	f000 fac7 	bl	8002184 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001bf6:	f000 fb1f 	bl	8002238 <MX_TIM10_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	fsm_fire (LEDazul_fsm);
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f7ff fa3c 	bl	8001078 <fsm_fire>
	fsm_fire (muestreoP1_fsm);
 8001c00:	68b8      	ldr	r0, [r7, #8]
 8001c02:	f7ff fa39 	bl	8001078 <fsm_fire>
   	fsm_fire (P1_fsm);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fa36 	bl	8001078 <fsm_fire>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001c0c:	f009 fa20 	bl	800b050 <MX_USB_HOST_Process>
	fsm_fire (LEDazul_fsm);
 8001c10:	e7f3      	b.n	8001bfa <main+0x56>
 8001c12:	bf00      	nop
 8001c14:	2000006c 	.word	0x2000006c
 8001c18:	200000cc 	.word	0x200000cc
 8001c1c:	2000011c 	.word	0x2000011c

08001c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b094      	sub	sp, #80	; 0x50
 8001c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c26:	f107 0320 	add.w	r3, r7, #32
 8001c2a:	2230      	movs	r2, #48	; 0x30
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f009 fdac 	bl	800b78c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <SystemClock_Config+0xc8>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	4a26      	ldr	r2, [pc, #152]	; (8001ce8 <SystemClock_Config+0xc8>)
 8001c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c52:	6413      	str	r3, [r2, #64]	; 0x40
 8001c54:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <SystemClock_Config+0xc8>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c60:	2300      	movs	r3, #0
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <SystemClock_Config+0xcc>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a20      	ldr	r2, [pc, #128]	; (8001cec <SystemClock_Config+0xcc>)
 8001c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <SystemClock_Config+0xcc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c86:	2302      	movs	r3, #2
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c90:	2304      	movs	r3, #4
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001c94:	23c0      	movs	r3, #192	; 0xc0
 8001c96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca0:	f107 0320 	add.w	r3, r7, #32
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f004 f8d7 	bl	8005e58 <HAL_RCC_OscConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cb0:	f000 f87e 	bl	8001db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb4:	230f      	movs	r3, #15
 8001cb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	2103      	movs	r1, #3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f004 fb3d 	bl	8006350 <HAL_RCC_ClockConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cdc:	f000 f868 	bl	8001db0 <Error_Handler>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3750      	adds	r7, #80	; 0x50
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40007000 	.word	0x40007000

08001cf0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
 8001d04:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001d06:	2301      	movs	r3, #1
 8001d08:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001d0a:	23c8      	movs	r3, #200	; 0xc8
 8001d0c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001d0e:	2305      	movs	r3, #5
 8001d10:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001d12:	2302      	movs	r3, #2
 8001d14:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d16:	463b      	mov	r3, r7
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f004 fd25 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001d24:	f000 f844 	bl	8001db0 <Error_Handler>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d102      	bne.n	8001d46 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		tiempo_t2=1; //500ms cumplido
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
	}
	if(htim == &htim3)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d102      	bne.n	8001d54 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		tiempo_t1=1; //1s cumplido
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
	}
	if(htim == &htim10)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d102      	bne.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tiempo_t3=1; //5ms cumplido
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
	}
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	200003c8 	.word	0x200003c8
 8001d74:	20000358 	.word	0x20000358
 8001d78:	20000410 	.word	0x20000410
 8001d7c:	2000035c 	.word	0x2000035c
 8001d80:	200004a0 	.word	0x200004a0
 8001d84:	20000360 	.word	0x20000360

08001d88 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // para el boton interrupciones
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0)
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d102      	bne.n	8001d9e <HAL_GPIO_EXTI_Callback+0x16>
  {
	  boton=1;
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <HAL_GPIO_EXTI_Callback+0x24>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
  }
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	2000034c 	.word	0x2000034c

08001db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db4:	b672      	cpsid	i
}
 8001db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <Error_Handler+0x8>
	...

08001dbc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <MX_SPI1_Init+0x64>)
 8001dc2:	4a18      	ldr	r2, [pc, #96]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001dc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <MX_SPI1_Init+0x64>)
 8001dc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <MX_SPI1_Init+0x64>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <MX_SPI1_Init+0x64>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <MX_SPI1_Init+0x64>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_SPI1_Init+0x64>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <MX_SPI1_Init+0x64>)
 8001de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <MX_SPI1_Init+0x64>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <MX_SPI1_Init+0x64>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MX_SPI1_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <MX_SPI1_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_SPI1_Init+0x64>)
 8001e08:	220a      	movs	r2, #10
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e0c:	4804      	ldr	r0, [pc, #16]	; (8001e20 <MX_SPI1_Init+0x64>)
 8001e0e:	f004 fdfb 	bl	8006a08 <HAL_SPI_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e18:	f7ff ffca 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000036c 	.word	0x2000036c
 8001e24:	40013000 	.word	0x40013000

08001e28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a19      	ldr	r2, [pc, #100]	; (8001eac <HAL_SPI_MspInit+0x84>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d12b      	bne.n	8001ea2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <HAL_SPI_MspInit+0x88>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <HAL_SPI_MspInit+0x88>)
 8001e54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e58:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <HAL_SPI_MspInit+0x88>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_SPI_MspInit+0x88>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a10      	ldr	r2, [pc, #64]	; (8001eb0 <HAL_SPI_MspInit+0x88>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_SPI_MspInit+0x88>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e82:	23e0      	movs	r3, #224	; 0xe0
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e92:	2305      	movs	r3, #5
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <HAL_SPI_MspInit+0x8c>)
 8001e9e:	f000 fc7f 	bl	80027a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3728      	adds	r7, #40	; 0x28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40013000 	.word	0x40013000
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020000 	.word	0x40020000

08001eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_MspInit+0x4c>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_MspInit+0x4c>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ef6:	2007      	movs	r0, #7
 8001ef8:	f000 fc10 	bl	800271c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800

08001f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <NMI_Handler+0x4>

08001f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <HardFault_Handler+0x4>

08001f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <MemManage_Handler+0x4>

08001f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <BusFault_Handler+0x4>

08001f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <UsageFault_Handler+0x4>

08001f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f54:	f000 face 	bl	80024f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(boton_Pin);
 8001f60:	2001      	movs	r0, #1
 8001f62:	f000 feb9 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f72:	f005 f815 	bl	8006fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200004a0 	.word	0x200004a0

08001f80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <TIM2_IRQHandler+0x10>)
 8001f86:	f005 f80b 	bl	8006fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200003c8 	.word	0x200003c8

08001f94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <TIM3_IRQHandler+0x10>)
 8001f9a:	f005 f801 	bl	8006fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000410 	.word	0x20000410

08001fa8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <OTG_FS_IRQHandler+0x10>)
 8001fae:	f001 f915 	bl	80031dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000920 	.word	0x20000920

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f009 fbe6 	bl	800b7bc <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20020000 	.word	0x20020000
 800201c:	00000400 	.word	0x00000400
 8002020:	200003c4 	.word	0x200003c4
 8002024:	20000d70 	.word	0x20000d70

08002028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <SystemInit+0x20>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <SystemInit+0x20>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002060:	463b      	mov	r3, r7
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <MX_TIM2_Init+0x98>)
 800206a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800206e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9599;
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <MX_TIM2_Init+0x98>)
 8002072:	f242 527f 	movw	r2, #9599	; 0x257f
 8002076:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <MX_TIM2_Init+0x98>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <MX_TIM2_Init+0x98>)
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <MX_TIM2_Init+0x98>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <MX_TIM2_Init+0x98>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002092:	4814      	ldr	r0, [pc, #80]	; (80020e4 <MX_TIM2_Init+0x98>)
 8002094:	f004 fd41 	bl	8006b1a <HAL_TIM_Base_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800209e:	f7ff fe87 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	4619      	mov	r1, r3
 80020ae:	480d      	ldr	r0, [pc, #52]	; (80020e4 <MX_TIM2_Init+0x98>)
 80020b0:	f005 f940 	bl	8007334 <HAL_TIM_ConfigClockSource>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80020ba:	f7ff fe79 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020c6:	463b      	mov	r3, r7
 80020c8:	4619      	mov	r1, r3
 80020ca:	4806      	ldr	r0, [pc, #24]	; (80020e4 <MX_TIM2_Init+0x98>)
 80020cc:	f005 fcee 	bl	8007aac <HAL_TIMEx_MasterConfigSynchronization>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80020d6:	f7ff fe6b 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200003c8 	.word	0x200003c8

080020e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <MX_TIM3_Init+0x94>)
 8002106:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <MX_TIM3_Init+0x98>)
 8002108:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <MX_TIM3_Init+0x94>)
 800210c:	f242 527f 	movw	r2, #9599	; 0x257f
 8002110:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_TIM3_Init+0x94>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <MX_TIM3_Init+0x94>)
 800211a:	f242 7210 	movw	r2, #10000	; 0x2710
 800211e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <MX_TIM3_Init+0x94>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <MX_TIM3_Init+0x94>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800212c:	4813      	ldr	r0, [pc, #76]	; (800217c <MX_TIM3_Init+0x94>)
 800212e:	f004 fcf4 	bl	8006b1a <HAL_TIM_Base_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002138:	f7ff fe3a 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800213c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002140:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	4619      	mov	r1, r3
 8002148:	480c      	ldr	r0, [pc, #48]	; (800217c <MX_TIM3_Init+0x94>)
 800214a:	f005 f8f3 	bl	8007334 <HAL_TIM_ConfigClockSource>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002154:	f7ff fe2c 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002160:	463b      	mov	r3, r7
 8002162:	4619      	mov	r1, r3
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <MX_TIM3_Init+0x94>)
 8002166:	f005 fca1 	bl	8007aac <HAL_TIMEx_MasterConfigSynchronization>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002170:	f7ff fe1e 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002174:	bf00      	nop
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000410 	.word	0x20000410
 8002180:	40000400 	.word	0x40000400

08002184 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218a:	f107 0320 	add.w	r3, r7, #32
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]
 80021a2:	615a      	str	r2, [r3, #20]
 80021a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <MX_TIM4_Init+0xac>)
 80021a8:	4a22      	ldr	r2, [pc, #136]	; (8002234 <MX_TIM4_Init+0xb0>)
 80021aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 80021ac:	4b20      	ldr	r3, [pc, #128]	; (8002230 <MX_TIM4_Init+0xac>)
 80021ae:	222f      	movs	r2, #47	; 0x2f
 80021b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b2:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <MX_TIM4_Init+0xac>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <MX_TIM4_Init+0xac>)
 80021ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80021be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <MX_TIM4_Init+0xac>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <MX_TIM4_Init+0xac>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021cc:	4818      	ldr	r0, [pc, #96]	; (8002230 <MX_TIM4_Init+0xac>)
 80021ce:	f004 fd84 	bl	8006cda <HAL_TIM_PWM_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80021d8:	f7ff fdea 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021e4:	f107 0320 	add.w	r3, r7, #32
 80021e8:	4619      	mov	r1, r3
 80021ea:	4811      	ldr	r0, [pc, #68]	; (8002230 <MX_TIM4_Init+0xac>)
 80021ec:	f005 fc5e 	bl	8007aac <HAL_TIMEx_MasterConfigSynchronization>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80021f6:	f7ff fddb 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021fa:	2360      	movs	r3, #96	; 0x60
 80021fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2200      	movs	r2, #0
 800220e:	4619      	mov	r1, r3
 8002210:	4807      	ldr	r0, [pc, #28]	; (8002230 <MX_TIM4_Init+0xac>)
 8002212:	f004 ffcd 	bl	80071b0 <HAL_TIM_PWM_ConfigChannel>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800221c:	f7ff fdc8 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002220:	4803      	ldr	r0, [pc, #12]	; (8002230 <MX_TIM4_Init+0xac>)
 8002222:	f000 f8b1 	bl	8002388 <HAL_TIM_MspPostInit>

}
 8002226:	bf00      	nop
 8002228:	3728      	adds	r7, #40	; 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000458 	.word	0x20000458
 8002234:	40000800 	.word	0x40000800

08002238 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800223c:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_TIM10_Init+0x40>)
 800223e:	4a0f      	ldr	r2, [pc, #60]	; (800227c <MX_TIM10_Init+0x44>)
 8002240:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9599;
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <MX_TIM10_Init+0x40>)
 8002244:	f242 527f 	movw	r2, #9599	; 0x257f
 8002248:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <MX_TIM10_Init+0x40>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_TIM10_Init+0x40>)
 8002252:	2232      	movs	r2, #50	; 0x32
 8002254:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <MX_TIM10_Init+0x40>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_TIM10_Init+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_TIM10_Init+0x40>)
 8002264:	f004 fc59 	bl	8006b1a <HAL_TIM_Base_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800226e:	f7ff fd9f 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200004a0 	.word	0x200004a0
 800227c:	40014400 	.word	0x40014400

08002280 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002290:	d116      	bne.n	80022c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	4b28      	ldr	r3, [pc, #160]	; (8002338 <HAL_TIM_Base_MspInit+0xb8>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a27      	ldr	r2, [pc, #156]	; (8002338 <HAL_TIM_Base_MspInit+0xb8>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b25      	ldr	r3, [pc, #148]	; (8002338 <HAL_TIM_Base_MspInit+0xb8>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	201c      	movs	r0, #28
 80022b4:	f000 fa3d 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022b8:	201c      	movs	r0, #28
 80022ba:	f000 fa56 	bl	800276a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80022be:	e036      	b.n	800232e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM3)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1d      	ldr	r2, [pc, #116]	; (800233c <HAL_TIM_Base_MspInit+0xbc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d116      	bne.n	80022f8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_TIM_Base_MspInit+0xb8>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a19      	ldr	r2, [pc, #100]	; (8002338 <HAL_TIM_Base_MspInit+0xb8>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_TIM_Base_MspInit+0xb8>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	201d      	movs	r0, #29
 80022ec:	f000 fa21 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022f0:	201d      	movs	r0, #29
 80022f2:	f000 fa3a 	bl	800276a <HAL_NVIC_EnableIRQ>
}
 80022f6:	e01a      	b.n	800232e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_TIM_Base_MspInit+0xc0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d115      	bne.n	800232e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_TIM_Base_MspInit+0xb8>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <HAL_TIM_Base_MspInit+0xb8>)
 800230c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_TIM_Base_MspInit+0xb8>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	2019      	movs	r0, #25
 8002324:	f000 fa05 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002328:	2019      	movs	r0, #25
 800232a:	f000 fa1e 	bl	800276a <HAL_NVIC_EnableIRQ>
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40000400 	.word	0x40000400
 8002340:	40014400 	.word	0x40014400

08002344 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <HAL_TIM_PWM_MspInit+0x3c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10d      	bne.n	8002372 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_TIM_PWM_MspInit+0x40>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <HAL_TIM_PWM_MspInit+0x40>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <HAL_TIM_PWM_MspInit+0x40>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40000800 	.word	0x40000800
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <HAL_TIM_MspPostInit+0x68>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d11e      	bne.n	80023e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_TIM_MspPostInit+0x6c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <HAL_TIM_MspPostInit+0x6c>)
 80023b4:	f043 0308 	orr.w	r3, r3, #8
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_TIM_MspPostInit+0x6c>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023d8:	2302      	movs	r3, #2
 80023da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	4619      	mov	r1, r3
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <HAL_TIM_MspPostInit+0x70>)
 80023e4:	f000 f9dc 	bl	80027a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80023e8:	bf00      	nop
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40000800 	.word	0x40000800
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020c00 	.word	0x40020c00

080023fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002434 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002402:	490e      	ldr	r1, [pc, #56]	; (800243c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002404:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002408:	e002      	b.n	8002410 <LoopCopyDataInit>

0800240a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800240c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240e:	3304      	adds	r3, #4

08002410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002414:	d3f9      	bcc.n	800240a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002418:	4c0b      	ldr	r4, [pc, #44]	; (8002448 <LoopFillZerobss+0x26>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800241c:	e001      	b.n	8002422 <LoopFillZerobss>

0800241e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002420:	3204      	adds	r2, #4

08002422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002424:	d3fb      	bcc.n	800241e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002426:	f7ff fdff 	bl	8002028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800242a:	f009 f9cd 	bl	800b7c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800242e:	f7ff fbb9 	bl	8001ba4 <main>
  bx  lr    
 8002432:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002434:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800243c:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8002440:	0800b934 	.word	0x0800b934
  ldr r2, =_sbss
 8002444:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8002448:	20000d6c 	.word	0x20000d6c

0800244c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800244c:	e7fe      	b.n	800244c <ADC_IRQHandler>
	...

08002450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0d      	ldr	r2, [pc, #52]	; (8002490 <HAL_Init+0x40>)
 800245a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800245e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_Init+0x40>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <HAL_Init+0x40>)
 8002466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800246a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_Init+0x40>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <HAL_Init+0x40>)
 8002472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002478:	2003      	movs	r0, #3
 800247a:	f000 f94f 	bl	800271c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247e:	2000      	movs	r0, #0
 8002480:	f000 f808 	bl	8002494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002484:	f7ff fd18 	bl	8001eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023c00 	.word	0x40023c00

08002494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_InitTick+0x54>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_InitTick+0x58>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f967 	bl	8002786 <HAL_SYSTICK_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e00e      	b.n	80024e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b0f      	cmp	r3, #15
 80024c6:	d80a      	bhi.n	80024de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c8:	2200      	movs	r2, #0
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024d0:	f000 f92f 	bl	8002732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <HAL_InitTick+0x5c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200001cc 	.word	0x200001cc
 80024ec:	200001d4 	.word	0x200001d4
 80024f0:	200001d0 	.word	0x200001d0

080024f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_IncTick+0x20>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_IncTick+0x24>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4413      	add	r3, r2
 8002504:	4a04      	ldr	r2, [pc, #16]	; (8002518 <HAL_IncTick+0x24>)
 8002506:	6013      	str	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	200001d4 	.word	0x200001d4
 8002518:	200004e8 	.word	0x200004e8

0800251c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return uwTick;
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <HAL_GetTick+0x14>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	200004e8 	.word	0x200004e8

08002534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800253c:	f7ff ffee 	bl	800251c <HAL_GetTick>
 8002540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800254c:	d005      	beq.n	800255a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_Delay+0x44>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800255a:	bf00      	nop
 800255c:	f7ff ffde 	bl	800251c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	429a      	cmp	r2, r3
 800256a:	d8f7      	bhi.n	800255c <HAL_Delay+0x28>
  {
  }
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200001d4 	.word	0x200001d4

0800257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ae:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <__NVIC_GetPriorityGrouping+0x18>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 0307 	and.w	r3, r3, #7
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db0b      	blt.n	800260a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4907      	ldr	r1, [pc, #28]	; (8002618 <__NVIC_EnableIRQ+0x38>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2001      	movs	r0, #1
 8002602:	fa00 f202 	lsl.w	r2, r0, r2
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db0a      	blt.n	8002646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	490c      	ldr	r1, [pc, #48]	; (8002668 <__NVIC_SetPriority+0x4c>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	440b      	add	r3, r1
 8002640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002644:	e00a      	b.n	800265c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	; (800266c <__NVIC_SetPriority+0x50>)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3b04      	subs	r3, #4
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	440b      	add	r3, r1
 800265a:	761a      	strb	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000e100 	.word	0xe000e100
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf28      	it	cs
 800268e:	2304      	movcs	r3, #4
 8002690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	2b06      	cmp	r3, #6
 8002698:	d902      	bls.n	80026a0 <NVIC_EncodePriority+0x30>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3b03      	subs	r3, #3
 800269e:	e000      	b.n	80026a2 <NVIC_EncodePriority+0x32>
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	4313      	orrs	r3, r2
         );
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	; 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e8:	d301      	bcc.n	80026ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00f      	b.n	800270e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <SysTick_Config+0x40>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f6:	210f      	movs	r1, #15
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026fc:	f7ff ff8e 	bl	800261c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <SysTick_Config+0x40>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002706:	4b04      	ldr	r3, [pc, #16]	; (8002718 <SysTick_Config+0x40>)
 8002708:	2207      	movs	r2, #7
 800270a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	e000e010 	.word	0xe000e010

0800271c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff29 	bl	800257c <__NVIC_SetPriorityGrouping>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002744:	f7ff ff3e 	bl	80025c4 <__NVIC_GetPriorityGrouping>
 8002748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	6978      	ldr	r0, [r7, #20]
 8002750:	f7ff ff8e 	bl	8002670 <NVIC_EncodePriority>
 8002754:	4602      	mov	r2, r0
 8002756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff5d 	bl	800261c <__NVIC_SetPriority>
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff31 	bl	80025e0 <__NVIC_EnableIRQ>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffa2 	bl	80026d8 <SysTick_Config>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e159      	b.n	8002a70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	f040 8148 	bne.w	8002a6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d005      	beq.n	80027f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d130      	bne.n	8002854 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002828:	2201      	movs	r2, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 0201 	and.w	r2, r3, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b03      	cmp	r3, #3
 800285e:	d017      	beq.n	8002890 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d123      	bne.n	80028e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	08da      	lsrs	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3208      	adds	r2, #8
 80028a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	69b9      	ldr	r1, [r7, #24]
 80028e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0203 	and.w	r2, r3, #3
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80a2 	beq.w	8002a6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b57      	ldr	r3, [pc, #348]	; (8002a88 <HAL_GPIO_Init+0x2e8>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	4a56      	ldr	r2, [pc, #344]	; (8002a88 <HAL_GPIO_Init+0x2e8>)
 8002930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002934:	6453      	str	r3, [r2, #68]	; 0x44
 8002936:	4b54      	ldr	r3, [pc, #336]	; (8002a88 <HAL_GPIO_Init+0x2e8>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002942:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_GPIO_Init+0x2ec>)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	3302      	adds	r3, #2
 800294a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	220f      	movs	r2, #15
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a49      	ldr	r2, [pc, #292]	; (8002a90 <HAL_GPIO_Init+0x2f0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d019      	beq.n	80029a2 <HAL_GPIO_Init+0x202>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a48      	ldr	r2, [pc, #288]	; (8002a94 <HAL_GPIO_Init+0x2f4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_GPIO_Init+0x1fe>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a47      	ldr	r2, [pc, #284]	; (8002a98 <HAL_GPIO_Init+0x2f8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00d      	beq.n	800299a <HAL_GPIO_Init+0x1fa>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a46      	ldr	r2, [pc, #280]	; (8002a9c <HAL_GPIO_Init+0x2fc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <HAL_GPIO_Init+0x1f6>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a45      	ldr	r2, [pc, #276]	; (8002aa0 <HAL_GPIO_Init+0x300>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d101      	bne.n	8002992 <HAL_GPIO_Init+0x1f2>
 800298e:	2304      	movs	r3, #4
 8002990:	e008      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 8002992:	2307      	movs	r3, #7
 8002994:	e006      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 8002996:	2303      	movs	r3, #3
 8002998:	e004      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 800299a:	2302      	movs	r3, #2
 800299c:	e002      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 80029a2:	2300      	movs	r3, #0
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	f002 0203 	and.w	r2, r2, #3
 80029aa:	0092      	lsls	r2, r2, #2
 80029ac:	4093      	lsls	r3, r2
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b4:	4935      	ldr	r1, [pc, #212]	; (8002a8c <HAL_GPIO_Init+0x2ec>)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c2:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e6:	4a2f      	ldr	r2, [pc, #188]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ec:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a10:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a16:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a3a:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a40:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a64:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b0f      	cmp	r3, #15
 8002a74:	f67f aea2 	bls.w	80027bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40020400 	.word	0x40020400
 8002a98:	40020800 	.word	0x40020800
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40013c00 	.word	0x40013c00

08002aa8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e0bb      	b.n	8002c3c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	f040 80ab 	bne.w	8002c36 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002ae0:	4a5c      	ldr	r2, [pc, #368]	; (8002c54 <HAL_GPIO_DeInit+0x1ac>)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4013      	ands	r3, r2
 8002b00:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a54      	ldr	r2, [pc, #336]	; (8002c58 <HAL_GPIO_DeInit+0x1b0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d019      	beq.n	8002b3e <HAL_GPIO_DeInit+0x96>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a53      	ldr	r2, [pc, #332]	; (8002c5c <HAL_GPIO_DeInit+0x1b4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d013      	beq.n	8002b3a <HAL_GPIO_DeInit+0x92>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a52      	ldr	r2, [pc, #328]	; (8002c60 <HAL_GPIO_DeInit+0x1b8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00d      	beq.n	8002b36 <HAL_GPIO_DeInit+0x8e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a51      	ldr	r2, [pc, #324]	; (8002c64 <HAL_GPIO_DeInit+0x1bc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <HAL_GPIO_DeInit+0x8a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a50      	ldr	r2, [pc, #320]	; (8002c68 <HAL_GPIO_DeInit+0x1c0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d101      	bne.n	8002b2e <HAL_GPIO_DeInit+0x86>
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	e008      	b.n	8002b40 <HAL_GPIO_DeInit+0x98>
 8002b2e:	2307      	movs	r3, #7
 8002b30:	e006      	b.n	8002b40 <HAL_GPIO_DeInit+0x98>
 8002b32:	2303      	movs	r3, #3
 8002b34:	e004      	b.n	8002b40 <HAL_GPIO_DeInit+0x98>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e002      	b.n	8002b40 <HAL_GPIO_DeInit+0x98>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_GPIO_DeInit+0x98>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	f002 0203 	and.w	r2, r2, #3
 8002b46:	0092      	lsls	r2, r2, #2
 8002b48:	4093      	lsls	r3, r2
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d132      	bne.n	8002bb6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b50:	4b46      	ldr	r3, [pc, #280]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	4944      	ldr	r1, [pc, #272]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002b5e:	4b43      	ldr	r3, [pc, #268]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	4941      	ldr	r1, [pc, #260]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b6c:	4b3f      	ldr	r3, [pc, #252]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	493d      	ldr	r1, [pc, #244]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b7a:	4b3c      	ldr	r3, [pc, #240]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	493a      	ldr	r1, [pc, #232]	; (8002c6c <HAL_GPIO_DeInit+0x1c4>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002b98:	4a2e      	ldr	r2, [pc, #184]	; (8002c54 <HAL_GPIO_DeInit+0x1ac>)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	482a      	ldr	r0, [pc, #168]	; (8002c54 <HAL_GPIO_DeInit+0x1ac>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	400a      	ands	r2, r1
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	220f      	movs	r2, #15
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	08d2      	lsrs	r2, r2, #3
 8002bec:	4019      	ands	r1, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2103      	movs	r1, #3
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	401a      	ands	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	2101      	movs	r1, #1
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2103      	movs	r1, #3
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	401a      	ands	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b0f      	cmp	r3, #15
 8002c40:	f67f af40 	bls.w	8002ac4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40013800 	.word	0x40013800
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40020800 	.word	0x40020800
 8002c64:	40020c00 	.word	0x40020c00
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40013c00 	.word	0x40013c00

08002c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c80:	787b      	ldrb	r3, [r7, #1]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c8c:	e003      	b.n	8002c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	041a      	lsls	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	619a      	str	r2, [r3, #24]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb4:	887a      	ldrh	r2, [r7, #2]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	041a      	lsls	r2, r3, #16
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	43d9      	mvns	r1, r3
 8002cc0:	887b      	ldrh	r3, [r7, #2]
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	619a      	str	r2, [r3, #24]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff f846 	bl	8001d88 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d0a:	b08f      	sub	sp, #60	; 0x3c
 8002d0c:	af0a      	add	r7, sp, #40	; 0x28
 8002d0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e054      	b.n	8002dc4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d106      	bne.n	8002d3a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f008 f9c3 	bl	800b0c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f004 ff9b 	bl	8007c94 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	687e      	ldr	r6, [r7, #4]
 8002d66:	466d      	mov	r5, sp
 8002d68:	f106 0410 	add.w	r4, r6, #16
 8002d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d78:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d7c:	1d33      	adds	r3, r6, #4
 8002d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d80:	6838      	ldr	r0, [r7, #0]
 8002d82:	f004 ff15 	bl	8007bb0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f004 ff92 	bl	8007cb6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	687e      	ldr	r6, [r7, #4]
 8002d9a:	466d      	mov	r5, sp
 8002d9c:	f106 0410 	add.w	r4, r6, #16
 8002da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dac:	e885 0003 	stmia.w	r5, {r0, r1}
 8002db0:	1d33      	adds	r3, r6, #4
 8002db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db4:	6838      	ldr	r0, [r7, #0]
 8002db6:	f005 f91b 	bl	8007ff0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dcc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af04      	add	r7, sp, #16
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	4608      	mov	r0, r1
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	70fb      	strb	r3, [r7, #3]
 8002dde:	460b      	mov	r3, r1
 8002de0:	70bb      	strb	r3, [r7, #2]
 8002de2:	4613      	mov	r3, r2
 8002de4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_HCD_HC_Init+0x28>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e076      	b.n	8002ee2 <HAL_HCD_HC_Init+0x116>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	333d      	adds	r3, #61	; 0x3d
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	212c      	movs	r1, #44	; 0x2c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	3338      	adds	r3, #56	; 0x38
 8002e1c:	787a      	ldrb	r2, [r7, #1]
 8002e1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3340      	adds	r3, #64	; 0x40
 8002e2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e30:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3339      	adds	r3, #57	; 0x39
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	333f      	adds	r3, #63	; 0x3f
 8002e52:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	78ba      	ldrb	r2, [r7, #2]
 8002e5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e60:	b2d0      	uxtb	r0, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	212c      	movs	r1, #44	; 0x2c
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	333a      	adds	r3, #58	; 0x3a
 8002e6e:	4602      	mov	r2, r0
 8002e70:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	da09      	bge.n	8002e8e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	333b      	adds	r3, #59	; 0x3b
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e008      	b.n	8002ea0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	333b      	adds	r3, #59	; 0x3b
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	333c      	adds	r3, #60	; 0x3c
 8002eae:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002eb2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	787c      	ldrb	r4, [r7, #1]
 8002eba:	78ba      	ldrb	r2, [r7, #2]
 8002ebc:	78f9      	ldrb	r1, [r7, #3]
 8002ebe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ec0:	9302      	str	r3, [sp, #8]
 8002ec2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	4623      	mov	r3, r4
 8002ed0:	f005 fa14 	bl	80082fc <USB_HC_Init>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd90      	pop	{r4, r7, pc}

08002eea <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_HCD_HC_Halt+0x1e>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e00f      	b.n	8002f28 <HAL_HCD_HC_Halt+0x3e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f005 fc64 	bl	80087e6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	70fb      	strb	r3, [r7, #3]
 8002f42:	460b      	mov	r3, r1
 8002f44:	70bb      	strb	r3, [r7, #2]
 8002f46:	4613      	mov	r3, r2
 8002f48:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	333b      	adds	r3, #59	; 0x3b
 8002f58:	78ba      	ldrb	r2, [r7, #2]
 8002f5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	333f      	adds	r3, #63	; 0x3f
 8002f6a:	787a      	ldrb	r2, [r7, #1]
 8002f6c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f6e:	7c3b      	ldrb	r3, [r7, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d112      	bne.n	8002f9a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3342      	adds	r3, #66	; 0x42
 8002f82:	2203      	movs	r2, #3
 8002f84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	333d      	adds	r3, #61	; 0x3d
 8002f94:	7f3a      	ldrb	r2, [r7, #28]
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e008      	b.n	8002fac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3342      	adds	r3, #66	; 0x42
 8002fa8:	2202      	movs	r2, #2
 8002faa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fac:	787b      	ldrb	r3, [r7, #1]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	f200 80c6 	bhi.w	8003140 <HAL_HCD_HC_SubmitRequest+0x210>
 8002fb4:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	0800312d 	.word	0x0800312d
 8002fc4:	08003031 	.word	0x08003031
 8002fc8:	080030af 	.word	0x080030af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fcc:	7c3b      	ldrb	r3, [r7, #16]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	f040 80b8 	bne.w	8003144 <HAL_HCD_HC_SubmitRequest+0x214>
 8002fd4:	78bb      	ldrb	r3, [r7, #2]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 80b4 	bne.w	8003144 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002fdc:	8b3b      	ldrh	r3, [r7, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d108      	bne.n	8002ff4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	212c      	movs	r1, #44	; 0x2c
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	3355      	adds	r3, #85	; 0x55
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	212c      	movs	r1, #44	; 0x2c
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	3355      	adds	r3, #85	; 0x55
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3342      	adds	r3, #66	; 0x42
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800301a:	e093      	b.n	8003144 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	3342      	adds	r3, #66	; 0x42
 800302a:	2202      	movs	r2, #2
 800302c:	701a      	strb	r2, [r3, #0]
      break;
 800302e:	e089      	b.n	8003144 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003030:	78bb      	ldrb	r3, [r7, #2]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d11d      	bne.n	8003072 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	212c      	movs	r1, #44	; 0x2c
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	3355      	adds	r3, #85	; 0x55
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	212c      	movs	r1, #44	; 0x2c
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	3342      	adds	r3, #66	; 0x42
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800305c:	e073      	b.n	8003146 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	212c      	movs	r1, #44	; 0x2c
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	3342      	adds	r3, #66	; 0x42
 800306c:	2202      	movs	r2, #2
 800306e:	701a      	strb	r2, [r3, #0]
      break;
 8003070:	e069      	b.n	8003146 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3354      	adds	r3, #84	; 0x54
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3342      	adds	r3, #66	; 0x42
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
      break;
 8003098:	e055      	b.n	8003146 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	3342      	adds	r3, #66	; 0x42
 80030a8:	2202      	movs	r2, #2
 80030aa:	701a      	strb	r2, [r3, #0]
      break;
 80030ac:	e04b      	b.n	8003146 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030ae:	78bb      	ldrb	r3, [r7, #2]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d11d      	bne.n	80030f0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3355      	adds	r3, #85	; 0x55
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	212c      	movs	r1, #44	; 0x2c
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	3342      	adds	r3, #66	; 0x42
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030da:	e034      	b.n	8003146 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3342      	adds	r3, #66	; 0x42
 80030ea:	2202      	movs	r2, #2
 80030ec:	701a      	strb	r2, [r3, #0]
      break;
 80030ee:	e02a      	b.n	8003146 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	212c      	movs	r1, #44	; 0x2c
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	3354      	adds	r3, #84	; 0x54
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	3342      	adds	r3, #66	; 0x42
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
      break;
 8003116:	e016      	b.n	8003146 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	3342      	adds	r3, #66	; 0x42
 8003126:	2202      	movs	r2, #2
 8003128:	701a      	strb	r2, [r3, #0]
      break;
 800312a:	e00c      	b.n	8003146 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	212c      	movs	r1, #44	; 0x2c
 8003132:	fb01 f303 	mul.w	r3, r1, r3
 8003136:	4413      	add	r3, r2
 8003138:	3342      	adds	r3, #66	; 0x42
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
      break;
 800313e:	e002      	b.n	8003146 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003140:	bf00      	nop
 8003142:	e000      	b.n	8003146 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003144:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	212c      	movs	r1, #44	; 0x2c
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	3344      	adds	r3, #68	; 0x44
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	8b3a      	ldrh	r2, [r7, #24]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	202c      	movs	r0, #44	; 0x2c
 8003160:	fb00 f303 	mul.w	r3, r0, r3
 8003164:	440b      	add	r3, r1
 8003166:	334c      	adds	r3, #76	; 0x4c
 8003168:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	3360      	adds	r3, #96	; 0x60
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	212c      	movs	r1, #44	; 0x2c
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3350      	adds	r3, #80	; 0x50
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	212c      	movs	r1, #44	; 0x2c
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	4413      	add	r3, r2
 800319a:	3339      	adds	r3, #57	; 0x39
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3361      	adds	r3, #97	; 0x61
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	222c      	movs	r2, #44	; 0x2c
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	3338      	adds	r3, #56	; 0x38
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	18d1      	adds	r1, r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	f005 f9b8 	bl	8008540 <USB_HC_StartXfer>
 80031d0:	4603      	mov	r3, r0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop

080031dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f004 feb9 	bl	8007f6a <USB_GetMode>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	f040 80f6 	bne.w	80033ec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f004 fe9d 	bl	8007f44 <USB_ReadInterrupts>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80ec 	beq.w	80033ea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f004 fe94 	bl	8007f44 <USB_ReadInterrupts>
 800321c:	4603      	mov	r3, r0
 800321e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003226:	d104      	bne.n	8003232 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003230:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f004 fe84 	bl	8007f44 <USB_ReadInterrupts>
 800323c:	4603      	mov	r3, r0
 800323e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003246:	d104      	bne.n	8003252 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003250:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f004 fe74 	bl	8007f44 <USB_ReadInterrupts>
 800325c:	4603      	mov	r3, r0
 800325e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003262:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003266:	d104      	bne.n	8003272 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003270:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f004 fe64 	bl	8007f44 <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b02      	cmp	r3, #2
 8003284:	d103      	bne.n	800328e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2202      	movs	r2, #2
 800328c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f004 fe56 	bl	8007f44 <USB_ReadInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800329e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032a2:	d11c      	bne.n	80032de <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80032ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10f      	bne.n	80032de <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80032be:	2110      	movs	r1, #16
 80032c0:	6938      	ldr	r0, [r7, #16]
 80032c2:	f004 fd45 	bl	8007d50 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80032c6:	6938      	ldr	r0, [r7, #16]
 80032c8:	f004 fd76 	bl	8007db8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f004 ff4c 	bl	8008170 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f007 ff6f 	bl	800b1bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f004 fe2e 	bl	8007f44 <USB_ReadInterrupts>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f2:	d102      	bne.n	80032fa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f001 f89e 	bl	8004436 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 fe20 	bl	8007f44 <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b08      	cmp	r3, #8
 800330c:	d106      	bne.n	800331c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f007 ff38 	bl	800b184 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2208      	movs	r2, #8
 800331a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f004 fe0f 	bl	8007f44 <USB_ReadInterrupts>
 8003326:	4603      	mov	r3, r0
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b10      	cmp	r3, #16
 800332e:	d101      	bne.n	8003334 <HAL_HCD_IRQHandler+0x158>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_HCD_IRQHandler+0x15a>
 8003334:	2300      	movs	r3, #0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d012      	beq.n	8003360 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699a      	ldr	r2, [r3, #24]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0210 	bic.w	r2, r2, #16
 8003348:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 ffa1 	bl	8004292 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0210 	orr.w	r2, r2, #16
 800335e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f004 fded 	bl	8007f44 <USB_ReadInterrupts>
 800336a:	4603      	mov	r3, r0
 800336c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003374:	d13a      	bne.n	80033ec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f005 fa22 	bl	80087c4 <USB_HC_ReadInterrupt>
 8003380:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	e025      	b.n	80033d4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d018      	beq.n	80033ce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b2:	d106      	bne.n	80033c2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	4619      	mov	r1, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f8ab 	bl	8003516 <HCD_HC_IN_IRQHandler>
 80033c0:	e005      	b.n	80033ce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	4619      	mov	r1, r3
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fbf9 	bl	8003bc0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	3301      	adds	r3, #1
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d3d4      	bcc.n	8003388 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e6:	615a      	str	r2, [r3, #20]
 80033e8:	e000      	b.n	80033ec <HAL_HCD_IRQHandler+0x210>
      return;
 80033ea:	bf00      	nop
    }
  }
}
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_HCD_Start+0x16>
 8003404:	2302      	movs	r3, #2
 8003406:	e013      	b.n	8003430 <HAL_HCD_Start+0x3e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2101      	movs	r1, #1
 8003416:	4618      	mov	r0, r3
 8003418:	f004 ff0e 	bl	8008238 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f004 fc26 	bl	8007c72 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_HCD_Stop+0x16>
 800344a:	2302      	movs	r3, #2
 800344c:	e00d      	b.n	800346a <HAL_HCD_Stop+0x32>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f005 fafc 	bl	8008a58 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f004 feb0 	bl	80081e4 <USB_ResetPort>
 8003484:	4603      	mov	r3, r0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	3360      	adds	r3, #96	; 0x60
 80034a8:	781b      	ldrb	r3, [r3, #0]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	3350      	adds	r3, #80	; 0x50
 80034d0:	681b      	ldr	r3, [r3, #0]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f004 fef4 	bl	80082d8 <USB_GetCurrentFrame>
 80034f0:	4603      	mov	r3, r0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f004 fecf 	bl	80082aa <USB_GetHostSpeed>
 800350c:	4603      	mov	r3, r0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b04      	cmp	r3, #4
 8003544:	d11a      	bne.n	800357c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003552:	461a      	mov	r2, r3
 8003554:	2304      	movs	r3, #4
 8003556:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3361      	adds	r3, #97	; 0x61
 8003566:	2206      	movs	r2, #6
 8003568:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f005 f936 	bl	80087e6 <USB_HC_Halt>
 800357a:	e0af      	b.n	80036dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4413      	add	r3, r2
 8003584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003592:	d11b      	bne.n	80035cc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4413      	add	r3, r2
 800359c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a0:	461a      	mov	r2, r3
 80035a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	212c      	movs	r1, #44	; 0x2c
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	3361      	adds	r3, #97	; 0x61
 80035b6:	2207      	movs	r2, #7
 80035b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f005 f90e 	bl	80087e6 <USB_HC_Halt>
 80035ca:	e087      	b.n	80036dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d109      	bne.n	80035f6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ee:	461a      	mov	r2, r3
 80035f0:	2320      	movs	r3, #32
 80035f2:	6093      	str	r3, [r2, #8]
 80035f4:	e072      	b.n	80036dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b08      	cmp	r3, #8
 800360a:	d11a      	bne.n	8003642 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003618:	461a      	mov	r2, r3
 800361a:	2308      	movs	r3, #8
 800361c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	3361      	adds	r3, #97	; 0x61
 800362c:	2205      	movs	r2, #5
 800362e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	4611      	mov	r1, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f005 f8d3 	bl	80087e6 <USB_HC_Halt>
 8003640:	e04c      	b.n	80036dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4413      	add	r3, r2
 800364a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003658:	d11b      	bne.n	8003692 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4413      	add	r3, r2
 8003662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003666:	461a      	mov	r2, r3
 8003668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800366c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	212c      	movs	r1, #44	; 0x2c
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	4413      	add	r3, r2
 800367a:	3361      	adds	r3, #97	; 0x61
 800367c:	2208      	movs	r2, #8
 800367e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	4611      	mov	r1, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f005 f8ab 	bl	80087e6 <USB_HC_Halt>
 8003690:	e024      	b.n	80036dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4413      	add	r3, r2
 800369a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a4:	2b80      	cmp	r3, #128	; 0x80
 80036a6:	d119      	bne.n	80036dc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b4:	461a      	mov	r2, r3
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	212c      	movs	r1, #44	; 0x2c
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	3361      	adds	r3, #97	; 0x61
 80036c8:	2206      	movs	r2, #6
 80036ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	4611      	mov	r1, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f005 f885 	bl	80087e6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f2:	d112      	bne.n	800371a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f005 f871 	bl	80087e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003710:	461a      	mov	r2, r3
 8003712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003716:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003718:	e24e      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4413      	add	r3, r2
 8003722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	f040 80df 	bne.w	80038f0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d019      	beq.n	800376e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	3348      	adds	r3, #72	; 0x48
 8003748:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	0159      	lsls	r1, r3, #5
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	440b      	add	r3, r1
 8003752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800375c:	1ad2      	subs	r2, r2, r3
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	202c      	movs	r0, #44	; 0x2c
 8003764:	fb00 f303 	mul.w	r3, r0, r3
 8003768:	440b      	add	r3, r1
 800376a:	3350      	adds	r3, #80	; 0x50
 800376c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	3361      	adds	r3, #97	; 0x61
 800377c:	2201      	movs	r2, #1
 800377e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	212c      	movs	r1, #44	; 0x2c
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	335c      	adds	r3, #92	; 0x5c
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	461a      	mov	r2, r3
 80037a0:	2301      	movs	r3, #1
 80037a2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	333f      	adds	r3, #63	; 0x3f
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d009      	beq.n	80037cc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	333f      	adds	r3, #63	; 0x3f
 80037c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d111      	bne.n	80037f0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f005 f805 	bl	80087e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	461a      	mov	r2, r3
 80037ea:	2310      	movs	r3, #16
 80037ec:	6093      	str	r3, [r2, #8]
 80037ee:	e03a      	b.n	8003866 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	212c      	movs	r1, #44	; 0x2c
 80037f6:	fb01 f303 	mul.w	r3, r1, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	333f      	adds	r3, #63	; 0x3f
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d009      	beq.n	8003818 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	212c      	movs	r1, #44	; 0x2c
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	333f      	adds	r3, #63	; 0x3f
 8003812:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003814:	2b01      	cmp	r3, #1
 8003816:	d126      	bne.n	8003866 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4413      	add	r3, r2
 8003820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	0151      	lsls	r1, r2, #5
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	440a      	add	r2, r1
 800382e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003832:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003836:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	212c      	movs	r1, #44	; 0x2c
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	3360      	adds	r3, #96	; 0x60
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	b2d9      	uxtb	r1, r3
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	202c      	movs	r0, #44	; 0x2c
 8003854:	fb00 f303 	mul.w	r3, r0, r3
 8003858:	4413      	add	r3, r2
 800385a:	3360      	adds	r3, #96	; 0x60
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f007 fcb9 	bl	800b1d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d12b      	bne.n	80038c6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	3348      	adds	r3, #72	; 0x48
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	202c      	movs	r0, #44	; 0x2c
 8003884:	fb00 f202 	mul.w	r2, r0, r2
 8003888:	440a      	add	r2, r1
 800388a:	3240      	adds	r2, #64	; 0x40
 800388c:	8812      	ldrh	r2, [r2, #0]
 800388e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 818e 	beq.w	8003bb8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	3354      	adds	r3, #84	; 0x54
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	f083 0301 	eor.w	r3, r3, #1
 80038b0:	b2d8      	uxtb	r0, r3
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	212c      	movs	r1, #44	; 0x2c
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	4413      	add	r3, r2
 80038be:	3354      	adds	r3, #84	; 0x54
 80038c0:	4602      	mov	r2, r0
 80038c2:	701a      	strb	r2, [r3, #0]
}
 80038c4:	e178      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	3354      	adds	r3, #84	; 0x54
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	f083 0301 	eor.w	r3, r3, #1
 80038da:	b2d8      	uxtb	r0, r3
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	212c      	movs	r1, #44	; 0x2c
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	4413      	add	r3, r2
 80038e8:	3354      	adds	r3, #84	; 0x54
 80038ea:	4602      	mov	r2, r0
 80038ec:	701a      	strb	r2, [r3, #0]
}
 80038ee:	e163      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b02      	cmp	r3, #2
 8003904:	f040 80f6 	bne.w	8003af4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	212c      	movs	r1, #44	; 0x2c
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	3361      	adds	r3, #97	; 0x61
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d109      	bne.n	8003930 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	212c      	movs	r1, #44	; 0x2c
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	4413      	add	r3, r2
 8003928:	3360      	adds	r3, #96	; 0x60
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	e0c9      	b.n	8003ac4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	3361      	adds	r3, #97	; 0x61
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b05      	cmp	r3, #5
 8003942:	d109      	bne.n	8003958 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	3360      	adds	r3, #96	; 0x60
 8003952:	2205      	movs	r2, #5
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e0b5      	b.n	8003ac4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	212c      	movs	r1, #44	; 0x2c
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	4413      	add	r3, r2
 8003964:	3361      	adds	r3, #97	; 0x61
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b06      	cmp	r3, #6
 800396a:	d009      	beq.n	8003980 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	3361      	adds	r3, #97	; 0x61
 800397a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800397c:	2b08      	cmp	r3, #8
 800397e:	d150      	bne.n	8003a22 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	335c      	adds	r3, #92	; 0x5c
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	202c      	movs	r0, #44	; 0x2c
 8003998:	fb00 f303 	mul.w	r3, r0, r3
 800399c:	440b      	add	r3, r1
 800399e:	335c      	adds	r3, #92	; 0x5c
 80039a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	212c      	movs	r1, #44	; 0x2c
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	4413      	add	r3, r2
 80039ae:	335c      	adds	r3, #92	; 0x5c
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d912      	bls.n	80039dc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	335c      	adds	r3, #92	; 0x5c
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	212c      	movs	r1, #44	; 0x2c
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	3360      	adds	r3, #96	; 0x60
 80039d6:	2204      	movs	r2, #4
 80039d8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039da:	e073      	b.n	8003ac4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3360      	adds	r3, #96	; 0x60
 80039ea:	2202      	movs	r2, #2
 80039ec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a04:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a0c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a20:	e050      	b.n	8003ac4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	212c      	movs	r1, #44	; 0x2c
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3361      	adds	r3, #97	; 0x61
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d122      	bne.n	8003a7c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	212c      	movs	r1, #44	; 0x2c
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	3360      	adds	r3, #96	; 0x60
 8003a44:	2202      	movs	r2, #2
 8003a46:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a5e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a66:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a74:	461a      	mov	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e023      	b.n	8003ac4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	212c      	movs	r1, #44	; 0x2c
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	3361      	adds	r3, #97	; 0x61
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b07      	cmp	r3, #7
 8003a8e:	d119      	bne.n	8003ac4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	212c      	movs	r1, #44	; 0x2c
 8003a96:	fb01 f303 	mul.w	r3, r1, r3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	335c      	adds	r3, #92	; 0x5c
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	202c      	movs	r0, #44	; 0x2c
 8003aa8:	fb00 f303 	mul.w	r3, r0, r3
 8003aac:	440b      	add	r3, r1
 8003aae:	335c      	adds	r3, #92	; 0x5c
 8003ab0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	212c      	movs	r1, #44	; 0x2c
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	4413      	add	r3, r2
 8003abe:	3360      	adds	r3, #96	; 0x60
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	b2d9      	uxtb	r1, r3
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	202c      	movs	r0, #44	; 0x2c
 8003ae0:	fb00 f303 	mul.w	r3, r0, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3360      	adds	r3, #96	; 0x60
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f007 fb73 	bl	800b1d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003af2:	e061      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	d156      	bne.n	8003bb8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	212c      	movs	r1, #44	; 0x2c
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	333f      	adds	r3, #63	; 0x3f
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d111      	bne.n	8003b42 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	212c      	movs	r1, #44	; 0x2c
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	335c      	adds	r3, #92	; 0x5c
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 fe53 	bl	80087e6 <USB_HC_Halt>
 8003b40:	e031      	b.n	8003ba6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	333f      	adds	r3, #63	; 0x3f
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	212c      	movs	r1, #44	; 0x2c
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	4413      	add	r3, r2
 8003b62:	333f      	adds	r3, #63	; 0x3f
 8003b64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d11d      	bne.n	8003ba6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	212c      	movs	r1, #44	; 0x2c
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	335c      	adds	r3, #92	; 0x5c
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d110      	bne.n	8003ba6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	212c      	movs	r1, #44	; 0x2c
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	3361      	adds	r3, #97	; 0x61
 8003b92:	2203      	movs	r2, #3
 8003b94:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f004 fe20 	bl	80087e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	6093      	str	r3, [r2, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d11a      	bne.n	8003c26 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	2304      	movs	r3, #4
 8003c00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	212c      	movs	r1, #44	; 0x2c
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3361      	adds	r3, #97	; 0x61
 8003c10:	2206      	movs	r2, #6
 8003c12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f004 fde1 	bl	80087e6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003c24:	e331      	b.n	800428a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d12e      	bne.n	8003c9a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	212c      	movs	r1, #44	; 0x2c
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	4413      	add	r3, r2
 8003c5a:	333d      	adds	r3, #61	; 0x3d
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	f040 8313 	bne.w	800428a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	333d      	adds	r3, #61	; 0x3d
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	212c      	movs	r1, #44	; 0x2c
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	4413      	add	r3, r2
 8003c82:	3360      	adds	r3, #96	; 0x60
 8003c84:	2202      	movs	r2, #2
 8003c86:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f004 fda7 	bl	80087e6 <USB_HC_Halt>
}
 8003c98:	e2f7      	b.n	800428a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb0:	d112      	bne.n	8003cd8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cc4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f004 fd88 	bl	80087e6 <USB_HC_Halt>
}
 8003cd6:	e2d8      	b.n	800428a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d140      	bne.n	8003d70 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	212c      	movs	r1, #44	; 0x2c
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	335c      	adds	r3, #92	; 0x5c
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d111      	bne.n	8003d3a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	212c      	movs	r1, #44	; 0x2c
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	333d      	adds	r3, #61	; 0x3d
 8003d24:	2201      	movs	r2, #1
 8003d26:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d34:	461a      	mov	r2, r3
 8003d36:	2340      	movs	r3, #64	; 0x40
 8003d38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d46:	461a      	mov	r2, r3
 8003d48:	2301      	movs	r3, #1
 8003d4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	212c      	movs	r1, #44	; 0x2c
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	4413      	add	r3, r2
 8003d58:	3361      	adds	r3, #97	; 0x61
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f004 fd3c 	bl	80087e6 <USB_HC_Halt>
}
 8003d6e:	e28c      	b.n	800428a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b40      	cmp	r3, #64	; 0x40
 8003d84:	d12c      	bne.n	8003de0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	212c      	movs	r1, #44	; 0x2c
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	4413      	add	r3, r2
 8003d92:	3361      	adds	r3, #97	; 0x61
 8003d94:	2204      	movs	r2, #4
 8003d96:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	333d      	adds	r3, #61	; 0x3d
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	212c      	movs	r1, #44	; 0x2c
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	335c      	adds	r3, #92	; 0x5c
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f004 fd0d 	bl	80087e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2340      	movs	r3, #64	; 0x40
 8003ddc:	6093      	str	r3, [r2, #8]
}
 8003dde:	e254      	b.n	800428a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d11a      	bne.n	8003e2c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e02:	461a      	mov	r2, r3
 8003e04:	2308      	movs	r3, #8
 8003e06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	212c      	movs	r1, #44	; 0x2c
 8003e0e:	fb01 f303 	mul.w	r3, r1, r3
 8003e12:	4413      	add	r3, r2
 8003e14:	3361      	adds	r3, #97	; 0x61
 8003e16:	2205      	movs	r2, #5
 8003e18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f004 fcde 	bl	80087e6 <USB_HC_Halt>
}
 8003e2a:	e22e      	b.n	800428a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d140      	bne.n	8003ec4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	212c      	movs	r1, #44	; 0x2c
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	335c      	adds	r3, #92	; 0x5c
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	212c      	movs	r1, #44	; 0x2c
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	4413      	add	r3, r2
 8003e60:	3361      	adds	r3, #97	; 0x61
 8003e62:	2203      	movs	r2, #3
 8003e64:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	212c      	movs	r1, #44	; 0x2c
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	4413      	add	r3, r2
 8003e72:	333d      	adds	r3, #61	; 0x3d
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d112      	bne.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	212c      	movs	r1, #44	; 0x2c
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	333c      	adds	r3, #60	; 0x3c
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d108      	bne.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	333d      	adds	r3, #61	; 0x3d
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f004 fc9b 	bl	80087e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2310      	movs	r3, #16
 8003ec0:	6093      	str	r3, [r2, #8]
}
 8003ec2:	e1e2      	b.n	800428a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d164      	bne.n	8003fa4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d111      	bne.n	8003f06 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	212c      	movs	r1, #44	; 0x2c
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	3361      	adds	r3, #97	; 0x61
 8003ef0:	2206      	movs	r2, #6
 8003ef2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	4611      	mov	r1, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f004 fc71 	bl	80087e6 <USB_HC_Halt>
 8003f04:	e044      	b.n	8003f90 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	212c      	movs	r1, #44	; 0x2c
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	335c      	adds	r3, #92	; 0x5c
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	202c      	movs	r0, #44	; 0x2c
 8003f1e:	fb00 f303 	mul.w	r3, r0, r3
 8003f22:	440b      	add	r3, r1
 8003f24:	335c      	adds	r3, #92	; 0x5c
 8003f26:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	335c      	adds	r3, #92	; 0x5c
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d920      	bls.n	8003f7e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	335c      	adds	r3, #92	; 0x5c
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	3360      	adds	r3, #96	; 0x60
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	b2d9      	uxtb	r1, r3
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	202c      	movs	r0, #44	; 0x2c
 8003f6a:	fb00 f303 	mul.w	r3, r0, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3360      	adds	r3, #96	; 0x60
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	461a      	mov	r2, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f007 f92e 	bl	800b1d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f7c:	e008      	b.n	8003f90 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	212c      	movs	r1, #44	; 0x2c
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	3360      	adds	r3, #96	; 0x60
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	6093      	str	r3, [r2, #8]
}
 8003fa2:	e172      	b.n	800428a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fba:	d11b      	bne.n	8003ff4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	212c      	movs	r1, #44	; 0x2c
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3361      	adds	r3, #97	; 0x61
 8003fca:	2208      	movs	r2, #8
 8003fcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f004 fc04 	bl	80087e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fea:	461a      	mov	r2, r3
 8003fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ff0:	6093      	str	r3, [r2, #8]
}
 8003ff2:	e14a      	b.n	800428a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b02      	cmp	r3, #2
 8004008:	f040 813f 	bne.w	800428a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	212c      	movs	r1, #44	; 0x2c
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	4413      	add	r3, r2
 8004018:	3361      	adds	r3, #97	; 0x61
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d17d      	bne.n	800411c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	212c      	movs	r1, #44	; 0x2c
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	4413      	add	r3, r2
 800402c:	3360      	adds	r3, #96	; 0x60
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	212c      	movs	r1, #44	; 0x2c
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	4413      	add	r3, r2
 800403e:	333f      	adds	r3, #63	; 0x3f
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d00a      	beq.n	800405c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	212c      	movs	r1, #44	; 0x2c
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	333f      	adds	r3, #63	; 0x3f
 8004054:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004056:	2b03      	cmp	r3, #3
 8004058:	f040 8100 	bne.w	800425c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d113      	bne.n	800408c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	212c      	movs	r1, #44	; 0x2c
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	4413      	add	r3, r2
 8004070:	3355      	adds	r3, #85	; 0x55
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	f083 0301 	eor.w	r3, r3, #1
 8004078:	b2d8      	uxtb	r0, r3
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	212c      	movs	r1, #44	; 0x2c
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	4413      	add	r3, r2
 8004086:	3355      	adds	r3, #85	; 0x55
 8004088:	4602      	mov	r2, r0
 800408a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b01      	cmp	r3, #1
 8004092:	f040 80e3 	bne.w	800425c <HCD_HC_OUT_IRQHandler+0x69c>
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	212c      	movs	r1, #44	; 0x2c
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	334c      	adds	r3, #76	; 0x4c
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80d8 	beq.w	800425c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	212c      	movs	r1, #44	; 0x2c
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	4413      	add	r3, r2
 80040b8:	334c      	adds	r3, #76	; 0x4c
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	202c      	movs	r0, #44	; 0x2c
 80040c2:	fb00 f202 	mul.w	r2, r0, r2
 80040c6:	440a      	add	r2, r1
 80040c8:	3240      	adds	r2, #64	; 0x40
 80040ca:	8812      	ldrh	r2, [r2, #0]
 80040cc:	4413      	add	r3, r2
 80040ce:	3b01      	subs	r3, #1
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	202c      	movs	r0, #44	; 0x2c
 80040d6:	fb00 f202 	mul.w	r2, r0, r2
 80040da:	440a      	add	r2, r1
 80040dc:	3240      	adds	r2, #64	; 0x40
 80040de:	8812      	ldrh	r2, [r2, #0]
 80040e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80b5 	beq.w	800425c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	3355      	adds	r3, #85	; 0x55
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	f083 0301 	eor.w	r3, r3, #1
 8004106:	b2d8      	uxtb	r0, r3
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	212c      	movs	r1, #44	; 0x2c
 800410e:	fb01 f303 	mul.w	r3, r1, r3
 8004112:	4413      	add	r3, r2
 8004114:	3355      	adds	r3, #85	; 0x55
 8004116:	4602      	mov	r2, r0
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	e09f      	b.n	800425c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	212c      	movs	r1, #44	; 0x2c
 8004122:	fb01 f303 	mul.w	r3, r1, r3
 8004126:	4413      	add	r3, r2
 8004128:	3361      	adds	r3, #97	; 0x61
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b03      	cmp	r3, #3
 800412e:	d109      	bne.n	8004144 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	212c      	movs	r1, #44	; 0x2c
 8004136:	fb01 f303 	mul.w	r3, r1, r3
 800413a:	4413      	add	r3, r2
 800413c:	3360      	adds	r3, #96	; 0x60
 800413e:	2202      	movs	r2, #2
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e08b      	b.n	800425c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	212c      	movs	r1, #44	; 0x2c
 800414a:	fb01 f303 	mul.w	r3, r1, r3
 800414e:	4413      	add	r3, r2
 8004150:	3361      	adds	r3, #97	; 0x61
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b04      	cmp	r3, #4
 8004156:	d109      	bne.n	800416c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	3360      	adds	r3, #96	; 0x60
 8004166:	2202      	movs	r2, #2
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e077      	b.n	800425c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	212c      	movs	r1, #44	; 0x2c
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	4413      	add	r3, r2
 8004178:	3361      	adds	r3, #97	; 0x61
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b05      	cmp	r3, #5
 800417e:	d109      	bne.n	8004194 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	212c      	movs	r1, #44	; 0x2c
 8004186:	fb01 f303 	mul.w	r3, r1, r3
 800418a:	4413      	add	r3, r2
 800418c:	3360      	adds	r3, #96	; 0x60
 800418e:	2205      	movs	r2, #5
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	e063      	b.n	800425c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	212c      	movs	r1, #44	; 0x2c
 800419a:	fb01 f303 	mul.w	r3, r1, r3
 800419e:	4413      	add	r3, r2
 80041a0:	3361      	adds	r3, #97	; 0x61
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b06      	cmp	r3, #6
 80041a6:	d009      	beq.n	80041bc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	212c      	movs	r1, #44	; 0x2c
 80041ae:	fb01 f303 	mul.w	r3, r1, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	3361      	adds	r3, #97	; 0x61
 80041b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d14f      	bne.n	800425c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	212c      	movs	r1, #44	; 0x2c
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	335c      	adds	r3, #92	; 0x5c
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	202c      	movs	r0, #44	; 0x2c
 80041d4:	fb00 f303 	mul.w	r3, r0, r3
 80041d8:	440b      	add	r3, r1
 80041da:	335c      	adds	r3, #92	; 0x5c
 80041dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	212c      	movs	r1, #44	; 0x2c
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	4413      	add	r3, r2
 80041ea:	335c      	adds	r3, #92	; 0x5c
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d912      	bls.n	8004218 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	212c      	movs	r1, #44	; 0x2c
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	335c      	adds	r3, #92	; 0x5c
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	212c      	movs	r1, #44	; 0x2c
 800420a:	fb01 f303 	mul.w	r3, r1, r3
 800420e:	4413      	add	r3, r2
 8004210:	3360      	adds	r3, #96	; 0x60
 8004212:	2204      	movs	r2, #4
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	e021      	b.n	800425c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	212c      	movs	r1, #44	; 0x2c
 800421e:	fb01 f303 	mul.w	r3, r1, r3
 8004222:	4413      	add	r3, r2
 8004224:	3360      	adds	r3, #96	; 0x60
 8004226:	2202      	movs	r2, #2
 8004228:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	4413      	add	r3, r2
 8004232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004240:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004248:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	461a      	mov	r2, r3
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	4413      	add	r3, r2
 8004264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004268:	461a      	mov	r2, r3
 800426a:	2302      	movs	r3, #2
 800426c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	b2d9      	uxtb	r1, r3
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	202c      	movs	r0, #44	; 0x2c
 8004278:	fb00 f303 	mul.w	r3, r0, r3
 800427c:	4413      	add	r3, r2
 800427e:	3360      	adds	r3, #96	; 0x60
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f006 ffa7 	bl	800b1d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800428a:	bf00      	nop
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b08a      	sub	sp, #40	; 0x28
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	0c5b      	lsrs	r3, r3, #17
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042c6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d004      	beq.n	80042d8 <HCD_RXQLVL_IRQHandler+0x46>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b05      	cmp	r3, #5
 80042d2:	f000 80a9 	beq.w	8004428 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80042d6:	e0aa      	b.n	800442e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80a6 	beq.w	800442c <HCD_RXQLVL_IRQHandler+0x19a>
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	212c      	movs	r1, #44	; 0x2c
 80042e6:	fb01 f303 	mul.w	r3, r1, r3
 80042ea:	4413      	add	r3, r2
 80042ec:	3344      	adds	r3, #68	; 0x44
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 809b 	beq.w	800442c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	3350      	adds	r3, #80	; 0x50
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	441a      	add	r2, r3
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	202c      	movs	r0, #44	; 0x2c
 8004310:	fb00 f303 	mul.w	r3, r0, r3
 8004314:	440b      	add	r3, r1
 8004316:	334c      	adds	r3, #76	; 0x4c
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d87a      	bhi.n	8004414 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	3344      	adds	r3, #68	; 0x44
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	b292      	uxth	r2, r2
 8004336:	4619      	mov	r1, r3
 8004338:	f003 fdac 	bl	8007e94 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	212c      	movs	r1, #44	; 0x2c
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	4413      	add	r3, r2
 8004348:	3344      	adds	r3, #68	; 0x44
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	441a      	add	r2, r3
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	202c      	movs	r0, #44	; 0x2c
 8004356:	fb00 f303 	mul.w	r3, r0, r3
 800435a:	440b      	add	r3, r1
 800435c:	3344      	adds	r3, #68	; 0x44
 800435e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	212c      	movs	r1, #44	; 0x2c
 8004366:	fb01 f303 	mul.w	r3, r1, r3
 800436a:	4413      	add	r3, r2
 800436c:	3350      	adds	r3, #80	; 0x50
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	441a      	add	r2, r3
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	202c      	movs	r0, #44	; 0x2c
 800437a:	fb00 f303 	mul.w	r3, r0, r3
 800437e:	440b      	add	r3, r1
 8004380:	3350      	adds	r3, #80	; 0x50
 8004382:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	4413      	add	r3, r2
 800438c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	0cdb      	lsrs	r3, r3, #19
 8004394:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004398:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	212c      	movs	r1, #44	; 0x2c
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	3340      	adds	r3, #64	; 0x40
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d13c      	bne.n	800442c <HCD_RXQLVL_IRQHandler+0x19a>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d039      	beq.n	800442c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043ce:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043d6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e4:	461a      	mov	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	212c      	movs	r1, #44	; 0x2c
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	3354      	adds	r3, #84	; 0x54
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	f083 0301 	eor.w	r3, r3, #1
 80043fe:	b2d8      	uxtb	r0, r3
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	212c      	movs	r1, #44	; 0x2c
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	3354      	adds	r3, #84	; 0x54
 800440e:	4602      	mov	r2, r0
 8004410:	701a      	strb	r2, [r3, #0]
      break;
 8004412:	e00b      	b.n	800442c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	212c      	movs	r1, #44	; 0x2c
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4413      	add	r3, r2
 8004420:	3360      	adds	r3, #96	; 0x60
 8004422:	2204      	movs	r2, #4
 8004424:	701a      	strb	r2, [r3, #0]
      break;
 8004426:	e001      	b.n	800442c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004428:	bf00      	nop
 800442a:	e000      	b.n	800442e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800442c:	bf00      	nop
  }
}
 800442e:	bf00      	nop
 8004430:	3728      	adds	r7, #40	; 0x28
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004462:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d10b      	bne.n	8004486 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d102      	bne.n	800447e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f006 fe91 	bl	800b1a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f043 0302 	orr.w	r3, r3, #2
 8004484:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b08      	cmp	r3, #8
 800448e:	d132      	bne.n	80044f6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f043 0308 	orr.w	r3, r3, #8
 8004496:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d126      	bne.n	80044f0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d113      	bne.n	80044d2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80044b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044b4:	d106      	bne.n	80044c4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2102      	movs	r1, #2
 80044bc:	4618      	mov	r0, r3
 80044be:	f003 fe57 	bl	8008170 <USB_InitFSLSPClkSel>
 80044c2:	e011      	b.n	80044e8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2101      	movs	r1, #1
 80044ca:	4618      	mov	r0, r3
 80044cc:	f003 fe50 	bl	8008170 <USB_InitFSLSPClkSel>
 80044d0:	e00a      	b.n	80044e8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d106      	bne.n	80044e8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044e0:	461a      	mov	r2, r3
 80044e2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80044e6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f006 fe83 	bl	800b1f4 <HAL_HCD_PortEnabled_Callback>
 80044ee:	e002      	b.n	80044f6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f006 fe8d 	bl	800b210 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d103      	bne.n	8004508 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f043 0320 	orr.w	r3, r3, #32
 8004506:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800450e:	461a      	mov	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	6013      	str	r3, [r2, #0]
}
 8004514:	bf00      	nop
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e12b      	b.n	8004786 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fc fed8 	bl	80012f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2224      	movs	r2, #36	; 0x24
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800456e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800457e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004580:	f002 f8de 	bl	8006740 <HAL_RCC_GetPCLK1Freq>
 8004584:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4a81      	ldr	r2, [pc, #516]	; (8004790 <HAL_I2C_Init+0x274>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d807      	bhi.n	80045a0 <HAL_I2C_Init+0x84>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a80      	ldr	r2, [pc, #512]	; (8004794 <HAL_I2C_Init+0x278>)
 8004594:	4293      	cmp	r3, r2
 8004596:	bf94      	ite	ls
 8004598:	2301      	movls	r3, #1
 800459a:	2300      	movhi	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e006      	b.n	80045ae <HAL_I2C_Init+0x92>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a7d      	ldr	r2, [pc, #500]	; (8004798 <HAL_I2C_Init+0x27c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	bf94      	ite	ls
 80045a8:	2301      	movls	r3, #1
 80045aa:	2300      	movhi	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e0e7      	b.n	8004786 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a78      	ldr	r2, [pc, #480]	; (800479c <HAL_I2C_Init+0x280>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	0c9b      	lsrs	r3, r3, #18
 80045c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	4a6a      	ldr	r2, [pc, #424]	; (8004790 <HAL_I2C_Init+0x274>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d802      	bhi.n	80045f0 <HAL_I2C_Init+0xd4>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	3301      	adds	r3, #1
 80045ee:	e009      	b.n	8004604 <HAL_I2C_Init+0xe8>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045f6:	fb02 f303 	mul.w	r3, r2, r3
 80045fa:	4a69      	ldr	r2, [pc, #420]	; (80047a0 <HAL_I2C_Init+0x284>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	099b      	lsrs	r3, r3, #6
 8004602:	3301      	adds	r3, #1
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	430b      	orrs	r3, r1
 800460a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004616:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	495c      	ldr	r1, [pc, #368]	; (8004790 <HAL_I2C_Init+0x274>)
 8004620:	428b      	cmp	r3, r1
 8004622:	d819      	bhi.n	8004658 <HAL_I2C_Init+0x13c>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1e59      	subs	r1, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004632:	1c59      	adds	r1, r3, #1
 8004634:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004638:	400b      	ands	r3, r1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_I2C_Init+0x138>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1e59      	subs	r1, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	fbb1 f3f3 	udiv	r3, r1, r3
 800464c:	3301      	adds	r3, #1
 800464e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004652:	e051      	b.n	80046f8 <HAL_I2C_Init+0x1dc>
 8004654:	2304      	movs	r3, #4
 8004656:	e04f      	b.n	80046f8 <HAL_I2C_Init+0x1dc>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d111      	bne.n	8004684 <HAL_I2C_Init+0x168>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1e58      	subs	r0, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	440b      	add	r3, r1
 800466e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004672:	3301      	adds	r3, #1
 8004674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	e012      	b.n	80046aa <HAL_I2C_Init+0x18e>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1e58      	subs	r0, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6859      	ldr	r1, [r3, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	0099      	lsls	r1, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	fbb0 f3f3 	udiv	r3, r0, r3
 800469a:	3301      	adds	r3, #1
 800469c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_I2C_Init+0x196>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e022      	b.n	80046f8 <HAL_I2C_Init+0x1dc>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10e      	bne.n	80046d8 <HAL_I2C_Init+0x1bc>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1e58      	subs	r0, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6859      	ldr	r1, [r3, #4]
 80046c2:	460b      	mov	r3, r1
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	440b      	add	r3, r1
 80046c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80046cc:	3301      	adds	r3, #1
 80046ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d6:	e00f      	b.n	80046f8 <HAL_I2C_Init+0x1dc>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1e58      	subs	r0, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	0099      	lsls	r1, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ee:	3301      	adds	r3, #1
 80046f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	6809      	ldr	r1, [r1, #0]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6911      	ldr	r1, [r2, #16]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68d2      	ldr	r2, [r2, #12]
 8004732:	4311      	orrs	r1, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	430b      	orrs	r3, r1
 800473a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	000186a0 	.word	0x000186a0
 8004794:	001e847f 	.word	0x001e847f
 8004798:	003d08ff 	.word	0x003d08ff
 800479c:	431bde83 	.word	0x431bde83
 80047a0:	10624dd3 	.word	0x10624dd3

080047a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e021      	b.n	80047fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2224      	movs	r2, #36	; 0x24
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0201 	bic.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fc fdda 	bl	8001388 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	4608      	mov	r0, r1
 800480e:	4611      	mov	r1, r2
 8004810:	461a      	mov	r2, r3
 8004812:	4603      	mov	r3, r0
 8004814:	817b      	strh	r3, [r7, #10]
 8004816:	460b      	mov	r3, r1
 8004818:	813b      	strh	r3, [r7, #8]
 800481a:	4613      	mov	r3, r2
 800481c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800481e:	f7fd fe7d 	bl	800251c <HAL_GetTick>
 8004822:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b20      	cmp	r3, #32
 800482e:	f040 80d9 	bne.w	80049e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	2319      	movs	r3, #25
 8004838:	2201      	movs	r2, #1
 800483a:	496d      	ldr	r1, [pc, #436]	; (80049f0 <HAL_I2C_Mem_Write+0x1ec>)
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fc8d 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004848:	2302      	movs	r3, #2
 800484a:	e0cc      	b.n	80049e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_I2C_Mem_Write+0x56>
 8004856:	2302      	movs	r3, #2
 8004858:	e0c5      	b.n	80049e6 <HAL_I2C_Mem_Write+0x1e2>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b01      	cmp	r3, #1
 800486e:	d007      	beq.n	8004880 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800488e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2221      	movs	r2, #33	; 0x21
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2240      	movs	r2, #64	; 0x40
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a3a      	ldr	r2, [r7, #32]
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a4d      	ldr	r2, [pc, #308]	; (80049f4 <HAL_I2C_Mem_Write+0x1f0>)
 80048c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048c2:	88f8      	ldrh	r0, [r7, #6]
 80048c4:	893a      	ldrh	r2, [r7, #8]
 80048c6:	8979      	ldrh	r1, [r7, #10]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	9301      	str	r3, [sp, #4]
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	4603      	mov	r3, r0
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 fac4 	bl	8004e60 <I2C_RequestMemoryWrite>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d052      	beq.n	8004984 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e081      	b.n	80049e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fd0e 	bl	8005308 <I2C_WaitOnTXEFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00d      	beq.n	800490e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d107      	bne.n	800490a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004908:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e06b      	b.n	80049e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b04      	cmp	r3, #4
 800494a:	d11b      	bne.n	8004984 <HAL_I2C_Mem_Write+0x180>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004950:	2b00      	cmp	r3, #0
 8004952:	d017      	beq.n	8004984 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	781a      	ldrb	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1aa      	bne.n	80048e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fcfa 	bl	800538a <I2C_WaitOnBTFFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00d      	beq.n	80049b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d107      	bne.n	80049b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e016      	b.n	80049e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	e000      	b.n	80049e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049e4:	2302      	movs	r3, #2
  }
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	00100002 	.word	0x00100002
 80049f4:	ffff0000 	.word	0xffff0000

080049f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08c      	sub	sp, #48	; 0x30
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	4608      	mov	r0, r1
 8004a02:	4611      	mov	r1, r2
 8004a04:	461a      	mov	r2, r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	817b      	strh	r3, [r7, #10]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	813b      	strh	r3, [r7, #8]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a12:	f7fd fd83 	bl	800251c <HAL_GetTick>
 8004a16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	f040 8208 	bne.w	8004e36 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	2319      	movs	r3, #25
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	497b      	ldr	r1, [pc, #492]	; (8004c1c <HAL_I2C_Mem_Read+0x224>)
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 fb93 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e1fb      	b.n	8004e38 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_I2C_Mem_Read+0x56>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e1f4      	b.n	8004e38 <HAL_I2C_Mem_Read+0x440>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d007      	beq.n	8004a74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2222      	movs	r2, #34	; 0x22
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2240      	movs	r2, #64	; 0x40
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a5b      	ldr	r2, [pc, #364]	; (8004c20 <HAL_I2C_Mem_Read+0x228>)
 8004ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ab6:	88f8      	ldrh	r0, [r7, #6]
 8004ab8:	893a      	ldrh	r2, [r7, #8]
 8004aba:	8979      	ldrh	r1, [r7, #10]
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fa60 	bl	8004f8c <I2C_RequestMemoryRead>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e1b0      	b.n	8004e38 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d113      	bne.n	8004b06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	623b      	str	r3, [r7, #32]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	623b      	str	r3, [r7, #32]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	623b      	str	r3, [r7, #32]
 8004af2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e184      	b.n	8004e10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d11b      	bne.n	8004b46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	e164      	b.n	8004e10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d11b      	bne.n	8004b86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	e144      	b.n	8004e10 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b9c:	e138      	b.n	8004e10 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	f200 80f1 	bhi.w	8004d8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d123      	bne.n	8004bf8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fc29 	bl	800540c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e139      	b.n	8004e38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bf6:	e10b      	b.n	8004e10 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d14e      	bne.n	8004c9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	2200      	movs	r2, #0
 8004c08:	4906      	ldr	r1, [pc, #24]	; (8004c24 <HAL_I2C_Mem_Read+0x22c>)
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 faa6 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e10e      	b.n	8004e38 <HAL_I2C_Mem_Read+0x440>
 8004c1a:	bf00      	nop
 8004c1c:	00100002 	.word	0x00100002
 8004c20:	ffff0000 	.word	0xffff0000
 8004c24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c9c:	e0b8      	b.n	8004e10 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	4966      	ldr	r1, [pc, #408]	; (8004e40 <HAL_I2C_Mem_Read+0x448>)
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fa57 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0bf      	b.n	8004e38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	2200      	movs	r2, #0
 8004d02:	494f      	ldr	r1, [pc, #316]	; (8004e40 <HAL_I2C_Mem_Read+0x448>)
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fa29 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e091      	b.n	8004e38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d88:	e042      	b.n	8004e10 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fb3c 	bl	800540c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e04c      	b.n	8004e38 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d118      	bne.n	8004e10 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f47f aec2 	bne.w	8004b9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	e000      	b.n	8004e38 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
  }
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3728      	adds	r7, #40	; 0x28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	00010004 	.word	0x00010004

08004e44 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e52:	b2db      	uxtb	r3, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	4608      	mov	r0, r1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4603      	mov	r3, r0
 8004e70:	817b      	strh	r3, [r7, #10]
 8004e72:	460b      	mov	r3, r1
 8004e74:	813b      	strh	r3, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f960 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00d      	beq.n	8004ebe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb0:	d103      	bne.n	8004eba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e05f      	b.n	8004f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ebe:	897b      	ldrh	r3, [r7, #10]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ecc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	6a3a      	ldr	r2, [r7, #32]
 8004ed2:	492d      	ldr	r1, [pc, #180]	; (8004f88 <I2C_RequestMemoryWrite+0x128>)
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f998 	bl	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e04c      	b.n	8004f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efc:	6a39      	ldr	r1, [r7, #32]
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 fa02 	bl	8005308 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00d      	beq.n	8004f26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d107      	bne.n	8004f22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e02b      	b.n	8004f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d105      	bne.n	8004f38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f2c:	893b      	ldrh	r3, [r7, #8]
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	611a      	str	r2, [r3, #16]
 8004f36:	e021      	b.n	8004f7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f38:	893b      	ldrh	r3, [r7, #8]
 8004f3a:	0a1b      	lsrs	r3, r3, #8
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f48:	6a39      	ldr	r1, [r7, #32]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f9dc 	bl	8005308 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00d      	beq.n	8004f72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d107      	bne.n	8004f6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e005      	b.n	8004f7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f72:	893b      	ldrh	r3, [r7, #8]
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	00010002 	.word	0x00010002

08004f8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	817b      	strh	r3, [r7, #10]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	813b      	strh	r3, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f8c2 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00d      	beq.n	8004ffa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fec:	d103      	bne.n	8004ff6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e0aa      	b.n	8005150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ffa:	897b      	ldrh	r3, [r7, #10]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005008:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	6a3a      	ldr	r2, [r7, #32]
 800500e:	4952      	ldr	r1, [pc, #328]	; (8005158 <I2C_RequestMemoryRead+0x1cc>)
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f8fa 	bl	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e097      	b.n	8005150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005038:	6a39      	ldr	r1, [r7, #32]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 f964 	bl	8005308 <I2C_WaitOnTXEFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00d      	beq.n	8005062 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	2b04      	cmp	r3, #4
 800504c:	d107      	bne.n	800505e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e076      	b.n	8005150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d105      	bne.n	8005074 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005068:	893b      	ldrh	r3, [r7, #8]
 800506a:	b2da      	uxtb	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	611a      	str	r2, [r3, #16]
 8005072:	e021      	b.n	80050b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005074:	893b      	ldrh	r3, [r7, #8]
 8005076:	0a1b      	lsrs	r3, r3, #8
 8005078:	b29b      	uxth	r3, r3
 800507a:	b2da      	uxtb	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005084:	6a39      	ldr	r1, [r7, #32]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f93e 	bl	8005308 <I2C_WaitOnTXEFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00d      	beq.n	80050ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	2b04      	cmp	r3, #4
 8005098:	d107      	bne.n	80050aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e050      	b.n	8005150 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050ae:	893b      	ldrh	r3, [r7, #8]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ba:	6a39      	ldr	r1, [r7, #32]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f923 	bl	8005308 <I2C_WaitOnTXEFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00d      	beq.n	80050e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d107      	bne.n	80050e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e035      	b.n	8005150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f82b 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00d      	beq.n	8005128 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511a:	d103      	bne.n	8005124 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005122:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e013      	b.n	8005150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005128:	897b      	ldrh	r3, [r7, #10]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f043 0301 	orr.w	r3, r3, #1
 8005130:	b2da      	uxtb	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	6a3a      	ldr	r2, [r7, #32]
 800513c:	4906      	ldr	r1, [pc, #24]	; (8005158 <I2C_RequestMemoryRead+0x1cc>)
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f863 	bl	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	00010002 	.word	0x00010002

0800515c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800516c:	e025      	b.n	80051ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005174:	d021      	beq.n	80051ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005176:	f7fd f9d1 	bl	800251c <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d302      	bcc.n	800518c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d116      	bne.n	80051ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f043 0220 	orr.w	r2, r3, #32
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e023      	b.n	8005202 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d10d      	bne.n	80051e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	43da      	mvns	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4013      	ands	r3, r2
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf0c      	ite	eq
 80051d6:	2301      	moveq	r3, #1
 80051d8:	2300      	movne	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	e00c      	b.n	80051fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	43da      	mvns	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4013      	ands	r3, r2
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d0b6      	beq.n	800516e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b084      	sub	sp, #16
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005218:	e051      	b.n	80052be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005228:	d123      	bne.n	8005272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005238:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005242:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f043 0204 	orr.w	r2, r3, #4
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e046      	b.n	8005300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005278:	d021      	beq.n	80052be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527a:	f7fd f94f 	bl	800251c <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	d302      	bcc.n	8005290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d116      	bne.n	80052be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f043 0220 	orr.w	r2, r3, #32
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e020      	b.n	8005300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d10c      	bne.n	80052e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	43da      	mvns	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4013      	ands	r3, r2
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bf14      	ite	ne
 80052da:	2301      	movne	r3, #1
 80052dc:	2300      	moveq	r3, #0
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	e00b      	b.n	80052fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	43da      	mvns	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4013      	ands	r3, r2
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d18d      	bne.n	800521a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005314:	e02d      	b.n	8005372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f8ce 	bl	80054b8 <I2C_IsAcknowledgeFailed>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e02d      	b.n	8005382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800532c:	d021      	beq.n	8005372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800532e:	f7fd f8f5 	bl	800251c <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	d302      	bcc.n	8005344 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d116      	bne.n	8005372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f043 0220 	orr.w	r2, r3, #32
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e007      	b.n	8005382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537c:	2b80      	cmp	r3, #128	; 0x80
 800537e:	d1ca      	bne.n	8005316 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005396:	e02d      	b.n	80053f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f88d 	bl	80054b8 <I2C_IsAcknowledgeFailed>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e02d      	b.n	8005404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ae:	d021      	beq.n	80053f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b0:	f7fd f8b4 	bl	800251c <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d302      	bcc.n	80053c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d116      	bne.n	80053f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	f043 0220 	orr.w	r2, r3, #32
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e007      	b.n	8005404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d1ca      	bne.n	8005398 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005418:	e042      	b.n	80054a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b10      	cmp	r3, #16
 8005426:	d119      	bne.n	800545c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0210 	mvn.w	r2, #16
 8005430:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e029      	b.n	80054b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545c:	f7fd f85e 	bl	800251c <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	d302      	bcc.n	8005472 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d116      	bne.n	80054a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	f043 0220 	orr.w	r2, r3, #32
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e007      	b.n	80054b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d1b5      	bne.n	800541a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ce:	d11b      	bne.n	8005508 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	f043 0204 	orr.w	r2, r3, #4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
	...

08005518 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e128      	b.n	800577c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a90      	ldr	r2, [pc, #576]	; (8005784 <HAL_I2S_Init+0x26c>)
 8005542:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7fb ff9f 	bl	8001488 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005560:	f023 030f 	bic.w	r3, r3, #15
 8005564:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2202      	movs	r2, #2
 800556c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d060      	beq.n	8005638 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800557e:	2310      	movs	r3, #16
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	e001      	b.n	8005588 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005584:	2320      	movs	r3, #32
 8005586:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b20      	cmp	r3, #32
 800558e:	d802      	bhi.n	8005596 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005596:	2001      	movs	r0, #1
 8005598:	f001 f9d6 	bl	8006948 <HAL_RCCEx_GetPeriphCLKFreq>
 800559c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a6:	d125      	bne.n	80055f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d010      	beq.n	80055d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	461a      	mov	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	3305      	adds	r3, #5
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	e01f      	b.n	8005612 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	461a      	mov	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ee:	3305      	adds	r3, #5
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	e00e      	b.n	8005612 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	461a      	mov	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	fbb2 f3f3 	udiv	r3, r2, r3
 800560e:	3305      	adds	r3, #5
 8005610:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4a5c      	ldr	r2, [pc, #368]	; (8005788 <HAL_I2S_Init+0x270>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	08db      	lsrs	r3, r3, #3
 800561c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	085b      	lsrs	r3, r3, #1
 800562e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	e003      	b.n	8005640 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005638:	2302      	movs	r3, #2
 800563a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d902      	bls.n	800564c <HAL_I2S_Init+0x134>
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	2bff      	cmp	r3, #255	; 0xff
 800564a:	d907      	bls.n	800565c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005650:	f043 0210 	orr.w	r2, r3, #16
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e08f      	b.n	800577c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	ea42 0103 	orr.w	r1, r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	430a      	orrs	r2, r1
 800566e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800567a:	f023 030f 	bic.w	r3, r3, #15
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6851      	ldr	r1, [r2, #4]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6892      	ldr	r2, [r2, #8]
 8005686:	4311      	orrs	r1, r2
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	68d2      	ldr	r2, [r2, #12]
 800568c:	4311      	orrs	r1, r2
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6992      	ldr	r2, [r2, #24]
 8005692:	430a      	orrs	r2, r1
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800569e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d161      	bne.n	800576c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a38      	ldr	r2, [pc, #224]	; (800578c <HAL_I2S_Init+0x274>)
 80056ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a37      	ldr	r2, [pc, #220]	; (8005790 <HAL_I2S_Init+0x278>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_I2S_Init+0x1a4>
 80056b8:	4b36      	ldr	r3, [pc, #216]	; (8005794 <HAL_I2S_Init+0x27c>)
 80056ba:	e001      	b.n	80056c0 <HAL_I2S_Init+0x1a8>
 80056bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6812      	ldr	r2, [r2, #0]
 80056c6:	4932      	ldr	r1, [pc, #200]	; (8005790 <HAL_I2S_Init+0x278>)
 80056c8:	428a      	cmp	r2, r1
 80056ca:	d101      	bne.n	80056d0 <HAL_I2S_Init+0x1b8>
 80056cc:	4a31      	ldr	r2, [pc, #196]	; (8005794 <HAL_I2S_Init+0x27c>)
 80056ce:	e001      	b.n	80056d4 <HAL_I2S_Init+0x1bc>
 80056d0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80056d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80056d8:	f023 030f 	bic.w	r3, r3, #15
 80056dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a2b      	ldr	r2, [pc, #172]	; (8005790 <HAL_I2S_Init+0x278>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d101      	bne.n	80056ec <HAL_I2S_Init+0x1d4>
 80056e8:	4b2a      	ldr	r3, [pc, #168]	; (8005794 <HAL_I2S_Init+0x27c>)
 80056ea:	e001      	b.n	80056f0 <HAL_I2S_Init+0x1d8>
 80056ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056f0:	2202      	movs	r2, #2
 80056f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a25      	ldr	r2, [pc, #148]	; (8005790 <HAL_I2S_Init+0x278>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d101      	bne.n	8005702 <HAL_I2S_Init+0x1ea>
 80056fe:	4b25      	ldr	r3, [pc, #148]	; (8005794 <HAL_I2S_Init+0x27c>)
 8005700:	e001      	b.n	8005706 <HAL_I2S_Init+0x1ee>
 8005702:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005712:	d003      	beq.n	800571c <HAL_I2S_Init+0x204>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d103      	bne.n	8005724 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800571c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	e001      	b.n	8005728 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005724:	2300      	movs	r3, #0
 8005726:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005732:	4313      	orrs	r3, r2
 8005734:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800573c:	4313      	orrs	r3, r2
 800573e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005746:	4313      	orrs	r3, r2
 8005748:	b29a      	uxth	r2, r3
 800574a:	897b      	ldrh	r3, [r7, #10]
 800574c:	4313      	orrs	r3, r2
 800574e:	b29b      	uxth	r3, r3
 8005750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005754:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a0d      	ldr	r2, [pc, #52]	; (8005790 <HAL_I2S_Init+0x278>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d101      	bne.n	8005764 <HAL_I2S_Init+0x24c>
 8005760:	4b0c      	ldr	r3, [pc, #48]	; (8005794 <HAL_I2S_Init+0x27c>)
 8005762:	e001      	b.n	8005768 <HAL_I2S_Init+0x250>
 8005764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005768:	897a      	ldrh	r2, [r7, #10]
 800576a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3720      	adds	r7, #32
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	0800588f 	.word	0x0800588f
 8005788:	cccccccd 	.word	0xcccccccd
 800578c:	080059a5 	.word	0x080059a5
 8005790:	40003800 	.word	0x40003800
 8005794:	40003400 	.word	0x40003400

08005798 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	881a      	ldrh	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	1c9a      	adds	r2, r3, #2
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10e      	bne.n	8005828 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005818:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff ffb8 	bl	8005798 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005828:	bf00      	nop
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	b292      	uxth	r2, r2
 8005844:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	1c9a      	adds	r2, r3, #2
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10e      	bne.n	8005886 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005876:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff ff93 	bl	80057ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b086      	sub	sp, #24
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d13a      	bne.n	8005920 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d109      	bne.n	80058c8 <I2S_IRQHandler+0x3a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	d102      	bne.n	80058c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff ffb4 	bl	8005830 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d126      	bne.n	8005920 <I2S_IRQHandler+0x92>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d11f      	bne.n	8005920 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80058f0:	2300      	movs	r3, #0
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	f043 0202 	orr.w	r2, r3, #2
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff ff50 	bl	80057c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b03      	cmp	r3, #3
 800592a:	d136      	bne.n	800599a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b02      	cmp	r3, #2
 8005934:	d109      	bne.n	800594a <I2S_IRQHandler+0xbc>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005940:	2b80      	cmp	r3, #128	; 0x80
 8005942:	d102      	bne.n	800594a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff ff45 	bl	80057d4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f003 0308 	and.w	r3, r3, #8
 8005950:	2b08      	cmp	r3, #8
 8005952:	d122      	bne.n	800599a <I2S_IRQHandler+0x10c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b20      	cmp	r3, #32
 8005960:	d11b      	bne.n	800599a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005970:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598c:	f043 0204 	orr.w	r2, r3, #4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ff13 	bl	80057c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800599a:	bf00      	nop
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a92      	ldr	r2, [pc, #584]	; (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d101      	bne.n	80059c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80059be:	4b92      	ldr	r3, [pc, #584]	; (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059c0:	e001      	b.n	80059c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80059c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a8b      	ldr	r2, [pc, #556]	; (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d101      	bne.n	80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80059dc:	4b8a      	ldr	r3, [pc, #552]	; (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059de:	e001      	b.n	80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80059e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f0:	d004      	beq.n	80059fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f040 8099 	bne.w	8005b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d107      	bne.n	8005a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f925 	bl	8005c60 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d107      	bne.n	8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f9c8 	bl	8005dc0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a36:	2b40      	cmp	r3, #64	; 0x40
 8005a38:	d13a      	bne.n	8005ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d035      	beq.n	8005ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a6e      	ldr	r2, [pc, #440]	; (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d101      	bne.n	8005a52 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005a4e:	4b6e      	ldr	r3, [pc, #440]	; (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a50:	e001      	b.n	8005a56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4969      	ldr	r1, [pc, #420]	; (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a5e:	428b      	cmp	r3, r1
 8005a60:	d101      	bne.n	8005a66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005a62:	4b69      	ldr	r3, [pc, #420]	; (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a64:	e001      	b.n	8005a6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a6e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a80:	2300      	movs	r3, #0
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	f043 0202 	orr.w	r2, r3, #2
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fe88 	bl	80057c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	f040 80c3 	bne.w	8005c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 80bd 	beq.w	8005c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ad6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a49      	ldr	r2, [pc, #292]	; (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d101      	bne.n	8005ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005ae2:	4b49      	ldr	r3, [pc, #292]	; (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ae4:	e001      	b.n	8005aea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005ae6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4944      	ldr	r1, [pc, #272]	; (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005af2:	428b      	cmp	r3, r1
 8005af4:	d101      	bne.n	8005afa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005af6:	4b44      	ldr	r3, [pc, #272]	; (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005af8:	e001      	b.n	8005afe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005afa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005afe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b02:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b04:	2300      	movs	r3, #0
 8005b06:	60bb      	str	r3, [r7, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	60bb      	str	r3, [r7, #8]
 8005b10:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	f043 0204 	orr.w	r2, r3, #4
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff fe4a 	bl	80057c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b2c:	e089      	b.n	8005c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d107      	bne.n	8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f8be 	bl	8005cc4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d107      	bne.n	8005b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f8fd 	bl	8005d5c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d12f      	bne.n	8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d02a      	beq.n	8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b84:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1e      	ldr	r2, [pc, #120]	; (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d101      	bne.n	8005b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005b90:	4b1d      	ldr	r3, [pc, #116]	; (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b92:	e001      	b.n	8005b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005b94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4919      	ldr	r1, [pc, #100]	; (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ba0:	428b      	cmp	r3, r1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005ba4:	4b18      	ldr	r3, [pc, #96]	; (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ba6:	e001      	b.n	8005bac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005ba8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bb0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	f043 0202 	orr.w	r2, r3, #2
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fdfa 	bl	80057c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d136      	bne.n	8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d031      	beq.n	8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a07      	ldr	r2, [pc, #28]	; (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d101      	bne.n	8005bee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bec:	e001      	b.n	8005bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4902      	ldr	r1, [pc, #8]	; (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bfa:	428b      	cmp	r3, r1
 8005bfc:	d106      	bne.n	8005c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005bfe:	4b02      	ldr	r3, [pc, #8]	; (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c00:	e006      	b.n	8005c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005c02:	bf00      	nop
 8005c04:	40003800 	.word	0x40003800
 8005c08:	40003400 	.word	0x40003400
 8005c0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c14:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	f043 0204 	orr.w	r2, r3, #4
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fdc0 	bl	80057c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c40:	e000      	b.n	8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c42:	bf00      	nop
}
 8005c44:	bf00      	nop
 8005c46:	3720      	adds	r7, #32
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	1c99      	adds	r1, r3, #2
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6251      	str	r1, [r2, #36]	; 0x24
 8005c72:	881a      	ldrh	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d113      	bne.n	8005cba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ca0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff ffc9 	bl	8005c4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cba:	bf00      	nop
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	1c99      	adds	r1, r3, #2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6251      	str	r1, [r2, #36]	; 0x24
 8005cd6:	8819      	ldrh	r1, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <I2SEx_TxISR_I2SExt+0x90>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d101      	bne.n	8005ce6 <I2SEx_TxISR_I2SExt+0x22>
 8005ce2:	4b1d      	ldr	r3, [pc, #116]	; (8005d58 <I2SEx_TxISR_I2SExt+0x94>)
 8005ce4:	e001      	b.n	8005cea <I2SEx_TxISR_I2SExt+0x26>
 8005ce6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cea:	460a      	mov	r2, r1
 8005cec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d121      	bne.n	8005d4a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a12      	ldr	r2, [pc, #72]	; (8005d54 <I2SEx_TxISR_I2SExt+0x90>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d101      	bne.n	8005d14 <I2SEx_TxISR_I2SExt+0x50>
 8005d10:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <I2SEx_TxISR_I2SExt+0x94>)
 8005d12:	e001      	b.n	8005d18 <I2SEx_TxISR_I2SExt+0x54>
 8005d14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	490d      	ldr	r1, [pc, #52]	; (8005d54 <I2SEx_TxISR_I2SExt+0x90>)
 8005d20:	428b      	cmp	r3, r1
 8005d22:	d101      	bne.n	8005d28 <I2SEx_TxISR_I2SExt+0x64>
 8005d24:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <I2SEx_TxISR_I2SExt+0x94>)
 8005d26:	e001      	b.n	8005d2c <I2SEx_TxISR_I2SExt+0x68>
 8005d28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff ff81 	bl	8005c4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40003800 	.word	0x40003800
 8005d58:	40003400 	.word	0x40003400

08005d5c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68d8      	ldr	r0, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6e:	1c99      	adds	r1, r3, #2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005d74:	b282      	uxth	r2, r0
 8005d76:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d113      	bne.n	8005db8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d9e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff ff4a 	bl	8005c4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005db8:	bf00      	nop
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a20      	ldr	r2, [pc, #128]	; (8005e50 <I2SEx_RxISR_I2SExt+0x90>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d101      	bne.n	8005dd6 <I2SEx_RxISR_I2SExt+0x16>
 8005dd2:	4b20      	ldr	r3, [pc, #128]	; (8005e54 <I2SEx_RxISR_I2SExt+0x94>)
 8005dd4:	e001      	b.n	8005dda <I2SEx_RxISR_I2SExt+0x1a>
 8005dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dda:	68d8      	ldr	r0, [r3, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	1c99      	adds	r1, r3, #2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005de6:	b282      	uxth	r2, r0
 8005de8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d121      	bne.n	8005e46 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a12      	ldr	r2, [pc, #72]	; (8005e50 <I2SEx_RxISR_I2SExt+0x90>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d101      	bne.n	8005e10 <I2SEx_RxISR_I2SExt+0x50>
 8005e0c:	4b11      	ldr	r3, [pc, #68]	; (8005e54 <I2SEx_RxISR_I2SExt+0x94>)
 8005e0e:	e001      	b.n	8005e14 <I2SEx_RxISR_I2SExt+0x54>
 8005e10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	490d      	ldr	r1, [pc, #52]	; (8005e50 <I2SEx_RxISR_I2SExt+0x90>)
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	d101      	bne.n	8005e24 <I2SEx_RxISR_I2SExt+0x64>
 8005e20:	4b0c      	ldr	r3, [pc, #48]	; (8005e54 <I2SEx_RxISR_I2SExt+0x94>)
 8005e22:	e001      	b.n	8005e28 <I2SEx_RxISR_I2SExt+0x68>
 8005e24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e2c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d106      	bne.n	8005e46 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff ff03 	bl	8005c4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e46:	bf00      	nop
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40003800 	.word	0x40003800
 8005e54:	40003400 	.word	0x40003400

08005e58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e26b      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d079      	beq.n	8005f6a <HAL_RCC_OscConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e76:	4b8a      	ldr	r3, [pc, #552]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 030c 	and.w	r3, r3, #12
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d00c      	beq.n	8005e9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e82:	4b87      	ldr	r3, [pc, #540]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d112      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e8e:	4b84      	ldr	r3, [pc, #528]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e9a:	d10b      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e9c:	4b80      	ldr	r3, [pc, #512]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d05f      	beq.n	8005f68 <HAL_RCC_OscConfig+0x110>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d15b      	bne.n	8005f68 <HAL_RCC_OscConfig+0x110>
      {
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e246      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ebc:	d106      	bne.n	8005ecc <HAL_RCC_OscConfig+0x74>
 8005ebe:	4b78      	ldr	r3, [pc, #480]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a77      	ldr	r2, [pc, #476]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	e01d      	b.n	8005f08 <HAL_RCC_OscConfig+0xb0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x98>
 8005ed6:	4b72      	ldr	r3, [pc, #456]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a71      	ldr	r2, [pc, #452]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	4b6f      	ldr	r3, [pc, #444]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a6e      	ldr	r2, [pc, #440]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	e00b      	b.n	8005f08 <HAL_RCC_OscConfig+0xb0>
 8005ef0:	4b6b      	ldr	r3, [pc, #428]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a6a      	ldr	r2, [pc, #424]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	4b68      	ldr	r3, [pc, #416]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a67      	ldr	r2, [pc, #412]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d015      	beq.n	8005f3c <HAL_RCC_OscConfig+0xe4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f10:	f7fc fb04 	bl	800251c <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f16:	e00a      	b.n	8005f2e <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f18:	f7fc fb00 	bl	800251c <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0xd6>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e209      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2e:	4b5c      	ldr	r3, [pc, #368]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0ee      	beq.n	8005f18 <HAL_RCC_OscConfig+0xc0>
 8005f3a:	e016      	b.n	8005f6a <HAL_RCC_OscConfig+0x112>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3c:	f7fc faee 	bl	800251c <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f42:	e00a      	b.n	8005f5a <HAL_RCC_OscConfig+0x102>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f44:	f7fc faea 	bl	800251c <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x102>
          {
            return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e1f3      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f5a:	4b51      	ldr	r3, [pc, #324]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1ee      	bne.n	8005f44 <HAL_RCC_OscConfig+0xec>
 8005f66:	e000      	b.n	8005f6a <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d063      	beq.n	800603e <HAL_RCC_OscConfig+0x1e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f76:	4b4a      	ldr	r3, [pc, #296]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 030c 	and.w	r3, r3, #12
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <HAL_RCC_OscConfig+0x142>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f82:	4b47      	ldr	r3, [pc, #284]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f8a:	2b08      	cmp	r3, #8
 8005f8c:	d11c      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x170>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f8e:	4b44      	ldr	r3, [pc, #272]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d116      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x170>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f9a:	4b41      	ldr	r3, [pc, #260]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x15a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d001      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x15a>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e1c7      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb2:	4b3b      	ldr	r3, [pc, #236]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	4937      	ldr	r1, [pc, #220]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fc6:	e03a      	b.n	800603e <HAL_RCC_OscConfig+0x1e6>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d020      	beq.n	8006012 <HAL_RCC_OscConfig+0x1ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fd0:	4b34      	ldr	r3, [pc, #208]	; (80060a4 <HAL_RCC_OscConfig+0x24c>)
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd6:	f7fc faa1 	bl	800251c <HAL_GetTick>
 8005fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_OscConfig+0x198>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fde:	f7fc fa9d 	bl	800251c <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x198>
          {
            return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e1a8      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ff0:	4b2b      	ldr	r3, [pc, #172]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0f0      	beq.n	8005fde <HAL_RCC_OscConfig+0x186>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ffc:	4b28      	ldr	r3, [pc, #160]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	4925      	ldr	r1, [pc, #148]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 800600c:	4313      	orrs	r3, r2
 800600e:	600b      	str	r3, [r1, #0]
 8006010:	e015      	b.n	800603e <HAL_RCC_OscConfig+0x1e6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006012:	4b24      	ldr	r3, [pc, #144]	; (80060a4 <HAL_RCC_OscConfig+0x24c>)
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006018:	f7fc fa80 	bl	800251c <HAL_GetTick>
 800601c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800601e:	e008      	b.n	8006032 <HAL_RCC_OscConfig+0x1da>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006020:	f7fc fa7c 	bl	800251c <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e187      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006032:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f0      	bne.n	8006020 <HAL_RCC_OscConfig+0x1c8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b00      	cmp	r3, #0
 8006048:	d036      	beq.n	80060b8 <HAL_RCC_OscConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d016      	beq.n	8006080 <HAL_RCC_OscConfig+0x228>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006052:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <HAL_RCC_OscConfig+0x250>)
 8006054:	2201      	movs	r2, #1
 8006056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006058:	f7fc fa60 	bl	800251c <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x21a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006060:	f7fc fa5c 	bl	800251c <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e167      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006072:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <HAL_RCC_OscConfig+0x248>)
 8006074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <HAL_RCC_OscConfig+0x208>
 800607e:	e01b      	b.n	80060b8 <HAL_RCC_OscConfig+0x260>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006080:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <HAL_RCC_OscConfig+0x250>)
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006086:	f7fc fa49 	bl	800251c <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800608c:	e00e      	b.n	80060ac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800608e:	f7fc fa45 	bl	800251c <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d907      	bls.n	80060ac <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e150      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
 80060a0:	40023800 	.word	0x40023800
 80060a4:	42470000 	.word	0x42470000
 80060a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060ac:	4b88      	ldr	r3, [pc, #544]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 80060ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1ea      	bne.n	800608e <HAL_RCC_OscConfig+0x236>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8097 	beq.w	80061f4 <HAL_RCC_OscConfig+0x39c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060c6:	2300      	movs	r3, #0
 80060c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ca:	4b81      	ldr	r3, [pc, #516]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10f      	bne.n	80060f6 <HAL_RCC_OscConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]
 80060da:	4b7d      	ldr	r3, [pc, #500]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	4a7c      	ldr	r2, [pc, #496]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 80060e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e4:	6413      	str	r3, [r2, #64]	; 0x40
 80060e6:	4b7a      	ldr	r3, [pc, #488]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ee:	60bb      	str	r3, [r7, #8]
 80060f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060f2:	2301      	movs	r3, #1
 80060f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f6:	4b77      	ldr	r3, [pc, #476]	; (80062d4 <HAL_RCC_OscConfig+0x47c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d118      	bne.n	8006134 <HAL_RCC_OscConfig+0x2dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006102:	4b74      	ldr	r3, [pc, #464]	; (80062d4 <HAL_RCC_OscConfig+0x47c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a73      	ldr	r2, [pc, #460]	; (80062d4 <HAL_RCC_OscConfig+0x47c>)
 8006108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800610c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800610e:	f7fc fa05 	bl	800251c <HAL_GetTick>
 8006112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x2d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006116:	f7fc fa01 	bl	800251c <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x2d0>
        {
          return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e10c      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006128:	4b6a      	ldr	r3, [pc, #424]	; (80062d4 <HAL_RCC_OscConfig+0x47c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0f0      	beq.n	8006116 <HAL_RCC_OscConfig+0x2be>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d106      	bne.n	800614a <HAL_RCC_OscConfig+0x2f2>
 800613c:	4b64      	ldr	r3, [pc, #400]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006140:	4a63      	ldr	r2, [pc, #396]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 8006142:	f043 0301 	orr.w	r3, r3, #1
 8006146:	6713      	str	r3, [r2, #112]	; 0x70
 8006148:	e01c      	b.n	8006184 <HAL_RCC_OscConfig+0x32c>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	2b05      	cmp	r3, #5
 8006150:	d10c      	bne.n	800616c <HAL_RCC_OscConfig+0x314>
 8006152:	4b5f      	ldr	r3, [pc, #380]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 8006154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006156:	4a5e      	ldr	r2, [pc, #376]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 8006158:	f043 0304 	orr.w	r3, r3, #4
 800615c:	6713      	str	r3, [r2, #112]	; 0x70
 800615e:	4b5c      	ldr	r3, [pc, #368]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 8006160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006162:	4a5b      	ldr	r2, [pc, #364]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 8006164:	f043 0301 	orr.w	r3, r3, #1
 8006168:	6713      	str	r3, [r2, #112]	; 0x70
 800616a:	e00b      	b.n	8006184 <HAL_RCC_OscConfig+0x32c>
 800616c:	4b58      	ldr	r3, [pc, #352]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 800616e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006170:	4a57      	ldr	r2, [pc, #348]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 8006172:	f023 0301 	bic.w	r3, r3, #1
 8006176:	6713      	str	r3, [r2, #112]	; 0x70
 8006178:	4b55      	ldr	r3, [pc, #340]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 800617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617c:	4a54      	ldr	r2, [pc, #336]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 800617e:	f023 0304 	bic.w	r3, r3, #4
 8006182:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d015      	beq.n	80061b8 <HAL_RCC_OscConfig+0x360>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618c:	f7fc f9c6 	bl	800251c <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006192:	e00a      	b.n	80061aa <HAL_RCC_OscConfig+0x352>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006194:	f7fc f9c2 	bl	800251c <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x352>
        {
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e0cb      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061aa:	4b49      	ldr	r3, [pc, #292]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 80061ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0ee      	beq.n	8006194 <HAL_RCC_OscConfig+0x33c>
 80061b6:	e014      	b.n	80061e2 <HAL_RCC_OscConfig+0x38a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b8:	f7fc f9b0 	bl	800251c <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061be:	e00a      	b.n	80061d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061c0:	f7fc f9ac 	bl	800251c <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e0b5      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d6:	4b3e      	ldr	r3, [pc, #248]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 80061d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1ee      	bne.n	80061c0 <HAL_RCC_OscConfig+0x368>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d105      	bne.n	80061f4 <HAL_RCC_OscConfig+0x39c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061e8:	4b39      	ldr	r3, [pc, #228]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 80061ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ec:	4a38      	ldr	r2, [pc, #224]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 80061ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 80a1 	beq.w	8006340 <HAL_RCC_OscConfig+0x4e8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061fe:	4b34      	ldr	r3, [pc, #208]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 030c 	and.w	r3, r3, #12
 8006206:	2b08      	cmp	r3, #8
 8006208:	d05c      	beq.n	80062c4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d141      	bne.n	8006296 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006212:	4b31      	ldr	r3, [pc, #196]	; (80062d8 <HAL_RCC_OscConfig+0x480>)
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006218:	f7fc f980 	bl	800251c <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x3da>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006220:	f7fc f97c 	bl	800251c <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x3da>
          {
            return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e087      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006232:	4b27      	ldr	r3, [pc, #156]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1f0      	bne.n	8006220 <HAL_RCC_OscConfig+0x3c8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69da      	ldr	r2, [r3, #28]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	019b      	lsls	r3, r3, #6
 800624e:	431a      	orrs	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	085b      	lsrs	r3, r3, #1
 8006256:	3b01      	subs	r3, #1
 8006258:	041b      	lsls	r3, r3, #16
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	061b      	lsls	r3, r3, #24
 8006262:	491b      	ldr	r1, [pc, #108]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 8006264:	4313      	orrs	r3, r2
 8006266:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006268:	4b1b      	ldr	r3, [pc, #108]	; (80062d8 <HAL_RCC_OscConfig+0x480>)
 800626a:	2201      	movs	r2, #1
 800626c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626e:	f7fc f955 	bl	800251c <HAL_GetTick>
 8006272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006274:	e008      	b.n	8006288 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006276:	f7fc f951 	bl	800251c <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e05c      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006288:	4b11      	ldr	r3, [pc, #68]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0f0      	beq.n	8006276 <HAL_RCC_OscConfig+0x41e>
 8006294:	e054      	b.n	8006340 <HAL_RCC_OscConfig+0x4e8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006296:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <HAL_RCC_OscConfig+0x480>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800629c:	f7fc f93e 	bl	800251c <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062a4:	f7fc f93a 	bl	800251c <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e045      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b6:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <HAL_RCC_OscConfig+0x478>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f0      	bne.n	80062a4 <HAL_RCC_OscConfig+0x44c>
 80062c2:	e03d      	b.n	8006340 <HAL_RCC_OscConfig+0x4e8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d107      	bne.n	80062dc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e038      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
 80062d0:	40023800 	.word	0x40023800
 80062d4:	40007000 	.word	0x40007000
 80062d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062dc:	4b1b      	ldr	r3, [pc, #108]	; (800634c <HAL_RCC_OscConfig+0x4f4>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d028      	beq.n	800633c <HAL_RCC_OscConfig+0x4e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d121      	bne.n	800633c <HAL_RCC_OscConfig+0x4e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006302:	429a      	cmp	r2, r3
 8006304:	d11a      	bne.n	800633c <HAL_RCC_OscConfig+0x4e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800630c:	4013      	ands	r3, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006314:	4293      	cmp	r3, r2
 8006316:	d111      	bne.n	800633c <HAL_RCC_OscConfig+0x4e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	3b01      	subs	r3, #1
 8006326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006328:	429a      	cmp	r2, r3
 800632a:	d107      	bne.n	800633c <HAL_RCC_OscConfig+0x4e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006338:	429a      	cmp	r2, r3
 800633a:	d001      	beq.n	8006340 <HAL_RCC_OscConfig+0x4e8>
#endif
        {
          return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }
  }
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	40023800 	.word	0x40023800

08006350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e0cc      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006364:	4b68      	ldr	r3, [pc, #416]	; (8006508 <HAL_RCC_ClockConfig+0x1b8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	429a      	cmp	r2, r3
 8006370:	d90c      	bls.n	800638c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006372:	4b65      	ldr	r3, [pc, #404]	; (8006508 <HAL_RCC_ClockConfig+0x1b8>)
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800637a:	4b63      	ldr	r3, [pc, #396]	; (8006508 <HAL_RCC_ClockConfig+0x1b8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d001      	beq.n	800638c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e0b8      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d020      	beq.n	80063da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063a4:	4b59      	ldr	r3, [pc, #356]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	4a58      	ldr	r2, [pc, #352]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 80063aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063bc:	4b53      	ldr	r3, [pc, #332]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	4a52      	ldr	r2, [pc, #328]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 80063c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063c8:	4b50      	ldr	r3, [pc, #320]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	494d      	ldr	r1, [pc, #308]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d044      	beq.n	8006470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d107      	bne.n	80063fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ee:	4b47      	ldr	r3, [pc, #284]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d119      	bne.n	800642e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e07f      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d003      	beq.n	800640e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800640a:	2b03      	cmp	r3, #3
 800640c:	d107      	bne.n	800641e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800640e:	4b3f      	ldr	r3, [pc, #252]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d109      	bne.n	800642e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e06f      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800641e:	4b3b      	ldr	r3, [pc, #236]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e067      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800642e:	4b37      	ldr	r3, [pc, #220]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f023 0203 	bic.w	r2, r3, #3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	4934      	ldr	r1, [pc, #208]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 800643c:	4313      	orrs	r3, r2
 800643e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006440:	f7fc f86c 	bl	800251c <HAL_GetTick>
 8006444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006446:	e00a      	b.n	800645e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006448:	f7fc f868 	bl	800251c <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	f241 3288 	movw	r2, #5000	; 0x1388
 8006456:	4293      	cmp	r3, r2
 8006458:	d901      	bls.n	800645e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e04f      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800645e:	4b2b      	ldr	r3, [pc, #172]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 020c 	and.w	r2, r3, #12
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	429a      	cmp	r2, r3
 800646e:	d1eb      	bne.n	8006448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006470:	4b25      	ldr	r3, [pc, #148]	; (8006508 <HAL_RCC_ClockConfig+0x1b8>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d20c      	bcs.n	8006498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800647e:	4b22      	ldr	r3, [pc, #136]	; (8006508 <HAL_RCC_ClockConfig+0x1b8>)
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006486:	4b20      	ldr	r3, [pc, #128]	; (8006508 <HAL_RCC_ClockConfig+0x1b8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d001      	beq.n	8006498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e032      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064a4:	4b19      	ldr	r3, [pc, #100]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	4916      	ldr	r1, [pc, #88]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d009      	beq.n	80064d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064c2:	4b12      	ldr	r3, [pc, #72]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	490e      	ldr	r1, [pc, #56]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064d6:	f000 f821 	bl	800651c <HAL_RCC_GetSysClockFreq>
 80064da:	4602      	mov	r2, r0
 80064dc:	4b0b      	ldr	r3, [pc, #44]	; (800650c <HAL_RCC_ClockConfig+0x1bc>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	091b      	lsrs	r3, r3, #4
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	490a      	ldr	r1, [pc, #40]	; (8006510 <HAL_RCC_ClockConfig+0x1c0>)
 80064e8:	5ccb      	ldrb	r3, [r1, r3]
 80064ea:	fa22 f303 	lsr.w	r3, r2, r3
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <HAL_RCC_ClockConfig+0x1c4>)
 80064f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064f2:	4b09      	ldr	r3, [pc, #36]	; (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fb ffcc 	bl	8002494 <HAL_InitTick>

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	40023c00 	.word	0x40023c00
 800650c:	40023800 	.word	0x40023800
 8006510:	0800b90c 	.word	0x0800b90c
 8006514:	200001cc 	.word	0x200001cc
 8006518:	200001d0 	.word	0x200001d0

0800651c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800651c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006520:	b094      	sub	sp, #80	; 0x50
 8006522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	647b      	str	r3, [r7, #68]	; 0x44
 8006528:	2300      	movs	r3, #0
 800652a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800652c:	2300      	movs	r3, #0
 800652e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006534:	4b79      	ldr	r3, [pc, #484]	; (800671c <HAL_RCC_GetSysClockFreq+0x200>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f003 030c 	and.w	r3, r3, #12
 800653c:	2b08      	cmp	r3, #8
 800653e:	d00d      	beq.n	800655c <HAL_RCC_GetSysClockFreq+0x40>
 8006540:	2b08      	cmp	r3, #8
 8006542:	f200 80e1 	bhi.w	8006708 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_RCC_GetSysClockFreq+0x34>
 800654a:	2b04      	cmp	r3, #4
 800654c:	d003      	beq.n	8006556 <HAL_RCC_GetSysClockFreq+0x3a>
 800654e:	e0db      	b.n	8006708 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006550:	4b73      	ldr	r3, [pc, #460]	; (8006720 <HAL_RCC_GetSysClockFreq+0x204>)
 8006552:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006554:	e0db      	b.n	800670e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006556:	4b73      	ldr	r3, [pc, #460]	; (8006724 <HAL_RCC_GetSysClockFreq+0x208>)
 8006558:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800655a:	e0d8      	b.n	800670e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800655c:	4b6f      	ldr	r3, [pc, #444]	; (800671c <HAL_RCC_GetSysClockFreq+0x200>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006564:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006566:	4b6d      	ldr	r3, [pc, #436]	; (800671c <HAL_RCC_GetSysClockFreq+0x200>)
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d063      	beq.n	800663a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006572:	4b6a      	ldr	r3, [pc, #424]	; (800671c <HAL_RCC_GetSysClockFreq+0x200>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	099b      	lsrs	r3, r3, #6
 8006578:	2200      	movs	r2, #0
 800657a:	63bb      	str	r3, [r7, #56]	; 0x38
 800657c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006584:	633b      	str	r3, [r7, #48]	; 0x30
 8006586:	2300      	movs	r3, #0
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
 800658a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800658e:	4622      	mov	r2, r4
 8006590:	462b      	mov	r3, r5
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f04f 0100 	mov.w	r1, #0
 800659a:	0159      	lsls	r1, r3, #5
 800659c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065a0:	0150      	lsls	r0, r2, #5
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4621      	mov	r1, r4
 80065a8:	1a51      	subs	r1, r2, r1
 80065aa:	6139      	str	r1, [r7, #16]
 80065ac:	4629      	mov	r1, r5
 80065ae:	eb63 0301 	sbc.w	r3, r3, r1
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065c0:	4659      	mov	r1, fp
 80065c2:	018b      	lsls	r3, r1, #6
 80065c4:	4651      	mov	r1, sl
 80065c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065ca:	4651      	mov	r1, sl
 80065cc:	018a      	lsls	r2, r1, #6
 80065ce:	4651      	mov	r1, sl
 80065d0:	ebb2 0801 	subs.w	r8, r2, r1
 80065d4:	4659      	mov	r1, fp
 80065d6:	eb63 0901 	sbc.w	r9, r3, r1
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065ee:	4690      	mov	r8, r2
 80065f0:	4699      	mov	r9, r3
 80065f2:	4623      	mov	r3, r4
 80065f4:	eb18 0303 	adds.w	r3, r8, r3
 80065f8:	60bb      	str	r3, [r7, #8]
 80065fa:	462b      	mov	r3, r5
 80065fc:	eb49 0303 	adc.w	r3, r9, r3
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	f04f 0200 	mov.w	r2, #0
 8006606:	f04f 0300 	mov.w	r3, #0
 800660a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800660e:	4629      	mov	r1, r5
 8006610:	024b      	lsls	r3, r1, #9
 8006612:	4621      	mov	r1, r4
 8006614:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006618:	4621      	mov	r1, r4
 800661a:	024a      	lsls	r2, r1, #9
 800661c:	4610      	mov	r0, r2
 800661e:	4619      	mov	r1, r3
 8006620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006622:	2200      	movs	r2, #0
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
 8006626:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006628:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800662c:	f7f9 ffe0 	bl	80005f0 <__aeabi_uldivmod>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4613      	mov	r3, r2
 8006636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006638:	e058      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800663a:	4b38      	ldr	r3, [pc, #224]	; (800671c <HAL_RCC_GetSysClockFreq+0x200>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	099b      	lsrs	r3, r3, #6
 8006640:	2200      	movs	r2, #0
 8006642:	4618      	mov	r0, r3
 8006644:	4611      	mov	r1, r2
 8006646:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800664a:	623b      	str	r3, [r7, #32]
 800664c:	2300      	movs	r3, #0
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
 8006650:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006654:	4642      	mov	r2, r8
 8006656:	464b      	mov	r3, r9
 8006658:	f04f 0000 	mov.w	r0, #0
 800665c:	f04f 0100 	mov.w	r1, #0
 8006660:	0159      	lsls	r1, r3, #5
 8006662:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006666:	0150      	lsls	r0, r2, #5
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4641      	mov	r1, r8
 800666e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006672:	4649      	mov	r1, r9
 8006674:	eb63 0b01 	sbc.w	fp, r3, r1
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006684:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006688:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800668c:	ebb2 040a 	subs.w	r4, r2, sl
 8006690:	eb63 050b 	sbc.w	r5, r3, fp
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	f04f 0300 	mov.w	r3, #0
 800669c:	00eb      	lsls	r3, r5, #3
 800669e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066a2:	00e2      	lsls	r2, r4, #3
 80066a4:	4614      	mov	r4, r2
 80066a6:	461d      	mov	r5, r3
 80066a8:	4643      	mov	r3, r8
 80066aa:	18e3      	adds	r3, r4, r3
 80066ac:	603b      	str	r3, [r7, #0]
 80066ae:	464b      	mov	r3, r9
 80066b0:	eb45 0303 	adc.w	r3, r5, r3
 80066b4:	607b      	str	r3, [r7, #4]
 80066b6:	f04f 0200 	mov.w	r2, #0
 80066ba:	f04f 0300 	mov.w	r3, #0
 80066be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066c2:	4629      	mov	r1, r5
 80066c4:	028b      	lsls	r3, r1, #10
 80066c6:	4621      	mov	r1, r4
 80066c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066cc:	4621      	mov	r1, r4
 80066ce:	028a      	lsls	r2, r1, #10
 80066d0:	4610      	mov	r0, r2
 80066d2:	4619      	mov	r1, r3
 80066d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066d6:	2200      	movs	r2, #0
 80066d8:	61bb      	str	r3, [r7, #24]
 80066da:	61fa      	str	r2, [r7, #28]
 80066dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066e0:	f7f9 ff86 	bl	80005f0 <__aeabi_uldivmod>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4613      	mov	r3, r2
 80066ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <HAL_RCC_GetSysClockFreq+0x200>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	0c1b      	lsrs	r3, r3, #16
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	3301      	adds	r3, #1
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80066fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006700:	fbb2 f3f3 	udiv	r3, r2, r3
 8006704:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006706:	e002      	b.n	800670e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006708:	4b05      	ldr	r3, [pc, #20]	; (8006720 <HAL_RCC_GetSysClockFreq+0x204>)
 800670a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800670c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800670e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006710:	4618      	mov	r0, r3
 8006712:	3750      	adds	r7, #80	; 0x50
 8006714:	46bd      	mov	sp, r7
 8006716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800671a:	bf00      	nop
 800671c:	40023800 	.word	0x40023800
 8006720:	00f42400 	.word	0x00f42400
 8006724:	007a1200 	.word	0x007a1200

08006728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800672c:	4b03      	ldr	r3, [pc, #12]	; (800673c <HAL_RCC_GetHCLKFreq+0x14>)
 800672e:	681b      	ldr	r3, [r3, #0]
}
 8006730:	4618      	mov	r0, r3
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	200001cc 	.word	0x200001cc

08006740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006744:	f7ff fff0 	bl	8006728 <HAL_RCC_GetHCLKFreq>
 8006748:	4602      	mov	r2, r0
 800674a:	4b05      	ldr	r3, [pc, #20]	; (8006760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	0a9b      	lsrs	r3, r3, #10
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	4903      	ldr	r1, [pc, #12]	; (8006764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006756:	5ccb      	ldrb	r3, [r1, r3]
 8006758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800675c:	4618      	mov	r0, r3
 800675e:	bd80      	pop	{r7, pc}
 8006760:	40023800 	.word	0x40023800
 8006764:	0800b91c 	.word	0x0800b91c

08006768 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800678c:	2b00      	cmp	r3, #0
 800678e:	d038      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006790:	4b68      	ldr	r3, [pc, #416]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006796:	f7fb fec1 	bl	800251c <HAL_GetTick>
 800679a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800679c:	e008      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800679e:	f7fb febd 	bl	800251c <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e0bd      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067b0:	4b61      	ldr	r3, [pc, #388]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1f0      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	019b      	lsls	r3, r3, #6
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	071b      	lsls	r3, r3, #28
 80067ce:	495a      	ldr	r1, [pc, #360]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067d6:	4b57      	ldr	r3, [pc, #348]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80067d8:	2201      	movs	r2, #1
 80067da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067dc:	f7fb fe9e 	bl	800251c <HAL_GetTick>
 80067e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067e2:	e008      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067e4:	f7fb fe9a 	bl	800251c <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e09a      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067f6:	4b50      	ldr	r3, [pc, #320]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0f0      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 8083 	beq.w	8006916 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	4b48      	ldr	r3, [pc, #288]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	4a47      	ldr	r2, [pc, #284]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800681a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800681e:	6413      	str	r3, [r2, #64]	; 0x40
 8006820:	4b45      	ldr	r3, [pc, #276]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006828:	60fb      	str	r3, [r7, #12]
 800682a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800682c:	4b43      	ldr	r3, [pc, #268]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a42      	ldr	r2, [pc, #264]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006836:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006838:	f7fb fe70 	bl	800251c <HAL_GetTick>
 800683c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006840:	f7fb fe6c 	bl	800251c <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e06c      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006852:	4b3a      	ldr	r3, [pc, #232]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0f0      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800685e:	4b36      	ldr	r3, [pc, #216]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006866:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d02f      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x166>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	429a      	cmp	r2, r3
 800687a:	d028      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800687c:	4b2e      	ldr	r3, [pc, #184]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800687e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006884:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006886:	4b2e      	ldr	r3, [pc, #184]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006888:	2201      	movs	r2, #1
 800688a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800688c:	4b2c      	ldr	r3, [pc, #176]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006892:	4a29      	ldr	r2, [pc, #164]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006898:	4b27      	ldr	r3, [pc, #156]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800689a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d114      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068a4:	f7fb fe3a 	bl	800251c <HAL_GetTick>
 80068a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068aa:	e00a      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068ac:	f7fb fe36 	bl	800251c <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d901      	bls.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e034      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c2:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0ee      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068da:	d10d      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80068dc:	4b16      	ldr	r3, [pc, #88]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f0:	4911      	ldr	r1, [pc, #68]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	608b      	str	r3, [r1, #8]
 80068f6:	e005      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80068f8:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	4a0e      	ldr	r2, [pc, #56]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006902:	6093      	str	r3, [r2, #8]
 8006904:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006906:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006910:	4909      	ldr	r1, [pc, #36]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006912:	4313      	orrs	r3, r2
 8006914:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	7d1a      	ldrb	r2, [r3, #20]
 8006926:	4b07      	ldr	r3, [pc, #28]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006928:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	42470068 	.word	0x42470068
 8006938:	40023800 	.word	0x40023800
 800693c:	40007000 	.word	0x40007000
 8006940:	42470e40 	.word	0x42470e40
 8006944:	424711e0 	.word	0x424711e0

08006948 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d140      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006966:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d005      	beq.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d131      	bne.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800697c:	4b1f      	ldr	r3, [pc, #124]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800697e:	617b      	str	r3, [r7, #20]
          break;
 8006980:	e031      	b.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006982:	4b1d      	ldr	r3, [pc, #116]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800698a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800698e:	d109      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006990:	4b19      	ldr	r3, [pc, #100]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800699a:	4a19      	ldr	r2, [pc, #100]	; (8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800699c:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a0:	613b      	str	r3, [r7, #16]
 80069a2:	e008      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80069a4:	4b14      	ldr	r3, [pc, #80]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069ae:	4a15      	ldr	r2, [pc, #84]	; (8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80069b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80069b6:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069bc:	099b      	lsrs	r3, r3, #6
 80069be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	fb02 f303 	mul.w	r3, r2, r3
 80069c8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80069ca:	4b0b      	ldr	r3, [pc, #44]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069d0:	0f1b      	lsrs	r3, r3, #28
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069dc:	617b      	str	r3, [r7, #20]
          break;
 80069de:	e002      	b.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]
          break;
 80069e4:	bf00      	nop
        }
      }
      break;
 80069e6:	bf00      	nop
    }
  }
  return frequency;
 80069e8:	697b      	ldr	r3, [r7, #20]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	40023800 	.word	0x40023800
 80069fc:	00bb8000 	.word	0x00bb8000
 8006a00:	007a1200 	.word	0x007a1200
 8006a04:	00f42400 	.word	0x00f42400

08006a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e07b      	b.n	8006b12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d108      	bne.n	8006a34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a2a:	d009      	beq.n	8006a40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	61da      	str	r2, [r3, #28]
 8006a32:	e005      	b.n	8006a40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fb f9e4 	bl	8001e28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac4:	ea42 0103 	orr.w	r1, r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	0c1b      	lsrs	r3, r3, #16
 8006ade:	f003 0104 	and.w	r1, r3, #4
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	f003 0210 	and.w	r2, r3, #16
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69da      	ldr	r2, [r3, #28]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e041      	b.n	8006bb0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d106      	bne.n	8006b46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7fb fb9d 	bl	8002280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4619      	mov	r1, r3
 8006b58:	4610      	mov	r0, r2
 8006b5a:	f000 fcdb 	bl	8007514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d001      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e044      	b.n	8006c5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a1e      	ldr	r2, [pc, #120]	; (8006c68 <HAL_TIM_Base_Start_IT+0xb0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d018      	beq.n	8006c24 <HAL_TIM_Base_Start_IT+0x6c>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfa:	d013      	beq.n	8006c24 <HAL_TIM_Base_Start_IT+0x6c>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1a      	ldr	r2, [pc, #104]	; (8006c6c <HAL_TIM_Base_Start_IT+0xb4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00e      	beq.n	8006c24 <HAL_TIM_Base_Start_IT+0x6c>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a19      	ldr	r2, [pc, #100]	; (8006c70 <HAL_TIM_Base_Start_IT+0xb8>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d009      	beq.n	8006c24 <HAL_TIM_Base_Start_IT+0x6c>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a17      	ldr	r2, [pc, #92]	; (8006c74 <HAL_TIM_Base_Start_IT+0xbc>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d004      	beq.n	8006c24 <HAL_TIM_Base_Start_IT+0x6c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a16      	ldr	r2, [pc, #88]	; (8006c78 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d111      	bne.n	8006c48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b06      	cmp	r3, #6
 8006c34:	d010      	beq.n	8006c58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0201 	orr.w	r2, r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c46:	e007      	b.n	8006c58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0201 	orr.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40010000 	.word	0x40010000
 8006c6c:	40000400 	.word	0x40000400
 8006c70:	40000800 	.word	0x40000800
 8006c74:	40000c00 	.word	0x40000c00
 8006c78:	40014000 	.word	0x40014000

08006c7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0201 	bic.w	r2, r2, #1
 8006c92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6a1a      	ldr	r2, [r3, #32]
 8006c9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10f      	bne.n	8006cc4 <HAL_TIM_Base_Stop_IT+0x48>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6a1a      	ldr	r2, [r3, #32]
 8006caa:	f240 4344 	movw	r3, #1092	; 0x444
 8006cae:	4013      	ands	r3, r2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d107      	bne.n	8006cc4 <HAL_TIM_Base_Stop_IT+0x48>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0201 	bic.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e041      	b.n	8006d70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d106      	bne.n	8006d06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fb fb1f 	bl	8002344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3304      	adds	r3, #4
 8006d16:	4619      	mov	r1, r3
 8006d18:	4610      	mov	r0, r2
 8006d1a:	f000 fbfb 	bl	8007514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d109      	bne.n	8006d9c <HAL_TIM_PWM_Start+0x24>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	bf14      	ite	ne
 8006d94:	2301      	movne	r3, #1
 8006d96:	2300      	moveq	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	e022      	b.n	8006de2 <HAL_TIM_PWM_Start+0x6a>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d109      	bne.n	8006db6 <HAL_TIM_PWM_Start+0x3e>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	bf14      	ite	ne
 8006dae:	2301      	movne	r3, #1
 8006db0:	2300      	moveq	r3, #0
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	e015      	b.n	8006de2 <HAL_TIM_PWM_Start+0x6a>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d109      	bne.n	8006dd0 <HAL_TIM_PWM_Start+0x58>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	bf14      	ite	ne
 8006dc8:	2301      	movne	r3, #1
 8006dca:	2300      	moveq	r3, #0
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	e008      	b.n	8006de2 <HAL_TIM_PWM_Start+0x6a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	bf14      	ite	ne
 8006ddc:	2301      	movne	r3, #1
 8006dde:	2300      	moveq	r3, #0
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e068      	b.n	8006ebc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d104      	bne.n	8006dfa <HAL_TIM_PWM_Start+0x82>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006df8:	e013      	b.n	8006e22 <HAL_TIM_PWM_Start+0xaa>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d104      	bne.n	8006e0a <HAL_TIM_PWM_Start+0x92>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e08:	e00b      	b.n	8006e22 <HAL_TIM_PWM_Start+0xaa>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b08      	cmp	r3, #8
 8006e0e:	d104      	bne.n	8006e1a <HAL_TIM_PWM_Start+0xa2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e18:	e003      	b.n	8006e22 <HAL_TIM_PWM_Start+0xaa>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2201      	movs	r2, #1
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fe18 	bl	8007a60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a23      	ldr	r2, [pc, #140]	; (8006ec4 <HAL_TIM_PWM_Start+0x14c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d107      	bne.n	8006e4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <HAL_TIM_PWM_Start+0x14c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d018      	beq.n	8006e86 <HAL_TIM_PWM_Start+0x10e>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e5c:	d013      	beq.n	8006e86 <HAL_TIM_PWM_Start+0x10e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a19      	ldr	r2, [pc, #100]	; (8006ec8 <HAL_TIM_PWM_Start+0x150>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00e      	beq.n	8006e86 <HAL_TIM_PWM_Start+0x10e>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a17      	ldr	r2, [pc, #92]	; (8006ecc <HAL_TIM_PWM_Start+0x154>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d009      	beq.n	8006e86 <HAL_TIM_PWM_Start+0x10e>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a16      	ldr	r2, [pc, #88]	; (8006ed0 <HAL_TIM_PWM_Start+0x158>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_TIM_PWM_Start+0x10e>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a14      	ldr	r2, [pc, #80]	; (8006ed4 <HAL_TIM_PWM_Start+0x15c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d111      	bne.n	8006eaa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b06      	cmp	r3, #6
 8006e96:	d010      	beq.n	8006eba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0201 	orr.w	r2, r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea8:	e007      	b.n	8006eba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f042 0201 	orr.w	r2, r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	40010000 	.word	0x40010000
 8006ec8:	40000400 	.word	0x40000400
 8006ecc:	40000800 	.word	0x40000800
 8006ed0:	40000c00 	.word	0x40000c00
 8006ed4:	40014000 	.word	0x40014000

08006ed8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fdb8 	bl	8007a60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a29      	ldr	r2, [pc, #164]	; (8006f9c <HAL_TIM_PWM_Stop+0xc4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d117      	bne.n	8006f2a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6a1a      	ldr	r2, [r3, #32]
 8006f00:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f04:	4013      	ands	r3, r2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10f      	bne.n	8006f2a <HAL_TIM_PWM_Stop+0x52>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6a1a      	ldr	r2, [r3, #32]
 8006f10:	f240 4344 	movw	r3, #1092	; 0x444
 8006f14:	4013      	ands	r3, r2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d107      	bne.n	8006f2a <HAL_TIM_PWM_Stop+0x52>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6a1a      	ldr	r2, [r3, #32]
 8006f30:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f34:	4013      	ands	r3, r2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10f      	bne.n	8006f5a <HAL_TIM_PWM_Stop+0x82>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6a1a      	ldr	r2, [r3, #32]
 8006f40:	f240 4344 	movw	r3, #1092	; 0x444
 8006f44:	4013      	ands	r3, r2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d107      	bne.n	8006f5a <HAL_TIM_PWM_Stop+0x82>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0201 	bic.w	r2, r2, #1
 8006f58:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <HAL_TIM_PWM_Stop+0x92>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f68:	e013      	b.n	8006f92 <HAL_TIM_PWM_Stop+0xba>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d104      	bne.n	8006f7a <HAL_TIM_PWM_Stop+0xa2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f78:	e00b      	b.n	8006f92 <HAL_TIM_PWM_Stop+0xba>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d104      	bne.n	8006f8a <HAL_TIM_PWM_Stop+0xb2>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f88:	e003      	b.n	8006f92 <HAL_TIM_PWM_Stop+0xba>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	40010000 	.word	0x40010000

08006fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d122      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d11b      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f06f 0202 	mvn.w	r2, #2
 8006fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fa77 	bl	80074d6 <HAL_TIM_IC_CaptureCallback>
 8006fe8:	e005      	b.n	8006ff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fa69 	bl	80074c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fa7a 	bl	80074ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 0304 	and.w	r3, r3, #4
 8007006:	2b04      	cmp	r3, #4
 8007008:	d122      	bne.n	8007050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b04      	cmp	r3, #4
 8007016:	d11b      	bne.n	8007050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f06f 0204 	mvn.w	r2, #4
 8007020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2202      	movs	r2, #2
 8007026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa4d 	bl	80074d6 <HAL_TIM_IC_CaptureCallback>
 800703c:	e005      	b.n	800704a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa3f 	bl	80074c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fa50 	bl	80074ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b08      	cmp	r3, #8
 800705c:	d122      	bne.n	80070a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b08      	cmp	r3, #8
 800706a:	d11b      	bne.n	80070a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f06f 0208 	mvn.w	r2, #8
 8007074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2204      	movs	r2, #4
 800707a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa23 	bl	80074d6 <HAL_TIM_IC_CaptureCallback>
 8007090:	e005      	b.n	800709e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fa15 	bl	80074c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fa26 	bl	80074ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	f003 0310 	and.w	r3, r3, #16
 80070ae:	2b10      	cmp	r3, #16
 80070b0:	d122      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b10      	cmp	r3, #16
 80070be:	d11b      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f06f 0210 	mvn.w	r2, #16
 80070c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2208      	movs	r2, #8
 80070ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f9f9 	bl	80074d6 <HAL_TIM_IC_CaptureCallback>
 80070e4:	e005      	b.n	80070f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f9eb 	bl	80074c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f9fc 	bl	80074ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b01      	cmp	r3, #1
 8007104:	d10e      	bne.n	8007124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b01      	cmp	r3, #1
 8007112:	d107      	bne.n	8007124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f06f 0201 	mvn.w	r2, #1
 800711c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fa fe06 	bl	8001d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712e:	2b80      	cmp	r3, #128	; 0x80
 8007130:	d10e      	bne.n	8007150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713c:	2b80      	cmp	r3, #128	; 0x80
 800713e:	d107      	bne.n	8007150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fd26 	bl	8007b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715a:	2b40      	cmp	r3, #64	; 0x40
 800715c:	d10e      	bne.n	800717c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007168:	2b40      	cmp	r3, #64	; 0x40
 800716a:	d107      	bne.n	800717c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f9c1 	bl	80074fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b20      	cmp	r3, #32
 8007188:	d10e      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b20      	cmp	r3, #32
 8007196:	d107      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f06f 0220 	mvn.w	r2, #32
 80071a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fcf0 	bl	8007b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d101      	bne.n	80071ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071ca:	2302      	movs	r3, #2
 80071cc:	e0ae      	b.n	800732c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b0c      	cmp	r3, #12
 80071da:	f200 809f 	bhi.w	800731c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071de:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007219 	.word	0x08007219
 80071e8:	0800731d 	.word	0x0800731d
 80071ec:	0800731d 	.word	0x0800731d
 80071f0:	0800731d 	.word	0x0800731d
 80071f4:	08007259 	.word	0x08007259
 80071f8:	0800731d 	.word	0x0800731d
 80071fc:	0800731d 	.word	0x0800731d
 8007200:	0800731d 	.word	0x0800731d
 8007204:	0800729b 	.word	0x0800729b
 8007208:	0800731d 	.word	0x0800731d
 800720c:	0800731d 	.word	0x0800731d
 8007210:	0800731d 	.word	0x0800731d
 8007214:	080072db 	.word	0x080072db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	4618      	mov	r0, r3
 8007220:	f000 f9f8 	bl	8007614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0208 	orr.w	r2, r2, #8
 8007232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0204 	bic.w	r2, r2, #4
 8007242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6999      	ldr	r1, [r3, #24]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	691a      	ldr	r2, [r3, #16]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	619a      	str	r2, [r3, #24]
      break;
 8007256:	e064      	b.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fa3e 	bl	80076e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699a      	ldr	r2, [r3, #24]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6999      	ldr	r1, [r3, #24]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	021a      	lsls	r2, r3, #8
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	619a      	str	r2, [r3, #24]
      break;
 8007298:	e043      	b.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fa89 	bl	80077b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f042 0208 	orr.w	r2, r2, #8
 80072b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69da      	ldr	r2, [r3, #28]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0204 	bic.w	r2, r2, #4
 80072c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69d9      	ldr	r1, [r3, #28]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	691a      	ldr	r2, [r3, #16]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	61da      	str	r2, [r3, #28]
      break;
 80072d8:	e023      	b.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fad3 	bl	800788c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69da      	ldr	r2, [r3, #28]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69d9      	ldr	r1, [r3, #28]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	021a      	lsls	r2, r3, #8
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	61da      	str	r2, [r3, #28]
      break;
 800731a:	e002      	b.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	75fb      	strb	r3, [r7, #23]
      break;
 8007320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800732a:	7dfb      	ldrb	r3, [r7, #23]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007348:	2b01      	cmp	r3, #1
 800734a:	d101      	bne.n	8007350 <HAL_TIM_ConfigClockSource+0x1c>
 800734c:	2302      	movs	r3, #2
 800734e:	e0b4      	b.n	80074ba <HAL_TIM_ConfigClockSource+0x186>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800736e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007388:	d03e      	beq.n	8007408 <HAL_TIM_ConfigClockSource+0xd4>
 800738a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738e:	f200 8087 	bhi.w	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007396:	f000 8086 	beq.w	80074a6 <HAL_TIM_ConfigClockSource+0x172>
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739e:	d87f      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073a0:	2b70      	cmp	r3, #112	; 0x70
 80073a2:	d01a      	beq.n	80073da <HAL_TIM_ConfigClockSource+0xa6>
 80073a4:	2b70      	cmp	r3, #112	; 0x70
 80073a6:	d87b      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073a8:	2b60      	cmp	r3, #96	; 0x60
 80073aa:	d050      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x11a>
 80073ac:	2b60      	cmp	r3, #96	; 0x60
 80073ae:	d877      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073b0:	2b50      	cmp	r3, #80	; 0x50
 80073b2:	d03c      	beq.n	800742e <HAL_TIM_ConfigClockSource+0xfa>
 80073b4:	2b50      	cmp	r3, #80	; 0x50
 80073b6:	d873      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073b8:	2b40      	cmp	r3, #64	; 0x40
 80073ba:	d058      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x13a>
 80073bc:	2b40      	cmp	r3, #64	; 0x40
 80073be:	d86f      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c0:	2b30      	cmp	r3, #48	; 0x30
 80073c2:	d064      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x15a>
 80073c4:	2b30      	cmp	r3, #48	; 0x30
 80073c6:	d86b      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	d060      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x15a>
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d867      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d05c      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x15a>
 80073d4:	2b10      	cmp	r3, #16
 80073d6:	d05a      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x15a>
 80073d8:	e062      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	6899      	ldr	r1, [r3, #8]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f000 fb19 	bl	8007a20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	609a      	str	r2, [r3, #8]
      break;
 8007406:	e04f      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6818      	ldr	r0, [r3, #0]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	6899      	ldr	r1, [r3, #8]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f000 fb02 	bl	8007a20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689a      	ldr	r2, [r3, #8]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800742a:	609a      	str	r2, [r3, #8]
      break;
 800742c:	e03c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6859      	ldr	r1, [r3, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	461a      	mov	r2, r3
 800743c:	f000 fa76 	bl	800792c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2150      	movs	r1, #80	; 0x50
 8007446:	4618      	mov	r0, r3
 8007448:	f000 facf 	bl	80079ea <TIM_ITRx_SetConfig>
      break;
 800744c:	e02c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6859      	ldr	r1, [r3, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	461a      	mov	r2, r3
 800745c:	f000 fa95 	bl	800798a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2160      	movs	r1, #96	; 0x60
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fabf 	bl	80079ea <TIM_ITRx_SetConfig>
      break;
 800746c:	e01c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6859      	ldr	r1, [r3, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	461a      	mov	r2, r3
 800747c:	f000 fa56 	bl	800792c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2140      	movs	r1, #64	; 0x40
 8007486:	4618      	mov	r0, r3
 8007488:	f000 faaf 	bl	80079ea <TIM_ITRx_SetConfig>
      break;
 800748c:	e00c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f000 faa6 	bl	80079ea <TIM_ITRx_SetConfig>
      break;
 800749e:	e003      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	73fb      	strb	r3, [r7, #15]
      break;
 80074a4:	e000      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074ca:	bf00      	nop
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
	...

08007514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a34      	ldr	r2, [pc, #208]	; (80075f8 <TIM_Base_SetConfig+0xe4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00f      	beq.n	800754c <TIM_Base_SetConfig+0x38>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007532:	d00b      	beq.n	800754c <TIM_Base_SetConfig+0x38>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a31      	ldr	r2, [pc, #196]	; (80075fc <TIM_Base_SetConfig+0xe8>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d007      	beq.n	800754c <TIM_Base_SetConfig+0x38>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a30      	ldr	r2, [pc, #192]	; (8007600 <TIM_Base_SetConfig+0xec>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d003      	beq.n	800754c <TIM_Base_SetConfig+0x38>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a2f      	ldr	r2, [pc, #188]	; (8007604 <TIM_Base_SetConfig+0xf0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d108      	bne.n	800755e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a25      	ldr	r2, [pc, #148]	; (80075f8 <TIM_Base_SetConfig+0xe4>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d01b      	beq.n	800759e <TIM_Base_SetConfig+0x8a>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756c:	d017      	beq.n	800759e <TIM_Base_SetConfig+0x8a>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a22      	ldr	r2, [pc, #136]	; (80075fc <TIM_Base_SetConfig+0xe8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d013      	beq.n	800759e <TIM_Base_SetConfig+0x8a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a21      	ldr	r2, [pc, #132]	; (8007600 <TIM_Base_SetConfig+0xec>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00f      	beq.n	800759e <TIM_Base_SetConfig+0x8a>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a20      	ldr	r2, [pc, #128]	; (8007604 <TIM_Base_SetConfig+0xf0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00b      	beq.n	800759e <TIM_Base_SetConfig+0x8a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a1f      	ldr	r2, [pc, #124]	; (8007608 <TIM_Base_SetConfig+0xf4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d007      	beq.n	800759e <TIM_Base_SetConfig+0x8a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a1e      	ldr	r2, [pc, #120]	; (800760c <TIM_Base_SetConfig+0xf8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d003      	beq.n	800759e <TIM_Base_SetConfig+0x8a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a1d      	ldr	r2, [pc, #116]	; (8007610 <TIM_Base_SetConfig+0xfc>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d108      	bne.n	80075b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <TIM_Base_SetConfig+0xe4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d103      	bne.n	80075e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	615a      	str	r2, [r3, #20]
}
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	40010000 	.word	0x40010000
 80075fc:	40000400 	.word	0x40000400
 8007600:	40000800 	.word	0x40000800
 8007604:	40000c00 	.word	0x40000c00
 8007608:	40014000 	.word	0x40014000
 800760c:	40014400 	.word	0x40014400
 8007610:	40014800 	.word	0x40014800

08007614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	f023 0201 	bic.w	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0303 	bic.w	r3, r3, #3
 800764a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f023 0302 	bic.w	r3, r3, #2
 800765c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a1c      	ldr	r2, [pc, #112]	; (80076dc <TIM_OC1_SetConfig+0xc8>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d10c      	bne.n	800768a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f023 0308 	bic.w	r3, r3, #8
 8007676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f023 0304 	bic.w	r3, r3, #4
 8007688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a13      	ldr	r2, [pc, #76]	; (80076dc <TIM_OC1_SetConfig+0xc8>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d111      	bne.n	80076b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	621a      	str	r2, [r3, #32]
}
 80076d0:	bf00      	nop
 80076d2:	371c      	adds	r7, #28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	40010000 	.word	0x40010000

080076e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	f023 0210 	bic.w	r2, r3, #16
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800770e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	021b      	lsls	r3, r3, #8
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	4313      	orrs	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f023 0320 	bic.w	r3, r3, #32
 800772a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	011b      	lsls	r3, r3, #4
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a1e      	ldr	r2, [pc, #120]	; (80077b4 <TIM_OC2_SetConfig+0xd4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d10d      	bne.n	800775c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	011b      	lsls	r3, r3, #4
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800775a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a15      	ldr	r2, [pc, #84]	; (80077b4 <TIM_OC2_SetConfig+0xd4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d113      	bne.n	800778c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800776a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	4313      	orrs	r3, r2
 800777e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	4313      	orrs	r3, r2
 800778a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	621a      	str	r2, [r3, #32]
}
 80077a6:	bf00      	nop
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40010000 	.word	0x40010000

080077b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0303 	bic.w	r3, r3, #3
 80077ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	021b      	lsls	r3, r3, #8
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	4313      	orrs	r3, r2
 800780c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a1d      	ldr	r2, [pc, #116]	; (8007888 <TIM_OC3_SetConfig+0xd0>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d10d      	bne.n	8007832 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800781c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	021b      	lsls	r3, r3, #8
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	4313      	orrs	r3, r2
 8007828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a14      	ldr	r2, [pc, #80]	; (8007888 <TIM_OC3_SetConfig+0xd0>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d113      	bne.n	8007862 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	011b      	lsls	r3, r3, #4
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	4313      	orrs	r3, r2
 8007854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	011b      	lsls	r3, r3, #4
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	4313      	orrs	r3, r2
 8007860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	621a      	str	r2, [r3, #32]
}
 800787c:	bf00      	nop
 800787e:	371c      	adds	r7, #28
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	40010000 	.word	0x40010000

0800788c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	021b      	lsls	r3, r3, #8
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	031b      	lsls	r3, r3, #12
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a10      	ldr	r2, [pc, #64]	; (8007928 <TIM_OC4_SetConfig+0x9c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d109      	bne.n	8007900 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	019b      	lsls	r3, r3, #6
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	621a      	str	r2, [r3, #32]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	40010000 	.word	0x40010000

0800792c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f023 0201 	bic.w	r2, r3, #1
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	4313      	orrs	r3, r2
 8007960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f023 030a 	bic.w	r3, r3, #10
 8007968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	4313      	orrs	r3, r2
 8007970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	621a      	str	r2, [r3, #32]
}
 800797e:	bf00      	nop
 8007980:	371c      	adds	r7, #28
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800798a:	b480      	push	{r7}
 800798c:	b087      	sub	sp, #28
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	f023 0210 	bic.w	r2, r3, #16
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	031b      	lsls	r3, r3, #12
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4313      	orrs	r3, r2
 80079be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	621a      	str	r2, [r3, #32]
}
 80079de:	bf00      	nop
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b085      	sub	sp, #20
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	f043 0307 	orr.w	r3, r3, #7
 8007a0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	609a      	str	r2, [r3, #8]
}
 8007a14:	bf00      	nop
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	021a      	lsls	r2, r3, #8
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	609a      	str	r2, [r3, #8]
}
 8007a54:	bf00      	nop
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f003 031f 	and.w	r3, r3, #31
 8007a72:	2201      	movs	r2, #1
 8007a74:	fa02 f303 	lsl.w	r3, r2, r3
 8007a78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a1a      	ldr	r2, [r3, #32]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	43db      	mvns	r3, r3
 8007a82:	401a      	ands	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6a1a      	ldr	r2, [r3, #32]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f003 031f 	and.w	r3, r3, #31
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	fa01 f303 	lsl.w	r3, r1, r3
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
	...

08007aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e050      	b.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a1c      	ldr	r2, [pc, #112]	; (8007b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d018      	beq.n	8007b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b10:	d013      	beq.n	8007b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a18      	ldr	r2, [pc, #96]	; (8007b78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d00e      	beq.n	8007b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a16      	ldr	r2, [pc, #88]	; (8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d009      	beq.n	8007b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d004      	beq.n	8007b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a13      	ldr	r2, [pc, #76]	; (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d10c      	bne.n	8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	40010000 	.word	0x40010000
 8007b78:	40000400 	.word	0x40000400
 8007b7c:	40000800 	.word	0x40000800
 8007b80:	40000c00 	.word	0x40000c00
 8007b84:	40014000 	.word	0x40014000

08007b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	f107 001c 	add.w	r0, r7, #28
 8007bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d122      	bne.n	8007c0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d105      	bne.n	8007c02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f9c0 	bl	8007f88 <USB_CoreReset>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73fb      	strb	r3, [r7, #15]
 8007c0c:	e01a      	b.n	8007c44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f9b4 	bl	8007f88 <USB_CoreReset>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d106      	bne.n	8007c38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	639a      	str	r2, [r3, #56]	; 0x38
 8007c36:	e005      	b.n	8007c44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d10b      	bne.n	8007c62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f043 0206 	orr.w	r2, r3, #6
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f043 0220 	orr.w	r2, r3, #32
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c6e:	b004      	add	sp, #16
 8007c70:	4770      	bx	lr

08007c72 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f043 0201 	orr.w	r2, r3, #1
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f023 0201 	bic.w	r2, r3, #1
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cd2:	78fb      	ldrb	r3, [r7, #3]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d115      	bne.n	8007d04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ce4:	2001      	movs	r0, #1
 8007ce6:	f7fa fc25 	bl	8002534 <HAL_Delay>
      ms++;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3301      	adds	r3, #1
 8007cee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f93a 	bl	8007f6a <USB_GetMode>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d01e      	beq.n	8007d3a <USB_SetCurrentMode+0x84>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b31      	cmp	r3, #49	; 0x31
 8007d00:	d9f0      	bls.n	8007ce4 <USB_SetCurrentMode+0x2e>
 8007d02:	e01a      	b.n	8007d3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d115      	bne.n	8007d36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d16:	2001      	movs	r0, #1
 8007d18:	f7fa fc0c 	bl	8002534 <HAL_Delay>
      ms++;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f921 	bl	8007f6a <USB_GetMode>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <USB_SetCurrentMode+0x84>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b31      	cmp	r3, #49	; 0x31
 8007d32:	d9f0      	bls.n	8007d16 <USB_SetCurrentMode+0x60>
 8007d34:	e001      	b.n	8007d3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e005      	b.n	8007d46 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b32      	cmp	r3, #50	; 0x32
 8007d3e:	d101      	bne.n	8007d44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e000      	b.n	8007d46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3301      	adds	r3, #1
 8007d62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4a13      	ldr	r2, [pc, #76]	; (8007db4 <USB_FlushTxFifo+0x64>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d901      	bls.n	8007d70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e01b      	b.n	8007da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	daf2      	bge.n	8007d5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	019b      	lsls	r3, r3, #6
 8007d80:	f043 0220 	orr.w	r2, r3, #32
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4a08      	ldr	r2, [pc, #32]	; (8007db4 <USB_FlushTxFifo+0x64>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d901      	bls.n	8007d9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e006      	b.n	8007da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f003 0320 	and.w	r3, r3, #32
 8007da2:	2b20      	cmp	r3, #32
 8007da4:	d0f0      	beq.n	8007d88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	00030d40 	.word	0x00030d40

08007db8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4a11      	ldr	r2, [pc, #68]	; (8007e14 <USB_FlushRxFifo+0x5c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d901      	bls.n	8007dd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e018      	b.n	8007e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	daf2      	bge.n	8007dc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2210      	movs	r2, #16
 8007de6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3301      	adds	r3, #1
 8007dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	4a08      	ldr	r2, [pc, #32]	; (8007e14 <USB_FlushRxFifo+0x5c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d901      	bls.n	8007dfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e006      	b.n	8007e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	f003 0310 	and.w	r3, r3, #16
 8007e02:	2b10      	cmp	r3, #16
 8007e04:	d0f0      	beq.n	8007de8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	00030d40 	.word	0x00030d40

08007e18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b089      	sub	sp, #36	; 0x24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4611      	mov	r1, r2
 8007e24:	461a      	mov	r2, r3
 8007e26:	460b      	mov	r3, r1
 8007e28:	71fb      	strb	r3, [r7, #7]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d123      	bne.n	8007e86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e3e:	88bb      	ldrh	r3, [r7, #4]
 8007e40:	3303      	adds	r3, #3
 8007e42:	089b      	lsrs	r3, r3, #2
 8007e44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e46:	2300      	movs	r3, #0
 8007e48:	61bb      	str	r3, [r7, #24]
 8007e4a:	e018      	b.n	8007e7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e4c:	79fb      	ldrb	r3, [r7, #7]
 8007e4e:	031a      	lsls	r2, r3, #12
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e58:	461a      	mov	r2, r3
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	3301      	adds	r3, #1
 8007e64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	3301      	adds	r3, #1
 8007e76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	61bb      	str	r3, [r7, #24]
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d3e2      	bcc.n	8007e4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3724      	adds	r7, #36	; 0x24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b08b      	sub	sp, #44	; 0x2c
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007eaa:	88fb      	ldrh	r3, [r7, #6]
 8007eac:	089b      	lsrs	r3, r3, #2
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007eba:	2300      	movs	r3, #0
 8007ebc:	623b      	str	r3, [r7, #32]
 8007ebe:	e014      	b.n	8007eea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	3301      	adds	r3, #1
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	3301      	adds	r3, #1
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	623b      	str	r3, [r7, #32]
 8007eea:	6a3a      	ldr	r2, [r7, #32]
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d3e6      	bcc.n	8007ec0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ef2:	8bfb      	ldrh	r3, [r7, #30]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01e      	beq.n	8007f36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f02:	461a      	mov	r2, r3
 8007f04:	f107 0310 	add.w	r3, r7, #16
 8007f08:	6812      	ldr	r2, [r2, #0]
 8007f0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	fa22 f303 	lsr.w	r3, r2, r3
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	701a      	strb	r2, [r3, #0]
      i++;
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	3301      	adds	r3, #1
 8007f22:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	3301      	adds	r3, #1
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007f2a:	8bfb      	ldrh	r3, [r7, #30]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f30:	8bfb      	ldrh	r3, [r7, #30]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1ea      	bne.n	8007f0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	372c      	adds	r7, #44	; 0x2c
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	f003 0301 	and.w	r3, r3, #1
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
	...

08007f88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3301      	adds	r3, #1
 8007f98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	4a13      	ldr	r2, [pc, #76]	; (8007fec <USB_CoreReset+0x64>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d901      	bls.n	8007fa6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e01b      	b.n	8007fde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	daf2      	bge.n	8007f94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f043 0201 	orr.w	r2, r3, #1
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4a09      	ldr	r2, [pc, #36]	; (8007fec <USB_CoreReset+0x64>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d901      	bls.n	8007fd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e006      	b.n	8007fde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d0f0      	beq.n	8007fbe <USB_CoreReset+0x36>

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	00030d40 	.word	0x00030d40

08007ff0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b086      	sub	sp, #24
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008010:	461a      	mov	r2, r3
 8008012:	2300      	movs	r3, #0
 8008014:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008026:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008032:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008042:	2b00      	cmp	r3, #0
 8008044:	d018      	beq.n	8008078 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	2b01      	cmp	r3, #1
 800804a:	d10a      	bne.n	8008062 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800805a:	f043 0304 	orr.w	r3, r3, #4
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	e014      	b.n	800808c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008070:	f023 0304 	bic.w	r3, r3, #4
 8008074:	6013      	str	r3, [r2, #0]
 8008076:	e009      	b.n	800808c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008086:	f023 0304 	bic.w	r3, r3, #4
 800808a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800808c:	2110      	movs	r1, #16
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff fe5e 	bl	8007d50 <USB_FlushTxFifo>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff fe8a 	bl	8007db8 <USB_FlushRxFifo>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80080ae:	2300      	movs	r3, #0
 80080b0:	613b      	str	r3, [r7, #16]
 80080b2:	e015      	b.n	80080e0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c0:	461a      	mov	r2, r3
 80080c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080c6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d4:	461a      	mov	r2, r3
 80080d6:	2300      	movs	r3, #0
 80080d8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	3301      	adds	r3, #1
 80080de:	613b      	str	r3, [r7, #16]
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d3e5      	bcc.n	80080b4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080f4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00b      	beq.n	800811a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008108:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a13      	ldr	r2, [pc, #76]	; (800815c <USB_HostInit+0x16c>)
 800810e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a13      	ldr	r2, [pc, #76]	; (8008160 <USB_HostInit+0x170>)
 8008114:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008118:	e009      	b.n	800812e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2280      	movs	r2, #128	; 0x80
 800811e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a10      	ldr	r2, [pc, #64]	; (8008164 <USB_HostInit+0x174>)
 8008124:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a0f      	ldr	r2, [pc, #60]	; (8008168 <USB_HostInit+0x178>)
 800812a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	2b00      	cmp	r3, #0
 8008132:	d105      	bne.n	8008140 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	f043 0210 	orr.w	r2, r3, #16
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	699a      	ldr	r2, [r3, #24]
 8008144:	4b09      	ldr	r3, [pc, #36]	; (800816c <USB_HostInit+0x17c>)
 8008146:	4313      	orrs	r3, r2
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800814c:	7dfb      	ldrb	r3, [r7, #23]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008158:	b004      	add	sp, #16
 800815a:	4770      	bx	lr
 800815c:	01000200 	.word	0x01000200
 8008160:	00e00300 	.word	0x00e00300
 8008164:	00600080 	.word	0x00600080
 8008168:	004000e0 	.word	0x004000e0
 800816c:	a3200008 	.word	0xa3200008

08008170 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800818e:	f023 0303 	bic.w	r3, r3, #3
 8008192:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	f003 0303 	and.w	r3, r3, #3
 80081a2:	68f9      	ldr	r1, [r7, #12]
 80081a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80081a8:	4313      	orrs	r3, r2
 80081aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d107      	bne.n	80081c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081b8:	461a      	mov	r2, r3
 80081ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80081be:	6053      	str	r3, [r2, #4]
 80081c0:	e009      	b.n	80081d6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80081c2:	78fb      	ldrb	r3, [r7, #3]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d106      	bne.n	80081d6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081ce:	461a      	mov	r2, r3
 80081d0:	f241 7370 	movw	r3, #6000	; 0x1770
 80081d4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008204:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800820e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008212:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008214:	2064      	movs	r0, #100	; 0x64
 8008216:	f7fa f98d 	bl	8002534 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008222:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008226:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008228:	200a      	movs	r0, #10
 800822a:	f7fa f983 	bl	8002534 <HAL_Delay>

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800825c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d109      	bne.n	800827c <USB_DriveVbus+0x44>
 8008268:	78fb      	ldrb	r3, [r7, #3]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d106      	bne.n	800827c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008276:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800827a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008286:	d109      	bne.n	800829c <USB_DriveVbus+0x64>
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d106      	bne.n	800829c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800829a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b085      	sub	sp, #20
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	0c5b      	lsrs	r3, r3, #17
 80082c8:	f003 0303 	and.w	r3, r3, #3
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	b29b      	uxth	r3, r3
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
	...

080082fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	4608      	mov	r0, r1
 8008306:	4611      	mov	r1, r2
 8008308:	461a      	mov	r2, r3
 800830a:	4603      	mov	r3, r0
 800830c:	70fb      	strb	r3, [r7, #3]
 800830e:	460b      	mov	r3, r1
 8008310:	70bb      	strb	r3, [r7, #2]
 8008312:	4613      	mov	r3, r2
 8008314:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800831e:	78fb      	ldrb	r3, [r7, #3]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	4413      	add	r3, r2
 8008326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832a:	461a      	mov	r2, r3
 800832c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008330:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008332:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008336:	2b03      	cmp	r3, #3
 8008338:	d87e      	bhi.n	8008438 <USB_HC_Init+0x13c>
 800833a:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <USB_HC_Init+0x44>)
 800833c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008340:	08008351 	.word	0x08008351
 8008344:	080083fb 	.word	0x080083fb
 8008348:	08008351 	.word	0x08008351
 800834c:	080083bd 	.word	0x080083bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	4413      	add	r3, r2
 8008358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800835c:	461a      	mov	r2, r3
 800835e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008362:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008364:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008368:	2b00      	cmp	r3, #0
 800836a:	da10      	bge.n	800838e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800836c:	78fb      	ldrb	r3, [r7, #3]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	4413      	add	r3, r2
 8008374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	78fa      	ldrb	r2, [r7, #3]
 800837c:	0151      	lsls	r1, r2, #5
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	440a      	add	r2, r1
 8008382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800838a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800838c:	e057      	b.n	800843e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008396:	2b00      	cmp	r3, #0
 8008398:	d051      	beq.n	800843e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	78fa      	ldrb	r2, [r7, #3]
 80083aa:	0151      	lsls	r1, r2, #5
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	440a      	add	r2, r1
 80083b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80083b8:	60d3      	str	r3, [r2, #12]
      break;
 80083ba:	e040      	b.n	800843e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083bc:	78fb      	ldrb	r3, [r7, #3]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c8:	461a      	mov	r2, r3
 80083ca:	f240 639d 	movw	r3, #1693	; 0x69d
 80083ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80083d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	da34      	bge.n	8008442 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80083d8:	78fb      	ldrb	r3, [r7, #3]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	78fa      	ldrb	r2, [r7, #3]
 80083e8:	0151      	lsls	r1, r2, #5
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	440a      	add	r2, r1
 80083ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80083f8:	e023      	b.n	8008442 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	4413      	add	r3, r2
 8008402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008406:	461a      	mov	r2, r3
 8008408:	f240 2325 	movw	r3, #549	; 0x225
 800840c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800840e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008412:	2b00      	cmp	r3, #0
 8008414:	da17      	bge.n	8008446 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008416:	78fb      	ldrb	r3, [r7, #3]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	4413      	add	r3, r2
 800841e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	78fa      	ldrb	r2, [r7, #3]
 8008426:	0151      	lsls	r1, r2, #5
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	440a      	add	r2, r1
 800842c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008430:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008434:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008436:	e006      	b.n	8008446 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	77fb      	strb	r3, [r7, #31]
      break;
 800843c:	e004      	b.n	8008448 <USB_HC_Init+0x14c>
      break;
 800843e:	bf00      	nop
 8008440:	e002      	b.n	8008448 <USB_HC_Init+0x14c>
      break;
 8008442:	bf00      	nop
 8008444:	e000      	b.n	8008448 <USB_HC_Init+0x14c>
      break;
 8008446:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	4413      	add	r3, r2
 8008450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	78fa      	ldrb	r2, [r7, #3]
 8008458:	0151      	lsls	r1, r2, #5
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	440a      	add	r2, r1
 800845e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008462:	f043 0302 	orr.w	r3, r3, #2
 8008466:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800846e:	699a      	ldr	r2, [r3, #24]
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	f003 030f 	and.w	r3, r3, #15
 8008476:	2101      	movs	r1, #1
 8008478:	fa01 f303 	lsl.w	r3, r1, r3
 800847c:	6939      	ldr	r1, [r7, #16]
 800847e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008482:	4313      	orrs	r3, r2
 8008484:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008492:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008496:	2b00      	cmp	r3, #0
 8008498:	da03      	bge.n	80084a2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800849a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800849e:	61bb      	str	r3, [r7, #24]
 80084a0:	e001      	b.n	80084a6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80084a2:	2300      	movs	r3, #0
 80084a4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7ff feff 	bl	80082aa <USB_GetHostSpeed>
 80084ac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80084ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d106      	bne.n	80084c4 <USB_HC_Init+0x1c8>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d003      	beq.n	80084c4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80084bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80084c0:	617b      	str	r3, [r7, #20]
 80084c2:	e001      	b.n	80084c8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084c8:	787b      	ldrb	r3, [r7, #1]
 80084ca:	059b      	lsls	r3, r3, #22
 80084cc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80084d0:	78bb      	ldrb	r3, [r7, #2]
 80084d2:	02db      	lsls	r3, r3, #11
 80084d4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084d8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80084da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084de:	049b      	lsls	r3, r3, #18
 80084e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80084e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80084e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80084e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80084ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	0159      	lsls	r1, r3, #5
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	440b      	add	r3, r1
 80084fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084fe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008504:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008506:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800850a:	2b03      	cmp	r3, #3
 800850c:	d003      	beq.n	8008516 <USB_HC_Init+0x21a>
 800850e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008512:	2b01      	cmp	r3, #1
 8008514:	d10f      	bne.n	8008536 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	4413      	add	r3, r2
 800851e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	78fa      	ldrb	r2, [r7, #3]
 8008526:	0151      	lsls	r1, r2, #5
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	440a      	add	r2, r1
 800852c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008530:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008534:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008536:	7ffb      	ldrb	r3, [r7, #31]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3720      	adds	r7, #32
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b08c      	sub	sp, #48	; 0x30
 8008544:	af02      	add	r7, sp, #8
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	4613      	mov	r3, r2
 800854c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800855c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008566:	2b00      	cmp	r3, #0
 8008568:	d02d      	beq.n	80085c6 <USB_HC_StartXfer+0x86>
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	791b      	ldrb	r3, [r3, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d129      	bne.n	80085c6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d117      	bne.n	80085a8 <USB_HC_StartXfer+0x68>
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	79db      	ldrb	r3, [r3, #7]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d003      	beq.n	8008588 <USB_HC_StartXfer+0x48>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	79db      	ldrb	r3, [r3, #7]
 8008584:	2b02      	cmp	r3, #2
 8008586:	d10f      	bne.n	80085a8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	4413      	add	r3, r2
 8008590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	69fa      	ldr	r2, [r7, #28]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	6a3a      	ldr	r2, [r7, #32]
 800859c:	440a      	add	r2, r1
 800859e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10b      	bne.n	80085c6 <USB_HC_StartXfer+0x86>
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	795b      	ldrb	r3, [r3, #5]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d107      	bne.n	80085c6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	785b      	ldrb	r3, [r3, #1]
 80085ba:	4619      	mov	r1, r3
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f000 fa0f 	bl	80089e0 <USB_DoPing>
      return HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	e0f8      	b.n	80087b8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d018      	beq.n	8008600 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	8912      	ldrh	r2, [r2, #8]
 80085d6:	4413      	add	r3, r2
 80085d8:	3b01      	subs	r3, #1
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	8912      	ldrh	r2, [r2, #8]
 80085de:	fbb3 f3f2 	udiv	r3, r3, r2
 80085e2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80085e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80085e6:	8b7b      	ldrh	r3, [r7, #26]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d90b      	bls.n	8008604 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80085ec:	8b7b      	ldrh	r3, [r7, #26]
 80085ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80085f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	8912      	ldrh	r2, [r2, #8]
 80085f6:	fb03 f202 	mul.w	r2, r3, r2
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	611a      	str	r2, [r3, #16]
 80085fe:	e001      	b.n	8008604 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008600:	2301      	movs	r3, #1
 8008602:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	78db      	ldrb	r3, [r3, #3]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d007      	beq.n	800861c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800860c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	8912      	ldrh	r2, [r2, #8]
 8008612:	fb03 f202 	mul.w	r2, r3, r2
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	611a      	str	r2, [r3, #16]
 800861a:	e003      	b.n	8008624 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	695a      	ldr	r2, [r3, #20]
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800862c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800862e:	04d9      	lsls	r1, r3, #19
 8008630:	4b63      	ldr	r3, [pc, #396]	; (80087c0 <USB_HC_StartXfer+0x280>)
 8008632:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008634:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	7a9b      	ldrb	r3, [r3, #10]
 800863a:	075b      	lsls	r3, r3, #29
 800863c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008640:	69f9      	ldr	r1, [r7, #28]
 8008642:	0148      	lsls	r0, r1, #5
 8008644:	6a39      	ldr	r1, [r7, #32]
 8008646:	4401      	add	r1, r0
 8008648:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800864c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800864e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d009      	beq.n	800866a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	68d9      	ldr	r1, [r3, #12]
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	4413      	add	r3, r2
 8008662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008666:	460a      	mov	r2, r1
 8008668:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	bf0c      	ite	eq
 800867a:	2301      	moveq	r3, #1
 800867c:	2300      	movne	r3, #0
 800867e:	b2db      	uxtb	r3, r3
 8008680:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	015a      	lsls	r2, r3, #5
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	4413      	add	r3, r2
 800868a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	69fa      	ldr	r2, [r7, #28]
 8008692:	0151      	lsls	r1, r2, #5
 8008694:	6a3a      	ldr	r2, [r7, #32]
 8008696:	440a      	add	r2, r1
 8008698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800869c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086a0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	7e7b      	ldrb	r3, [r7, #25]
 80086b2:	075b      	lsls	r3, r3, #29
 80086b4:	69f9      	ldr	r1, [r7, #28]
 80086b6:	0148      	lsls	r0, r1, #5
 80086b8:	6a39      	ldr	r1, [r7, #32]
 80086ba:	4401      	add	r1, r0
 80086bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80086c0:	4313      	orrs	r3, r2
 80086c2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80086da:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	78db      	ldrb	r3, [r3, #3]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d004      	beq.n	80086ee <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ea:	613b      	str	r3, [r7, #16]
 80086ec:	e003      	b.n	80086f6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086f4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086fc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	4413      	add	r3, r2
 8008706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800870a:	461a      	mov	r2, r3
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	e04e      	b.n	80087b8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	78db      	ldrb	r3, [r3, #3]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d149      	bne.n	80087b6 <USB_HC_StartXfer+0x276>
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d045      	beq.n	80087b6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	79db      	ldrb	r3, [r3, #7]
 800872e:	2b03      	cmp	r3, #3
 8008730:	d830      	bhi.n	8008794 <USB_HC_StartXfer+0x254>
 8008732:	a201      	add	r2, pc, #4	; (adr r2, 8008738 <USB_HC_StartXfer+0x1f8>)
 8008734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008738:	08008749 	.word	0x08008749
 800873c:	0800876d 	.word	0x0800876d
 8008740:	08008749 	.word	0x08008749
 8008744:	0800876d 	.word	0x0800876d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	3303      	adds	r3, #3
 800874e:	089b      	lsrs	r3, r3, #2
 8008750:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008752:	8afa      	ldrh	r2, [r7, #22]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	b29b      	uxth	r3, r3
 800875a:	429a      	cmp	r2, r3
 800875c:	d91c      	bls.n	8008798 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	f043 0220 	orr.w	r2, r3, #32
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	619a      	str	r2, [r3, #24]
        }
        break;
 800876a:	e015      	b.n	8008798 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	3303      	adds	r3, #3
 8008772:	089b      	lsrs	r3, r3, #2
 8008774:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008776:	8afa      	ldrh	r2, [r7, #22]
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	b29b      	uxth	r3, r3
 8008782:	429a      	cmp	r2, r3
 8008784:	d90a      	bls.n	800879c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	619a      	str	r2, [r3, #24]
        }
        break;
 8008792:	e003      	b.n	800879c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008794:	bf00      	nop
 8008796:	e002      	b.n	800879e <USB_HC_StartXfer+0x25e>
        break;
 8008798:	bf00      	nop
 800879a:	e000      	b.n	800879e <USB_HC_StartXfer+0x25e>
        break;
 800879c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	68d9      	ldr	r1, [r3, #12]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	785a      	ldrb	r2, [r3, #1]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	2000      	movs	r0, #0
 80087ae:	9000      	str	r0, [sp, #0]
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f7ff fb31 	bl	8007e18 <USB_WritePacket>
  }

  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3728      	adds	r7, #40	; 0x28
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	1ff80000 	.word	0x1ff80000

080087c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	b29b      	uxth	r3, r3
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b089      	sub	sp, #36	; 0x24
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	460b      	mov	r3, r1
 80087f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	4413      	add	r3, r2
 8008806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	0c9b      	lsrs	r3, r3, #18
 800880e:	f003 0303 	and.w	r3, r3, #3
 8008812:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	4413      	add	r3, r2
 800881c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	0fdb      	lsrs	r3, r3, #31
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b20      	cmp	r3, #32
 8008834:	d104      	bne.n	8008840 <USB_HC_Halt+0x5a>
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	e0c8      	b.n	80089d2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d002      	beq.n	800884c <USB_HC_Halt+0x66>
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d163      	bne.n	8008914 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	4413      	add	r3, r2
 8008854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	0151      	lsls	r1, r2, #5
 800885e:	69fa      	ldr	r2, [r7, #28]
 8008860:	440a      	add	r2, r1
 8008862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800886a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f003 0320 	and.w	r3, r3, #32
 8008874:	2b00      	cmp	r3, #0
 8008876:	f040 80ab 	bne.w	80089d0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d133      	bne.n	80088ee <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	4413      	add	r3, r2
 800888e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	0151      	lsls	r1, r2, #5
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	440a      	add	r2, r1
 800889c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	0151      	lsls	r1, r2, #5
 80088b8:	69fa      	ldr	r2, [r7, #28]
 80088ba:	440a      	add	r2, r1
 80088bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088c4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3301      	adds	r3, #1
 80088ca:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088d2:	d81d      	bhi.n	8008910 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088ea:	d0ec      	beq.n	80088c6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088ec:	e070      	b.n	80089d0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	0151      	lsls	r1, r2, #5
 8008900:	69fa      	ldr	r2, [r7, #28]
 8008902:	440a      	add	r2, r1
 8008904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800890c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800890e:	e05f      	b.n	80089d0 <USB_HC_Halt+0x1ea>
            break;
 8008910:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008912:	e05d      	b.n	80089d0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	0151      	lsls	r1, r2, #5
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	440a      	add	r2, r1
 800892a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800892e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008932:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d133      	bne.n	80089ac <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	4413      	add	r3, r2
 800894c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	0151      	lsls	r1, r2, #5
 8008956:	69fa      	ldr	r2, [r7, #28]
 8008958:	440a      	add	r2, r1
 800895a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800895e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008962:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	015a      	lsls	r2, r3, #5
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	4413      	add	r3, r2
 800896c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	0151      	lsls	r1, r2, #5
 8008976:	69fa      	ldr	r2, [r7, #28]
 8008978:	440a      	add	r2, r1
 800897a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800897e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008982:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	3301      	adds	r3, #1
 8008988:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008990:	d81d      	bhi.n	80089ce <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	4413      	add	r3, r2
 800899a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089a8:	d0ec      	beq.n	8008984 <USB_HC_Halt+0x19e>
 80089aa:	e011      	b.n	80089d0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	0151      	lsls	r1, r2, #5
 80089be:	69fa      	ldr	r2, [r7, #28]
 80089c0:	440a      	add	r2, r1
 80089c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	e000      	b.n	80089d0 <USB_HC_Halt+0x1ea>
          break;
 80089ce:	bf00      	nop
    }
  }

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3724      	adds	r7, #36	; 0x24
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
	...

080089e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80089f4:	2301      	movs	r3, #1
 80089f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	04da      	lsls	r2, r3, #19
 80089fc:	4b15      	ldr	r3, [pc, #84]	; (8008a54 <USB_DoPing+0x74>)
 80089fe:	4013      	ands	r3, r2
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	0151      	lsls	r1, r2, #5
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	440a      	add	r2, r1
 8008a08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a10:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a28:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a30:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	015a      	lsls	r2, r3, #5
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	4413      	add	r3, r2
 8008a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a3e:	461a      	mov	r2, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	1ff80000 	.word	0x1ff80000

08008a58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff f911 	bl	8007c94 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a72:	2110      	movs	r1, #16
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7ff f96b 	bl	8007d50 <USB_FlushTxFifo>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7ff f997 	bl	8007db8 <USB_FlushRxFifo>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008a94:	2300      	movs	r3, #0
 8008a96:	61bb      	str	r3, [r7, #24]
 8008a98:	e01f      	b.n	8008ada <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ab0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ab8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ac0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ace:	461a      	mov	r2, r3
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	61bb      	str	r3, [r7, #24]
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	2b0f      	cmp	r3, #15
 8008ade:	d9dc      	bls.n	8008a9a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	61bb      	str	r3, [r7, #24]
 8008ae4:	e034      	b.n	8008b50 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008afc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b0c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3301      	adds	r3, #1
 8008b24:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b2c:	d80c      	bhi.n	8008b48 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b44:	d0ec      	beq.n	8008b20 <USB_StopHost+0xc8>
 8008b46:	e000      	b.n	8008b4a <USB_StopHost+0xf2>
        break;
 8008b48:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	61bb      	str	r3, [r7, #24]
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	2b0f      	cmp	r3, #15
 8008b54:	d9c7      	bls.n	8008ae6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b62:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b6a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7ff f880 	bl	8007c72 <USB_EnableGlobalInt>

  return ret;
 8008b72:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3720      	adds	r7, #32
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008b7c:	b590      	push	{r4, r7, lr}
 8008b7e:	b089      	sub	sp, #36	; 0x24
 8008b80:	af04      	add	r7, sp, #16
 8008b82:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008b84:	2301      	movs	r3, #1
 8008b86:	2202      	movs	r2, #2
 8008b88:	2102      	movs	r1, #2
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fc66 	bl	800945c <USBH_FindInterface>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	2bff      	cmp	r3, #255	; 0xff
 8008b98:	d002      	beq.n	8008ba0 <USBH_CDC_InterfaceInit+0x24>
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d901      	bls.n	8008ba4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e13d      	b.n	8008e20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fc3b 	bl	8009424 <USBH_SelectInterface>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e131      	b.n	8008e20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008bc2:	2050      	movs	r0, #80	; 0x50
 8008bc4:	f002 fd26 	bl	800b614 <malloc>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008bdc:	2302      	movs	r3, #2
 8008bde:	e11f      	b.n	8008e20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008be0:	2250      	movs	r2, #80	; 0x50
 8008be2:	2100      	movs	r1, #0
 8008be4:	68b8      	ldr	r0, [r7, #8]
 8008be6:	f002 fdd1 	bl	800b78c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	211a      	movs	r1, #26
 8008bf0:	fb01 f303 	mul.w	r3, r1, r3
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	b25b      	sxtb	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	da15      	bge.n	8008c2e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	211a      	movs	r1, #26
 8008c08:	fb01 f303 	mul.w	r3, r1, r3
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008c12:	781a      	ldrb	r2, [r3, #0]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	211a      	movs	r1, #26
 8008c1e:	fb01 f303 	mul.w	r3, r1, r3
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008c28:	881a      	ldrh	r2, [r3, #0]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f001 ff2e 	bl	800aa96 <USBH_AllocPipe>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	7819      	ldrb	r1, [r3, #0]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	7858      	ldrb	r0, [r3, #1]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	8952      	ldrh	r2, [r2, #10]
 8008c5a:	9202      	str	r2, [sp, #8]
 8008c5c:	2203      	movs	r2, #3
 8008c5e:	9201      	str	r2, [sp, #4]
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	4623      	mov	r3, r4
 8008c64:	4602      	mov	r2, r0
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 fee6 	bl	800aa38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2200      	movs	r2, #0
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f002 fc49 	bl	800b50c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	210a      	movs	r1, #10
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fbeb 	bl	800945c <USBH_FindInterface>
 8008c86:	4603      	mov	r3, r0
 8008c88:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	2bff      	cmp	r3, #255	; 0xff
 8008c8e:	d002      	beq.n	8008c96 <USBH_CDC_InterfaceInit+0x11a>
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d901      	bls.n	8008c9a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008c96:	2302      	movs	r3, #2
 8008c98:	e0c2      	b.n	8008e20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	211a      	movs	r1, #26
 8008ca0:	fb01 f303 	mul.w	r3, r1, r3
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	b25b      	sxtb	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	da16      	bge.n	8008ce0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	211a      	movs	r1, #26
 8008cb8:	fb01 f303 	mul.w	r3, r1, r3
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008cc2:	781a      	ldrb	r2, [r3, #0]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	211a      	movs	r1, #26
 8008cce:	fb01 f303 	mul.w	r3, r1, r3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008cd8:	881a      	ldrh	r2, [r3, #0]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	835a      	strh	r2, [r3, #26]
 8008cde:	e015      	b.n	8008d0c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	211a      	movs	r1, #26
 8008ce6:	fb01 f303 	mul.w	r3, r1, r3
 8008cea:	4413      	add	r3, r2
 8008cec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008cf0:	781a      	ldrb	r2, [r3, #0]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	211a      	movs	r1, #26
 8008cfc:	fb01 f303 	mul.w	r3, r1, r3
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008d06:	881a      	ldrh	r2, [r3, #0]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	211a      	movs	r1, #26
 8008d12:	fb01 f303 	mul.w	r3, r1, r3
 8008d16:	4413      	add	r3, r2
 8008d18:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	b25b      	sxtb	r3, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	da16      	bge.n	8008d52 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	211a      	movs	r1, #26
 8008d2a:	fb01 f303 	mul.w	r3, r1, r3
 8008d2e:	4413      	add	r3, r2
 8008d30:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008d34:	781a      	ldrb	r2, [r3, #0]
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	211a      	movs	r1, #26
 8008d40:	fb01 f303 	mul.w	r3, r1, r3
 8008d44:	4413      	add	r3, r2
 8008d46:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008d4a:	881a      	ldrh	r2, [r3, #0]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	835a      	strh	r2, [r3, #26]
 8008d50:	e015      	b.n	8008d7e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	211a      	movs	r1, #26
 8008d58:	fb01 f303 	mul.w	r3, r1, r3
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008d62:	781a      	ldrb	r2, [r3, #0]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	211a      	movs	r1, #26
 8008d6e:	fb01 f303 	mul.w	r3, r1, r3
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008d78:	881a      	ldrh	r2, [r3, #0]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	7b9b      	ldrb	r3, [r3, #14]
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f001 fe86 	bl	800aa96 <USBH_AllocPipe>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	7bdb      	ldrb	r3, [r3, #15]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 fe7c 	bl	800aa96 <USBH_AllocPipe>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	461a      	mov	r2, r3
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	7b59      	ldrb	r1, [r3, #13]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	7b98      	ldrb	r0, [r3, #14]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	8b12      	ldrh	r2, [r2, #24]
 8008dbe:	9202      	str	r2, [sp, #8]
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	9201      	str	r2, [sp, #4]
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	4623      	mov	r3, r4
 8008dc8:	4602      	mov	r2, r0
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 fe34 	bl	800aa38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	7b19      	ldrb	r1, [r3, #12]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	7bd8      	ldrb	r0, [r3, #15]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	8b52      	ldrh	r2, [r2, #26]
 8008de8:	9202      	str	r2, [sp, #8]
 8008dea:	2202      	movs	r2, #2
 8008dec:	9201      	str	r2, [sp, #4]
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	4623      	mov	r3, r4
 8008df2:	4602      	mov	r2, r0
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f001 fe1f 	bl	800aa38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	7b5b      	ldrb	r3, [r3, #13]
 8008e06:	2200      	movs	r2, #0
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f002 fb7e 	bl	800b50c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	7b1b      	ldrb	r3, [r3, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f002 fb77 	bl	800b50c <USBH_LL_SetToggle>

  return USBH_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd90      	pop	{r4, r7, pc}

08008e28 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00e      	beq.n	8008e60 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f001 fe14 	bl	800aa76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f001 fe3f 	bl	800aad8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	7b1b      	ldrb	r3, [r3, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00e      	beq.n	8008e86 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	7b1b      	ldrb	r3, [r3, #12]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f001 fe01 	bl	800aa76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	7b1b      	ldrb	r3, [r3, #12]
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f001 fe2c 	bl	800aad8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	7b5b      	ldrb	r3, [r3, #13]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00e      	beq.n	8008eac <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	7b5b      	ldrb	r3, [r3, #13]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 fdee 	bl	800aa76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	7b5b      	ldrb	r3, [r3, #13]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 fe19 	bl	800aad8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00b      	beq.n	8008ed0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f002 fbaf 	bl	800b624 <free>
    phost->pActiveClass->pData = 0U;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ecc:	2200      	movs	r2, #0
 8008ece:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3340      	adds	r3, #64	; 0x40
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f8b1 	bl	800905a <GetLineCoding>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008efc:	7afb      	ldrb	r3, [r7, #11]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d105      	bne.n	8008f0e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f08:	2102      	movs	r1, #2
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008f0e:	7afb      	ldrb	r3, [r7, #11]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f20:	2301      	movs	r3, #1
 8008f22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	d877      	bhi.n	800902c <USBH_CDC_Process+0x114>
 8008f3c:	a201      	add	r2, pc, #4	; (adr r2, 8008f44 <USBH_CDC_Process+0x2c>)
 8008f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f42:	bf00      	nop
 8008f44:	08008f59 	.word	0x08008f59
 8008f48:	08008f5f 	.word	0x08008f5f
 8008f4c:	08008f8f 	.word	0x08008f8f
 8008f50:	08009003 	.word	0x08009003
 8008f54:	08009011 	.word	0x08009011
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f5c:	e06d      	b.n	800903a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f897 	bl	8009098 <SetLineCoding>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d104      	bne.n	8008f7e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008f7c:	e058      	b.n	8009030 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d055      	beq.n	8009030 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2204      	movs	r2, #4
 8008f88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008f8c:	e050      	b.n	8009030 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	3340      	adds	r3, #64	; 0x40
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f860 	bl	800905a <GetLineCoding>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d126      	bne.n	8008ff2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fb6:	791b      	ldrb	r3, [r3, #4]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d13b      	bne.n	8009034 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fc6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d133      	bne.n	8009034 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fd6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d12b      	bne.n	8009034 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fe4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d124      	bne.n	8009034 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f958 	bl	80092a0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008ff0:	e020      	b.n	8009034 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d01d      	beq.n	8009034 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2204      	movs	r2, #4
 8008ffc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009000:	e018      	b.n	8009034 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f867 	bl	80090d6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f8da 	bl	80091c2 <CDC_ProcessReception>
      break;
 800900e:	e014      	b.n	800903a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009010:	2100      	movs	r1, #0
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 ffef 	bl	8009ff6 <USBH_ClrFeature>
 8009018:	4603      	mov	r3, r0
 800901a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800901c:	7bbb      	ldrb	r3, [r7, #14]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10a      	bne.n	8009038 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800902a:	e005      	b.n	8009038 <USBH_CDC_Process+0x120>

    default:
      break;
 800902c:	bf00      	nop
 800902e:	e004      	b.n	800903a <USBH_CDC_Process+0x122>
      break;
 8009030:	bf00      	nop
 8009032:	e002      	b.n	800903a <USBH_CDC_Process+0x122>
      break;
 8009034:	bf00      	nop
 8009036:	e000      	b.n	800903a <USBH_CDC_Process+0x122>
      break;
 8009038:	bf00      	nop

  }

  return status;
 800903a:	7bfb      	ldrb	r3, [r7, #15]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b082      	sub	sp, #8
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	22a1      	movs	r2, #161	; 0xa1
 8009068:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2221      	movs	r2, #33	; 0x21
 800906e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2207      	movs	r2, #7
 8009080:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2207      	movs	r2, #7
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 fa83 	bl	800a594 <USBH_CtlReq>
 800908e:	4603      	mov	r3, r0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2221      	movs	r2, #33	; 0x21
 80090a6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2220      	movs	r2, #32
 80090ac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2207      	movs	r2, #7
 80090be:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	2207      	movs	r2, #7
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 fa64 	bl	800a594 <USBH_CtlReq>
 80090cc:	4603      	mov	r3, r0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b086      	sub	sp, #24
 80090da:	af02      	add	r7, sp, #8
 80090dc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090e8:	2300      	movs	r3, #0
 80090ea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d002      	beq.n	80090fc <CDC_ProcessTransmission+0x26>
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d023      	beq.n	8009142 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80090fa:	e05e      	b.n	80091ba <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	8b12      	ldrh	r2, [r2, #24]
 8009104:	4293      	cmp	r3, r2
 8009106:	d90b      	bls.n	8009120 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	69d9      	ldr	r1, [r3, #28]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8b1a      	ldrh	r2, [r3, #24]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	7b5b      	ldrb	r3, [r3, #13]
 8009114:	2001      	movs	r0, #1
 8009116:	9000      	str	r0, [sp, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f001 fc4a 	bl	800a9b2 <USBH_BulkSendData>
 800911e:	e00b      	b.n	8009138 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009128:	b29a      	uxth	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	7b5b      	ldrb	r3, [r3, #13]
 800912e:	2001      	movs	r0, #1
 8009130:	9000      	str	r0, [sp, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f001 fc3d 	bl	800a9b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2202      	movs	r2, #2
 800913c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009140:	e03b      	b.n	80091ba <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	7b5b      	ldrb	r3, [r3, #13]
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f002 f9b5 	bl	800b4b8 <USBH_LL_GetURBState>
 800914e:	4603      	mov	r3, r0
 8009150:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009152:	7afb      	ldrb	r3, [r7, #11]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d128      	bne.n	80091aa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	8b12      	ldrh	r2, [r2, #24]
 8009160:	4293      	cmp	r3, r2
 8009162:	d90e      	bls.n	8009182 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	8b12      	ldrh	r2, [r2, #24]
 800916c:	1a9a      	subs	r2, r3, r2
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	8b12      	ldrh	r2, [r2, #24]
 800917a:	441a      	add	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	61da      	str	r2, [r3, #28]
 8009180:	e002      	b.n	8009188 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	2b00      	cmp	r3, #0
 800918e:	d004      	beq.n	800919a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009198:	e00e      	b.n	80091b8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f868 	bl	8009278 <USBH_CDC_TransmitCallback>
      break;
 80091a8:	e006      	b.n	80091b8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80091aa:	7afb      	ldrb	r3, [r7, #11]
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d103      	bne.n	80091b8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80091b8:	bf00      	nop
  }
}
 80091ba:	bf00      	nop
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b086      	sub	sp, #24
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80091d4:	2300      	movs	r3, #0
 80091d6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80091de:	2b03      	cmp	r3, #3
 80091e0:	d002      	beq.n	80091e8 <CDC_ProcessReception+0x26>
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d00e      	beq.n	8009204 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80091e6:	e043      	b.n	8009270 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	6a19      	ldr	r1, [r3, #32]
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	8b5a      	ldrh	r2, [r3, #26]
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	7b1b      	ldrb	r3, [r3, #12]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f001 fc01 	bl	800a9fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2204      	movs	r2, #4
 80091fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009202:	e035      	b.n	8009270 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	7b1b      	ldrb	r3, [r3, #12]
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f002 f954 	bl	800b4b8 <USBH_LL_GetURBState>
 8009210:	4603      	mov	r3, r0
 8009212:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009214:	7cfb      	ldrb	r3, [r7, #19]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d129      	bne.n	800926e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	7b1b      	ldrb	r3, [r3, #12]
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f002 f8b7 	bl	800b394 <USBH_LL_GetLastXferSize>
 8009226:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	429a      	cmp	r2, r3
 8009230:	d016      	beq.n	8009260 <CDC_ProcessReception+0x9e>
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	8b5b      	ldrh	r3, [r3, #26]
 8009236:	461a      	mov	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4293      	cmp	r3, r2
 800923c:	d910      	bls.n	8009260 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	1ad2      	subs	r2, r2, r3
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	6a1a      	ldr	r2, [r3, #32]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	441a      	add	r2, r3
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2203      	movs	r2, #3
 800925a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800925e:	e006      	b.n	800926e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f80f 	bl	800928c <USBH_CDC_ReceiveCallback>
      break;
 800926e:	bf00      	nop
  }
}
 8009270:	bf00      	nop
 8009272:	3718      	adds	r7, #24
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	4613      	mov	r3, r2
 80092c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80092c8:	2302      	movs	r3, #2
 80092ca:	e029      	b.n	8009320 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	79fa      	ldrb	r2, [r7, #7]
 80092d0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 f81f 	bl	8009328 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d003      	beq.n	8009318 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f001 ff87 	bl	800b22c <USBH_LL_Init>

  return USBH_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009334:	2300      	movs	r3, #0
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	e009      	b.n	800934e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	33e0      	adds	r3, #224	; 0xe0
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4413      	add	r3, r2
 8009344:	2200      	movs	r2, #0
 8009346:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3301      	adds	r3, #1
 800934c:	60fb      	str	r3, [r7, #12]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b0f      	cmp	r3, #15
 8009352:	d9f2      	bls.n	800933a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009354:	2300      	movs	r3, #0
 8009356:	60fb      	str	r3, [r7, #12]
 8009358:	e009      	b.n	800936e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4413      	add	r3, r2
 8009360:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009364:	2200      	movs	r2, #0
 8009366:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3301      	adds	r3, #1
 800936c:	60fb      	str	r3, [r7, #12]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009374:	d3f1      	bcc.n	800935a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2240      	movs	r2, #64	; 0x40
 800939a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d016      	beq.n	8009412 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10e      	bne.n	800940c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80093f4:	1c59      	adds	r1, r3, #1
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	33de      	adds	r3, #222	; 0xde
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	73fb      	strb	r3, [r7, #15]
 800940a:	e004      	b.n	8009416 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800940c:	2302      	movs	r3, #2
 800940e:	73fb      	strb	r3, [r7, #15]
 8009410:	e001      	b.n	8009416 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009412:	2302      	movs	r3, #2
 8009414:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800943a:	78fa      	ldrb	r2, [r7, #3]
 800943c:	429a      	cmp	r2, r3
 800943e:	d204      	bcs.n	800944a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	78fa      	ldrb	r2, [r7, #3]
 8009444:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009448:	e001      	b.n	800944e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800944a:	2302      	movs	r3, #2
 800944c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800944e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800945c:	b480      	push	{r7}
 800945e:	b087      	sub	sp, #28
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	4608      	mov	r0, r1
 8009466:	4611      	mov	r1, r2
 8009468:	461a      	mov	r2, r3
 800946a:	4603      	mov	r3, r0
 800946c:	70fb      	strb	r3, [r7, #3]
 800946e:	460b      	mov	r3, r1
 8009470:	70bb      	strb	r3, [r7, #2]
 8009472:	4613      	mov	r3, r2
 8009474:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800947a:	2300      	movs	r3, #0
 800947c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009484:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009486:	e025      	b.n	80094d4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	221a      	movs	r2, #26
 800948c:	fb02 f303 	mul.w	r3, r2, r3
 8009490:	3308      	adds	r3, #8
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	4413      	add	r3, r2
 8009496:	3302      	adds	r3, #2
 8009498:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	795b      	ldrb	r3, [r3, #5]
 800949e:	78fa      	ldrb	r2, [r7, #3]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d002      	beq.n	80094aa <USBH_FindInterface+0x4e>
 80094a4:	78fb      	ldrb	r3, [r7, #3]
 80094a6:	2bff      	cmp	r3, #255	; 0xff
 80094a8:	d111      	bne.n	80094ce <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80094ae:	78ba      	ldrb	r2, [r7, #2]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d002      	beq.n	80094ba <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094b4:	78bb      	ldrb	r3, [r7, #2]
 80094b6:	2bff      	cmp	r3, #255	; 0xff
 80094b8:	d109      	bne.n	80094ce <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094be:	787a      	ldrb	r2, [r7, #1]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d002      	beq.n	80094ca <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80094c4:	787b      	ldrb	r3, [r7, #1]
 80094c6:	2bff      	cmp	r3, #255	; 0xff
 80094c8:	d101      	bne.n	80094ce <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	e006      	b.n	80094dc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
 80094d0:	3301      	adds	r3, #1
 80094d2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d9d6      	bls.n	8009488 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80094da:	23ff      	movs	r3, #255	; 0xff
}
 80094dc:	4618      	mov	r0, r3
 80094de:	371c      	adds	r7, #28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f001 fed7 	bl	800b2a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80094f6:	2101      	movs	r1, #1
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 fff0 	bl	800b4de <USBH_LL_DriverVBUS>

  return USBH_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b088      	sub	sp, #32
 800950c:	af04      	add	r7, sp, #16
 800950e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009510:	2302      	movs	r3, #2
 8009512:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b01      	cmp	r3, #1
 8009522:	d102      	bne.n	800952a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2203      	movs	r2, #3
 8009528:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	b2db      	uxtb	r3, r3
 8009530:	2b0b      	cmp	r3, #11
 8009532:	f200 81be 	bhi.w	80098b2 <USBH_Process+0x3aa>
 8009536:	a201      	add	r2, pc, #4	; (adr r2, 800953c <USBH_Process+0x34>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	0800956d 	.word	0x0800956d
 8009540:	0800959f 	.word	0x0800959f
 8009544:	08009607 	.word	0x08009607
 8009548:	0800984d 	.word	0x0800984d
 800954c:	080098b3 	.word	0x080098b3
 8009550:	080096ab 	.word	0x080096ab
 8009554:	080097f3 	.word	0x080097f3
 8009558:	080096e1 	.word	0x080096e1
 800955c:	08009701 	.word	0x08009701
 8009560:	08009721 	.word	0x08009721
 8009564:	08009765 	.word	0x08009765
 8009568:	08009835 	.word	0x08009835
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 819e 	beq.w	80098b6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009580:	20c8      	movs	r0, #200	; 0xc8
 8009582:	f001 fff3 	bl	800b56c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 fee9 	bl	800b35e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800959c:	e18b      	b.n	80098b6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d107      	bne.n	80095b8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2202      	movs	r2, #2
 80095b4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095b6:	e18d      	b.n	80098d4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80095be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095c2:	d914      	bls.n	80095ee <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80095ca:	3301      	adds	r3, #1
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80095da:	2b03      	cmp	r3, #3
 80095dc:	d903      	bls.n	80095e6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	220d      	movs	r2, #13
 80095e2:	701a      	strb	r2, [r3, #0]
      break;
 80095e4:	e176      	b.n	80098d4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	701a      	strb	r2, [r3, #0]
      break;
 80095ec:	e172      	b.n	80098d4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80095f4:	f103 020a 	add.w	r2, r3, #10
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80095fe:	200a      	movs	r0, #10
 8009600:	f001 ffb4 	bl	800b56c <USBH_Delay>
      break;
 8009604:	e166      	b.n	80098d4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800960c:	2b00      	cmp	r3, #0
 800960e:	d005      	beq.n	800961c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009616:	2104      	movs	r1, #4
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800961c:	2064      	movs	r0, #100	; 0x64
 800961e:	f001 ffa5 	bl	800b56c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f001 fe74 	bl	800b310 <USBH_LL_GetSpeed>
 8009628:	4603      	mov	r3, r0
 800962a:	461a      	mov	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2205      	movs	r2, #5
 8009636:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009638:	2100      	movs	r1, #0
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f001 fa2b 	bl	800aa96 <USBH_AllocPipe>
 8009640:	4603      	mov	r3, r0
 8009642:	461a      	mov	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009648:	2180      	movs	r1, #128	; 0x80
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 fa23 	bl	800aa96 <USBH_AllocPipe>
 8009650:	4603      	mov	r3, r0
 8009652:	461a      	mov	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	7919      	ldrb	r1, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800966c:	b292      	uxth	r2, r2
 800966e:	9202      	str	r2, [sp, #8]
 8009670:	2200      	movs	r2, #0
 8009672:	9201      	str	r2, [sp, #4]
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	4603      	mov	r3, r0
 8009678:	2280      	movs	r2, #128	; 0x80
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f001 f9dc 	bl	800aa38 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	7959      	ldrb	r1, [r3, #5]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009694:	b292      	uxth	r2, r2
 8009696:	9202      	str	r2, [sp, #8]
 8009698:	2200      	movs	r2, #0
 800969a:	9201      	str	r2, [sp, #4]
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	4603      	mov	r3, r0
 80096a0:	2200      	movs	r2, #0
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f001 f9c8 	bl	800aa38 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096a8:	e114      	b.n	80098d4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f918 	bl	80098e0 <USBH_HandleEnum>
 80096b0:	4603      	mov	r3, r0
 80096b2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f040 80fe 	bne.w	80098ba <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d103      	bne.n	80096d8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2208      	movs	r2, #8
 80096d4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80096d6:	e0f0      	b.n	80098ba <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2207      	movs	r2, #7
 80096dc:	701a      	strb	r2, [r3, #0]
      break;
 80096de:	e0ec      	b.n	80098ba <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 80e9 	beq.w	80098be <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096f2:	2101      	movs	r1, #1
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2208      	movs	r2, #8
 80096fc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80096fe:	e0de      	b.n	80098be <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009706:	b29b      	uxth	r3, r3
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fc2c 	bl	8009f68 <USBH_SetCfg>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	f040 80d5 	bne.w	80098c2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2209      	movs	r2, #9
 800971c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800971e:	e0d0      	b.n	80098c2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b00      	cmp	r3, #0
 800972c:	d016      	beq.n	800975c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800972e:	2101      	movs	r1, #1
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fc3c 	bl	8009fae <USBH_SetFeature>
 8009736:	4603      	mov	r3, r0
 8009738:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800973a:	7bbb      	ldrb	r3, [r7, #14]
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d103      	bne.n	800974a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	220a      	movs	r2, #10
 8009746:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009748:	e0bd      	b.n	80098c6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800974a:	7bbb      	ldrb	r3, [r7, #14]
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b03      	cmp	r3, #3
 8009750:	f040 80b9 	bne.w	80098c6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	220a      	movs	r2, #10
 8009758:	701a      	strb	r2, [r3, #0]
      break;
 800975a:	e0b4      	b.n	80098c6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	220a      	movs	r2, #10
 8009760:	701a      	strb	r2, [r3, #0]
      break;
 8009762:	e0b0      	b.n	80098c6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 80ad 	beq.w	80098ca <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009778:	2300      	movs	r3, #0
 800977a:	73fb      	strb	r3, [r7, #15]
 800977c:	e016      	b.n	80097ac <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800977e:	7bfa      	ldrb	r2, [r7, #15]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	32de      	adds	r2, #222	; 0xde
 8009784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009788:	791a      	ldrb	r2, [r3, #4]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009790:	429a      	cmp	r2, r3
 8009792:	d108      	bne.n	80097a6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009794:	7bfa      	ldrb	r2, [r7, #15]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	32de      	adds	r2, #222	; 0xde
 800979a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80097a4:	e005      	b.n	80097b2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	3301      	adds	r3, #1
 80097aa:	73fb      	strb	r3, [r7, #15]
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d0e5      	beq.n	800977e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d016      	beq.n	80097ea <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	4798      	blx	r3
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d109      	bne.n	80097e2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2206      	movs	r2, #6
 80097d2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097da:	2103      	movs	r1, #3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097e0:	e073      	b.n	80098ca <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	220d      	movs	r2, #13
 80097e6:	701a      	strb	r2, [r3, #0]
      break;
 80097e8:	e06f      	b.n	80098ca <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	220d      	movs	r2, #13
 80097ee:	701a      	strb	r2, [r3, #0]
      break;
 80097f0:	e06b      	b.n	80098ca <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d017      	beq.n	800982c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	4798      	blx	r3
 8009808:	4603      	mov	r3, r0
 800980a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800980c:	7bbb      	ldrb	r3, [r7, #14]
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	d103      	bne.n	800981c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	220b      	movs	r2, #11
 8009818:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800981a:	e058      	b.n	80098ce <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800981c:	7bbb      	ldrb	r3, [r7, #14]
 800981e:	b2db      	uxtb	r3, r3
 8009820:	2b02      	cmp	r3, #2
 8009822:	d154      	bne.n	80098ce <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	220d      	movs	r2, #13
 8009828:	701a      	strb	r2, [r3, #0]
      break;
 800982a:	e050      	b.n	80098ce <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	220d      	movs	r2, #13
 8009830:	701a      	strb	r2, [r3, #0]
      break;
 8009832:	e04c      	b.n	80098ce <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800983a:	2b00      	cmp	r3, #0
 800983c:	d049      	beq.n	80098d2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	4798      	blx	r3
      }
      break;
 800984a:	e042      	b.n	80098d2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff fd67 	bl	8009328 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009860:	2b00      	cmp	r3, #0
 8009862:	d009      	beq.n	8009878 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800987e:	2b00      	cmp	r3, #0
 8009880:	d005      	beq.n	800988e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009888:	2105      	movs	r1, #5
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b01      	cmp	r3, #1
 8009898:	d107      	bne.n	80098aa <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7ff fe20 	bl	80094e8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80098a8:	e014      	b.n	80098d4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f001 fcfa 	bl	800b2a4 <USBH_LL_Start>
      break;
 80098b0:	e010      	b.n	80098d4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80098b2:	bf00      	nop
 80098b4:	e00e      	b.n	80098d4 <USBH_Process+0x3cc>
      break;
 80098b6:	bf00      	nop
 80098b8:	e00c      	b.n	80098d4 <USBH_Process+0x3cc>
      break;
 80098ba:	bf00      	nop
 80098bc:	e00a      	b.n	80098d4 <USBH_Process+0x3cc>
    break;
 80098be:	bf00      	nop
 80098c0:	e008      	b.n	80098d4 <USBH_Process+0x3cc>
      break;
 80098c2:	bf00      	nop
 80098c4:	e006      	b.n	80098d4 <USBH_Process+0x3cc>
      break;
 80098c6:	bf00      	nop
 80098c8:	e004      	b.n	80098d4 <USBH_Process+0x3cc>
      break;
 80098ca:	bf00      	nop
 80098cc:	e002      	b.n	80098d4 <USBH_Process+0x3cc>
      break;
 80098ce:	bf00      	nop
 80098d0:	e000      	b.n	80098d4 <USBH_Process+0x3cc>
      break;
 80098d2:	bf00      	nop
  }
  return USBH_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop

080098e0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b088      	sub	sp, #32
 80098e4:	af04      	add	r7, sp, #16
 80098e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80098e8:	2301      	movs	r3, #1
 80098ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80098ec:	2301      	movs	r3, #1
 80098ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	785b      	ldrb	r3, [r3, #1]
 80098f4:	2b07      	cmp	r3, #7
 80098f6:	f200 81c1 	bhi.w	8009c7c <USBH_HandleEnum+0x39c>
 80098fa:	a201      	add	r2, pc, #4	; (adr r2, 8009900 <USBH_HandleEnum+0x20>)
 80098fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009900:	08009921 	.word	0x08009921
 8009904:	080099df 	.word	0x080099df
 8009908:	08009a49 	.word	0x08009a49
 800990c:	08009ad7 	.word	0x08009ad7
 8009910:	08009b41 	.word	0x08009b41
 8009914:	08009bb1 	.word	0x08009bb1
 8009918:	08009bf7 	.word	0x08009bf7
 800991c:	08009c3d 	.word	0x08009c3d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009920:	2108      	movs	r1, #8
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fa50 	bl	8009dc8 <USBH_Get_DevDesc>
 8009928:	4603      	mov	r3, r0
 800992a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800992c:	7bbb      	ldrb	r3, [r7, #14]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d130      	bne.n	8009994 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	7919      	ldrb	r1, [r3, #4]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009956:	b292      	uxth	r2, r2
 8009958:	9202      	str	r2, [sp, #8]
 800995a:	2200      	movs	r2, #0
 800995c:	9201      	str	r2, [sp, #4]
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	4603      	mov	r3, r0
 8009962:	2280      	movs	r2, #128	; 0x80
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f001 f867 	bl	800aa38 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	7959      	ldrb	r1, [r3, #5]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800997e:	b292      	uxth	r2, r2
 8009980:	9202      	str	r2, [sp, #8]
 8009982:	2200      	movs	r2, #0
 8009984:	9201      	str	r2, [sp, #4]
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	4603      	mov	r3, r0
 800998a:	2200      	movs	r2, #0
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f001 f853 	bl	800aa38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009992:	e175      	b.n	8009c80 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009994:	7bbb      	ldrb	r3, [r7, #14]
 8009996:	2b03      	cmp	r3, #3
 8009998:	f040 8172 	bne.w	8009c80 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099a2:	3301      	adds	r3, #1
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099b2:	2b03      	cmp	r3, #3
 80099b4:	d903      	bls.n	80099be <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	220d      	movs	r2, #13
 80099ba:	701a      	strb	r2, [r3, #0]
      break;
 80099bc:	e160      	b.n	8009c80 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	795b      	ldrb	r3, [r3, #5]
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 f887 	bl	800aad8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	791b      	ldrb	r3, [r3, #4]
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f001 f881 	bl	800aad8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	701a      	strb	r2, [r3, #0]
      break;
 80099dc:	e150      	b.n	8009c80 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80099de:	2112      	movs	r1, #18
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f9f1 	bl	8009dc8 <USBH_Get_DevDesc>
 80099e6:	4603      	mov	r3, r0
 80099e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099ea:	7bbb      	ldrb	r3, [r7, #14]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d103      	bne.n	80099f8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2202      	movs	r2, #2
 80099f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099f6:	e145      	b.n	8009c84 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	f040 8142 	bne.w	8009c84 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a06:	3301      	adds	r3, #1
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	d903      	bls.n	8009a22 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	220d      	movs	r2, #13
 8009a1e:	701a      	strb	r2, [r3, #0]
      break;
 8009a20:	e130      	b.n	8009c84 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	795b      	ldrb	r3, [r3, #5]
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f001 f855 	bl	800aad8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	791b      	ldrb	r3, [r3, #4]
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f001 f84f 	bl	800aad8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	701a      	strb	r2, [r3, #0]
      break;
 8009a46:	e11d      	b.n	8009c84 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009a48:	2101      	movs	r1, #1
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fa68 	bl	8009f20 <USBH_SetAddress>
 8009a50:	4603      	mov	r3, r0
 8009a52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a54:	7bbb      	ldrb	r3, [r7, #14]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d132      	bne.n	8009ac0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009a5a:	2002      	movs	r0, #2
 8009a5c:	f001 fd86 	bl	800b56c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2203      	movs	r2, #3
 8009a6c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	7919      	ldrb	r1, [r3, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a82:	b292      	uxth	r2, r2
 8009a84:	9202      	str	r2, [sp, #8]
 8009a86:	2200      	movs	r2, #0
 8009a88:	9201      	str	r2, [sp, #4]
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2280      	movs	r2, #128	; 0x80
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 ffd1 	bl	800aa38 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	7959      	ldrb	r1, [r3, #5]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009aaa:	b292      	uxth	r2, r2
 8009aac:	9202      	str	r2, [sp, #8]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	9201      	str	r2, [sp, #4]
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 ffbd 	bl	800aa38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009abe:	e0e3      	b.n	8009c88 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	f040 80e0 	bne.w	8009c88 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	220d      	movs	r2, #13
 8009acc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	705a      	strb	r2, [r3, #1]
      break;
 8009ad4:	e0d8      	b.n	8009c88 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009ad6:	2109      	movs	r1, #9
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f99d 	bl	8009e18 <USBH_Get_CfgDesc>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d103      	bne.n	8009af0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2204      	movs	r2, #4
 8009aec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009aee:	e0cd      	b.n	8009c8c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	f040 80ca 	bne.w	8009c8c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009afe:	3301      	adds	r3, #1
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d903      	bls.n	8009b1a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	220d      	movs	r2, #13
 8009b16:	701a      	strb	r2, [r3, #0]
      break;
 8009b18:	e0b8      	b.n	8009c8c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	795b      	ldrb	r3, [r3, #5]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 ffd9 	bl	800aad8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	791b      	ldrb	r3, [r3, #4]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 ffd3 	bl	800aad8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	701a      	strb	r2, [r3, #0]
      break;
 8009b3e:	e0a5      	b.n	8009c8c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f965 	bl	8009e18 <USBH_Get_CfgDesc>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d103      	bne.n	8009b60 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2205      	movs	r2, #5
 8009b5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b5e:	e097      	b.n	8009c90 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	f040 8094 	bne.w	8009c90 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b6e:	3301      	adds	r3, #1
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d903      	bls.n	8009b8a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	220d      	movs	r2, #13
 8009b86:	701a      	strb	r2, [r3, #0]
      break;
 8009b88:	e082      	b.n	8009c90 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	795b      	ldrb	r3, [r3, #5]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 ffa1 	bl	800aad8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	791b      	ldrb	r3, [r3, #4]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 ff9b 	bl	800aad8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	701a      	strb	r2, [r3, #0]
      break;
 8009bae:	e06f      	b.n	8009c90 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d019      	beq.n	8009bee <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009bc6:	23ff      	movs	r3, #255	; 0xff
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f949 	bl	8009e60 <USBH_Get_StringDesc>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009bd2:	7bbb      	ldrb	r3, [r7, #14]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d103      	bne.n	8009be0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2206      	movs	r2, #6
 8009bdc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009bde:	e059      	b.n	8009c94 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d156      	bne.n	8009c94 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2206      	movs	r2, #6
 8009bea:	705a      	strb	r2, [r3, #1]
      break;
 8009bec:	e052      	b.n	8009c94 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2206      	movs	r2, #6
 8009bf2:	705a      	strb	r2, [r3, #1]
      break;
 8009bf4:	e04e      	b.n	8009c94 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d019      	beq.n	8009c34 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c0c:	23ff      	movs	r3, #255	; 0xff
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f926 	bl	8009e60 <USBH_Get_StringDesc>
 8009c14:	4603      	mov	r3, r0
 8009c16:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d103      	bne.n	8009c26 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2207      	movs	r2, #7
 8009c22:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c24:	e038      	b.n	8009c98 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d135      	bne.n	8009c98 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2207      	movs	r2, #7
 8009c30:	705a      	strb	r2, [r3, #1]
      break;
 8009c32:	e031      	b.n	8009c98 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2207      	movs	r2, #7
 8009c38:	705a      	strb	r2, [r3, #1]
      break;
 8009c3a:	e02d      	b.n	8009c98 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d017      	beq.n	8009c76 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c52:	23ff      	movs	r3, #255	; 0xff
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f903 	bl	8009e60 <USBH_Get_StringDesc>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c5e:	7bbb      	ldrb	r3, [r7, #14]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009c68:	e018      	b.n	8009c9c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d115      	bne.n	8009c9c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	73fb      	strb	r3, [r7, #15]
      break;
 8009c74:	e012      	b.n	8009c9c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	73fb      	strb	r3, [r7, #15]
      break;
 8009c7a:	e00f      	b.n	8009c9c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009c7c:	bf00      	nop
 8009c7e:	e00e      	b.n	8009c9e <USBH_HandleEnum+0x3be>
      break;
 8009c80:	bf00      	nop
 8009c82:	e00c      	b.n	8009c9e <USBH_HandleEnum+0x3be>
      break;
 8009c84:	bf00      	nop
 8009c86:	e00a      	b.n	8009c9e <USBH_HandleEnum+0x3be>
      break;
 8009c88:	bf00      	nop
 8009c8a:	e008      	b.n	8009c9e <USBH_HandleEnum+0x3be>
      break;
 8009c8c:	bf00      	nop
 8009c8e:	e006      	b.n	8009c9e <USBH_HandleEnum+0x3be>
      break;
 8009c90:	bf00      	nop
 8009c92:	e004      	b.n	8009c9e <USBH_HandleEnum+0x3be>
      break;
 8009c94:	bf00      	nop
 8009c96:	e002      	b.n	8009c9e <USBH_HandleEnum+0x3be>
      break;
 8009c98:	bf00      	nop
 8009c9a:	e000      	b.n	8009c9e <USBH_HandleEnum+0x3be>
      break;
 8009c9c:	bf00      	nop
  }
  return Status;
 8009c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009cba:	bf00      	nop
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f804 	bl	8009cea <USBH_HandleSof>
}
 8009ce2:	bf00      	nop
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b082      	sub	sp, #8
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b0b      	cmp	r3, #11
 8009cfa:	d10a      	bne.n	8009d12 <USBH_HandleSof+0x28>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d005      	beq.n	8009d12 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	4798      	blx	r3
  }
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009d2a:	bf00      	nop
}
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b083      	sub	sp, #12
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009d46:	bf00      	nop
}
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009d52:	b480      	push	{r7}
 8009d54:	b083      	sub	sp, #12
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 fa9a 	bl	800b2da <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	791b      	ldrb	r3, [r3, #4]
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fe93 	bl	800aad8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	795b      	ldrb	r3, [r3, #5]
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fe8d 	bl	800aad8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af02      	add	r7, sp, #8
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009dda:	78fb      	ldrb	r3, [r7, #3]
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	4613      	mov	r3, r2
 8009de2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009de6:	2100      	movs	r1, #0
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f864 	bl	8009eb6 <USBH_GetDescriptor>
 8009dee:	4603      	mov	r3, r0
 8009df0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10a      	bne.n	8009e0e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e04:	78fa      	ldrb	r2, [r7, #3]
 8009e06:	b292      	uxth	r2, r2
 8009e08:	4619      	mov	r1, r3
 8009e0a:	f000 f919 	bl	800a040 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af02      	add	r7, sp, #8
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	331c      	adds	r3, #28
 8009e28:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009e2a:	887b      	ldrh	r3, [r7, #2]
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e34:	2100      	movs	r1, #0
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f83d 	bl	8009eb6 <USBH_GetDescriptor>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d107      	bne.n	8009e56 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009e46:	887b      	ldrh	r3, [r7, #2]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	68b9      	ldr	r1, [r7, #8]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f989 	bl	800a164 <USBH_ParseCfgDesc>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af02      	add	r7, sp, #8
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	607a      	str	r2, [r7, #4]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	72fb      	strb	r3, [r7, #11]
 8009e70:	4613      	mov	r3, r2
 8009e72:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009e74:	7afb      	ldrb	r3, [r7, #11]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009e7c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009e84:	893b      	ldrh	r3, [r7, #8]
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f000 f812 	bl	8009eb6 <USBH_GetDescriptor>
 8009e92:	4603      	mov	r3, r0
 8009e94:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009e96:	7dfb      	ldrb	r3, [r7, #23]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d107      	bne.n	8009eac <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009ea2:	893a      	ldrh	r2, [r7, #8]
 8009ea4:	6879      	ldr	r1, [r7, #4]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 fb26 	bl	800a4f8 <USBH_ParseStringDesc>
  }

  return status;
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3718      	adds	r7, #24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	607b      	str	r3, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	72fb      	strb	r3, [r7, #11]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	789b      	ldrb	r3, [r3, #2]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d11c      	bne.n	8009f0a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009ed0:	7afb      	ldrb	r3, [r7, #11]
 8009ed2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2206      	movs	r2, #6
 8009ee0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	893a      	ldrh	r2, [r7, #8]
 8009ee6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009ee8:	893b      	ldrh	r3, [r7, #8]
 8009eea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ef2:	d104      	bne.n	8009efe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f240 4209 	movw	r2, #1033	; 0x409
 8009efa:	829a      	strh	r2, [r3, #20]
 8009efc:	e002      	b.n	8009f04 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	8b3a      	ldrh	r2, [r7, #24]
 8009f08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009f0a:	8b3b      	ldrh	r3, [r7, #24]
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	6879      	ldr	r1, [r7, #4]
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 fb3f 	bl	800a594 <USBH_CtlReq>
 8009f16:	4603      	mov	r3, r0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	789b      	ldrb	r3, [r3, #2]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d10f      	bne.n	8009f54 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2205      	movs	r2, #5
 8009f3e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009f40:	78fb      	ldrb	r3, [r7, #3]
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f54:	2200      	movs	r2, #0
 8009f56:	2100      	movs	r1, #0
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fb1b 	bl	800a594 <USBH_CtlReq>
 8009f5e:	4603      	mov	r3, r0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	789b      	ldrb	r3, [r3, #2]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d10e      	bne.n	8009f9a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2209      	movs	r2, #9
 8009f86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	887a      	ldrh	r2, [r7, #2]
 8009f8c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 faf8 	bl	800a594 <USBH_CtlReq>
 8009fa4:	4603      	mov	r3, r0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	789b      	ldrb	r3, [r3, #2]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d10f      	bne.n	8009fe2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2203      	movs	r2, #3
 8009fcc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009fce:	78fb      	ldrb	r3, [r7, #3]
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fad4 	bl	800a594 <USBH_CtlReq>
 8009fec:	4603      	mov	r3, r0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	460b      	mov	r3, r1
 800a000:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	789b      	ldrb	r3, [r3, #2]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d10f      	bne.n	800a02a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2202      	movs	r2, #2
 800a00e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a01c:	78fb      	ldrb	r3, [r7, #3]
 800a01e:	b29a      	uxth	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a02a:	2200      	movs	r2, #0
 800a02c:	2100      	movs	r1, #0
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fab0 	bl	800a594 <USBH_CtlReq>
 800a034:	4603      	mov	r3, r0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
	...

0800a040 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	4613      	mov	r3, r2
 800a04c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	781a      	ldrb	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	785a      	ldrb	r2, [r3, #1]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	3302      	adds	r3, #2
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	b29a      	uxth	r2, r3
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	3303      	adds	r3, #3
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	021b      	lsls	r3, r3, #8
 800a070:	b29b      	uxth	r3, r3
 800a072:	4313      	orrs	r3, r2
 800a074:	b29a      	uxth	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	791a      	ldrb	r2, [r3, #4]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	795a      	ldrb	r2, [r3, #5]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	799a      	ldrb	r2, [r3, #6]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	79da      	ldrb	r2, [r3, #7]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	79db      	ldrb	r3, [r3, #7]
 800a09e:	2b20      	cmp	r3, #32
 800a0a0:	dc0f      	bgt.n	800a0c2 <USBH_ParseDevDesc+0x82>
 800a0a2:	2b08      	cmp	r3, #8
 800a0a4:	db14      	blt.n	800a0d0 <USBH_ParseDevDesc+0x90>
 800a0a6:	3b08      	subs	r3, #8
 800a0a8:	4a2d      	ldr	r2, [pc, #180]	; (800a160 <USBH_ParseDevDesc+0x120>)
 800a0aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	bf14      	ite	ne
 800a0b6:	2301      	movne	r3, #1
 800a0b8:	2300      	moveq	r3, #0
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d102      	bne.n	800a0c6 <USBH_ParseDevDesc+0x86>
 800a0c0:	e006      	b.n	800a0d0 <USBH_ParseDevDesc+0x90>
 800a0c2:	2b40      	cmp	r3, #64	; 0x40
 800a0c4:	d104      	bne.n	800a0d0 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	79da      	ldrb	r2, [r3, #7]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	71da      	strb	r2, [r3, #7]
      break;
 800a0ce:	e003      	b.n	800a0d8 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2240      	movs	r2, #64	; 0x40
 800a0d4:	71da      	strb	r2, [r3, #7]
      break;
 800a0d6:	bf00      	nop
  }

  if (length > 8U)
 800a0d8:	88fb      	ldrh	r3, [r7, #6]
 800a0da:	2b08      	cmp	r3, #8
 800a0dc:	d939      	bls.n	800a152 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	3308      	adds	r3, #8
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	3309      	adds	r3, #9
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	021b      	lsls	r3, r3, #8
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	330a      	adds	r3, #10
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	b29a      	uxth	r2, r3
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	330b      	adds	r3, #11
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	021b      	lsls	r3, r3, #8
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	4313      	orrs	r3, r2
 800a110:	b29a      	uxth	r2, r3
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	330c      	adds	r3, #12
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	330d      	adds	r3, #13
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	b29b      	uxth	r3, r3
 800a126:	021b      	lsls	r3, r3, #8
 800a128:	b29b      	uxth	r3, r3
 800a12a:	4313      	orrs	r3, r2
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	7b9a      	ldrb	r2, [r3, #14]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	7bda      	ldrb	r2, [r3, #15]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	7c1a      	ldrb	r2, [r3, #16]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	7c5a      	ldrb	r2, [r3, #17]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	745a      	strb	r2, [r3, #17]
  }
}
 800a152:	bf00      	nop
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	01000101 	.word	0x01000101

0800a164 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08c      	sub	sp, #48	; 0x30
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	4613      	mov	r3, r2
 800a170:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a178:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a184:	2300      	movs	r3, #0
 800a186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	781a      	ldrb	r2, [r3, #0]
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	785a      	ldrb	r2, [r3, #1]
 800a1a0:	6a3b      	ldr	r3, [r7, #32]
 800a1a2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	3302      	adds	r3, #2
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	3303      	adds	r3, #3
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	021b      	lsls	r3, r3, #8
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1c0:	bf28      	it	cs
 800a1c2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	791a      	ldrb	r2, [r3, #4]
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	795a      	ldrb	r2, [r3, #5]
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	799a      	ldrb	r2, [r3, #6]
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	79da      	ldrb	r2, [r3, #7]
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	7a1a      	ldrb	r2, [r3, #8]
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	2b09      	cmp	r3, #9
 800a1fa:	d002      	beq.n	800a202 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	2209      	movs	r2, #9
 800a200:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a202:	88fb      	ldrh	r3, [r7, #6]
 800a204:	2b09      	cmp	r3, #9
 800a206:	f240 809d 	bls.w	800a344 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a20a:	2309      	movs	r3, #9
 800a20c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a20e:	2300      	movs	r3, #0
 800a210:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a212:	e081      	b.n	800a318 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a214:	f107 0316 	add.w	r3, r7, #22
 800a218:	4619      	mov	r1, r3
 800a21a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a21c:	f000 f99f 	bl	800a55e <USBH_GetNextDesc>
 800a220:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a224:	785b      	ldrb	r3, [r3, #1]
 800a226:	2b04      	cmp	r3, #4
 800a228:	d176      	bne.n	800a318 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	2b09      	cmp	r3, #9
 800a230:	d002      	beq.n	800a238 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a234:	2209      	movs	r2, #9
 800a236:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a23c:	221a      	movs	r2, #26
 800a23e:	fb02 f303 	mul.w	r3, r2, r3
 800a242:	3308      	adds	r3, #8
 800a244:	6a3a      	ldr	r2, [r7, #32]
 800a246:	4413      	add	r3, r2
 800a248:	3302      	adds	r3, #2
 800a24a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a24c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a24e:	69f8      	ldr	r0, [r7, #28]
 800a250:	f000 f87e 	bl	800a350 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a25e:	e043      	b.n	800a2e8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a260:	f107 0316 	add.w	r3, r7, #22
 800a264:	4619      	mov	r1, r3
 800a266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a268:	f000 f979 	bl	800a55e <USBH_GetNextDesc>
 800a26c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a270:	785b      	ldrb	r3, [r3, #1]
 800a272:	2b05      	cmp	r3, #5
 800a274:	d138      	bne.n	800a2e8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	795b      	ldrb	r3, [r3, #5]
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d10f      	bne.n	800a29e <USBH_ParseCfgDesc+0x13a>
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	799b      	ldrb	r3, [r3, #6]
 800a282:	2b02      	cmp	r3, #2
 800a284:	d10b      	bne.n	800a29e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	79db      	ldrb	r3, [r3, #7]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10f      	bne.n	800a2ae <USBH_ParseCfgDesc+0x14a>
 800a28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	2b09      	cmp	r3, #9
 800a294:	d00b      	beq.n	800a2ae <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a298:	2209      	movs	r2, #9
 800a29a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a29c:	e007      	b.n	800a2ae <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	2b07      	cmp	r3, #7
 800a2a4:	d004      	beq.n	800a2b0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a8:	2207      	movs	r2, #7
 800a2aa:	701a      	strb	r2, [r3, #0]
 800a2ac:	e000      	b.n	800a2b0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a2ae:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a2b8:	3201      	adds	r2, #1
 800a2ba:	00d2      	lsls	r2, r2, #3
 800a2bc:	211a      	movs	r1, #26
 800a2be:	fb01 f303 	mul.w	r3, r1, r3
 800a2c2:	4413      	add	r3, r2
 800a2c4:	3308      	adds	r3, #8
 800a2c6:	6a3a      	ldr	r2, [r7, #32]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a2ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2d0:	69b9      	ldr	r1, [r7, #24]
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 f86b 	bl	800a3ae <USBH_ParseEPDesc>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a2de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	791b      	ldrb	r3, [r3, #4]
 800a2ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d204      	bcs.n	800a2fe <USBH_ParseCfgDesc+0x19a>
 800a2f4:	6a3b      	ldr	r3, [r7, #32]
 800a2f6:	885a      	ldrh	r2, [r3, #2]
 800a2f8:	8afb      	ldrh	r3, [r7, #22]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d8b0      	bhi.n	800a260 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	791b      	ldrb	r3, [r3, #4]
 800a302:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a306:	429a      	cmp	r2, r3
 800a308:	d201      	bcs.n	800a30e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e01c      	b.n	800a348 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a30e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a312:	3301      	adds	r3, #1
 800a314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d805      	bhi.n	800a32c <USBH_ParseCfgDesc+0x1c8>
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	885a      	ldrh	r2, [r3, #2]
 800a324:	8afb      	ldrh	r3, [r7, #22]
 800a326:	429a      	cmp	r2, r3
 800a328:	f63f af74 	bhi.w	800a214 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	791b      	ldrb	r3, [r3, #4]
 800a330:	2b02      	cmp	r3, #2
 800a332:	bf28      	it	cs
 800a334:	2302      	movcs	r3, #2
 800a336:	b2db      	uxtb	r3, r3
 800a338:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d201      	bcs.n	800a344 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a340:	2303      	movs	r3, #3
 800a342:	e001      	b.n	800a348 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a344:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3730      	adds	r7, #48	; 0x30
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	781a      	ldrb	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	785a      	ldrb	r2, [r3, #1]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	789a      	ldrb	r2, [r3, #2]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	78da      	ldrb	r2, [r3, #3]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	791a      	ldrb	r2, [r3, #4]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	795a      	ldrb	r2, [r3, #5]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	799a      	ldrb	r2, [r3, #6]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	79da      	ldrb	r2, [r3, #7]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	7a1a      	ldrb	r2, [r3, #8]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	721a      	strb	r2, [r3, #8]
}
 800a3a2:	bf00      	nop
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b087      	sub	sp, #28
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	60f8      	str	r0, [r7, #12]
 800a3b6:	60b9      	str	r1, [r7, #8]
 800a3b8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	781a      	ldrb	r2, [r3, #0]
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	785a      	ldrb	r2, [r3, #1]
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	789a      	ldrb	r2, [r3, #2]
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	78da      	ldrb	r2, [r3, #3]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3305      	adds	r3, #5
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	021b      	lsls	r3, r3, #8
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	799a      	ldrb	r2, [r3, #6]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	889b      	ldrh	r3, [r3, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d102      	bne.n	800a410 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a40a:	2303      	movs	r3, #3
 800a40c:	75fb      	strb	r3, [r7, #23]
 800a40e:	e033      	b.n	800a478 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	889b      	ldrh	r3, [r3, #4]
 800a414:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a418:	f023 0307 	bic.w	r3, r3, #7
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	889b      	ldrh	r3, [r3, #4]
 800a426:	b21a      	sxth	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3304      	adds	r3, #4
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	b299      	uxth	r1, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3305      	adds	r3, #5
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	b29b      	uxth	r3, r3
 800a438:	021b      	lsls	r3, r3, #8
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	430b      	orrs	r3, r1
 800a43e:	b29b      	uxth	r3, r3
 800a440:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a444:	2b00      	cmp	r3, #0
 800a446:	d110      	bne.n	800a46a <USBH_ParseEPDesc+0xbc>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	3304      	adds	r3, #4
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	b299      	uxth	r1, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3305      	adds	r3, #5
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	b29b      	uxth	r3, r3
 800a458:	021b      	lsls	r3, r3, #8
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	430b      	orrs	r3, r1
 800a45e:	b29b      	uxth	r3, r3
 800a460:	b21b      	sxth	r3, r3
 800a462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a466:	b21b      	sxth	r3, r3
 800a468:	e001      	b.n	800a46e <USBH_ParseEPDesc+0xc0>
 800a46a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a46e:	4313      	orrs	r3, r2
 800a470:	b21b      	sxth	r3, r3
 800a472:	b29a      	uxth	r2, r3
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d116      	bne.n	800a4b0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	78db      	ldrb	r3, [r3, #3]
 800a486:	f003 0303 	and.w	r3, r3, #3
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d005      	beq.n	800a49a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	78db      	ldrb	r3, [r3, #3]
 800a492:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a496:	2b03      	cmp	r3, #3
 800a498:	d127      	bne.n	800a4ea <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	799b      	ldrb	r3, [r3, #6]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <USBH_ParseEPDesc+0xfc>
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	799b      	ldrb	r3, [r3, #6]
 800a4a6:	2b10      	cmp	r3, #16
 800a4a8:	d91f      	bls.n	800a4ea <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	75fb      	strb	r3, [r7, #23]
 800a4ae:	e01c      	b.n	800a4ea <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	78db      	ldrb	r3, [r3, #3]
 800a4b4:	f003 0303 	and.w	r3, r3, #3
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d10a      	bne.n	800a4d2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	799b      	ldrb	r3, [r3, #6]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d003      	beq.n	800a4cc <USBH_ParseEPDesc+0x11e>
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	799b      	ldrb	r3, [r3, #6]
 800a4c8:	2b10      	cmp	r3, #16
 800a4ca:	d90e      	bls.n	800a4ea <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	75fb      	strb	r3, [r7, #23]
 800a4d0:	e00b      	b.n	800a4ea <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	78db      	ldrb	r3, [r3, #3]
 800a4d6:	f003 0303 	and.w	r3, r3, #3
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	d105      	bne.n	800a4ea <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	799b      	ldrb	r3, [r3, #6]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	371c      	adds	r7, #28
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	4613      	mov	r3, r2
 800a504:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3301      	adds	r3, #1
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b03      	cmp	r3, #3
 800a50e:	d120      	bne.n	800a552 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	1e9a      	subs	r2, r3, #2
 800a516:	88fb      	ldrh	r3, [r7, #6]
 800a518:	4293      	cmp	r3, r2
 800a51a:	bf28      	it	cs
 800a51c:	4613      	movcs	r3, r2
 800a51e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	3302      	adds	r3, #2
 800a524:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a526:	2300      	movs	r3, #0
 800a528:	82fb      	strh	r3, [r7, #22]
 800a52a:	e00b      	b.n	800a544 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a52c:	8afb      	ldrh	r3, [r7, #22]
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	4413      	add	r3, r2
 800a532:	781a      	ldrb	r2, [r3, #0]
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	3301      	adds	r3, #1
 800a53c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a53e:	8afb      	ldrh	r3, [r7, #22]
 800a540:	3302      	adds	r3, #2
 800a542:	82fb      	strh	r3, [r7, #22]
 800a544:	8afa      	ldrh	r2, [r7, #22]
 800a546:	8abb      	ldrh	r3, [r7, #20]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d3ef      	bcc.n	800a52c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2200      	movs	r2, #0
 800a550:	701a      	strb	r2, [r3, #0]
  }
}
 800a552:	bf00      	nop
 800a554:	371c      	adds	r7, #28
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a55e:	b480      	push	{r7}
 800a560:	b085      	sub	sp, #20
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	881a      	ldrh	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	b29b      	uxth	r3, r3
 800a572:	4413      	add	r3, r2
 800a574:	b29a      	uxth	r2, r3
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4413      	add	r3, r2
 800a584:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a586:	68fb      	ldr	r3, [r7, #12]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	789b      	ldrb	r3, [r3, #2]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d002      	beq.n	800a5b4 <USBH_CtlReq+0x20>
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d00f      	beq.n	800a5d2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a5b2:	e027      	b.n	800a604 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	88fa      	ldrh	r2, [r7, #6]
 800a5be:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a5d0:	e018      	b.n	800a604 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f000 f81c 	bl	800a610 <USBH_HandleControl>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a5dc:	7dfb      	ldrb	r3, [r7, #23]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d002      	beq.n	800a5e8 <USBH_CtlReq+0x54>
 800a5e2:	7dfb      	ldrb	r3, [r7, #23]
 800a5e4:	2b03      	cmp	r3, #3
 800a5e6:	d106      	bne.n	800a5f6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	761a      	strb	r2, [r3, #24]
      break;
 800a5f4:	e005      	b.n	800a602 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d102      	bne.n	800a602 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2201      	movs	r2, #1
 800a600:	709a      	strb	r2, [r3, #2]
      break;
 800a602:	bf00      	nop
  }
  return status;
 800a604:	7dfb      	ldrb	r3, [r7, #23]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
	...

0800a610 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af02      	add	r7, sp, #8
 800a616:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a618:	2301      	movs	r3, #1
 800a61a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	7e1b      	ldrb	r3, [r3, #24]
 800a624:	3b01      	subs	r3, #1
 800a626:	2b0a      	cmp	r3, #10
 800a628:	f200 8156 	bhi.w	800a8d8 <USBH_HandleControl+0x2c8>
 800a62c:	a201      	add	r2, pc, #4	; (adr r2, 800a634 <USBH_HandleControl+0x24>)
 800a62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a632:	bf00      	nop
 800a634:	0800a661 	.word	0x0800a661
 800a638:	0800a67b 	.word	0x0800a67b
 800a63c:	0800a6e5 	.word	0x0800a6e5
 800a640:	0800a70b 	.word	0x0800a70b
 800a644:	0800a743 	.word	0x0800a743
 800a648:	0800a76d 	.word	0x0800a76d
 800a64c:	0800a7bf 	.word	0x0800a7bf
 800a650:	0800a7e1 	.word	0x0800a7e1
 800a654:	0800a81d 	.word	0x0800a81d
 800a658:	0800a843 	.word	0x0800a843
 800a65c:	0800a881 	.word	0x0800a881
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f103 0110 	add.w	r1, r3, #16
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	795b      	ldrb	r3, [r3, #5]
 800a66a:	461a      	mov	r2, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f943 	bl	800a8f8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2202      	movs	r2, #2
 800a676:	761a      	strb	r2, [r3, #24]
      break;
 800a678:	e139      	b.n	800a8ee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	795b      	ldrb	r3, [r3, #5]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 ff19 	bl	800b4b8 <USBH_LL_GetURBState>
 800a686:	4603      	mov	r3, r0
 800a688:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a68a:	7bbb      	ldrb	r3, [r7, #14]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d11e      	bne.n	800a6ce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	7c1b      	ldrb	r3, [r3, #16]
 800a694:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a698:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	8adb      	ldrh	r3, [r3, #22]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00a      	beq.n	800a6b8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a6a2:	7b7b      	ldrb	r3, [r7, #13]
 800a6a4:	2b80      	cmp	r3, #128	; 0x80
 800a6a6:	d103      	bne.n	800a6b0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2203      	movs	r2, #3
 800a6ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a6ae:	e115      	b.n	800a8dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2205      	movs	r2, #5
 800a6b4:	761a      	strb	r2, [r3, #24]
      break;
 800a6b6:	e111      	b.n	800a8dc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a6b8:	7b7b      	ldrb	r3, [r7, #13]
 800a6ba:	2b80      	cmp	r3, #128	; 0x80
 800a6bc:	d103      	bne.n	800a6c6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2209      	movs	r2, #9
 800a6c2:	761a      	strb	r2, [r3, #24]
      break;
 800a6c4:	e10a      	b.n	800a8dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2207      	movs	r2, #7
 800a6ca:	761a      	strb	r2, [r3, #24]
      break;
 800a6cc:	e106      	b.n	800a8dc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	2b04      	cmp	r3, #4
 800a6d2:	d003      	beq.n	800a6dc <USBH_HandleControl+0xcc>
 800a6d4:	7bbb      	ldrb	r3, [r7, #14]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	f040 8100 	bne.w	800a8dc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	220b      	movs	r2, #11
 800a6e0:	761a      	strb	r2, [r3, #24]
      break;
 800a6e2:	e0fb      	b.n	800a8dc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6899      	ldr	r1, [r3, #8]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	899a      	ldrh	r2, [r3, #12]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	791b      	ldrb	r3, [r3, #4]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f93a 	bl	800a976 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2204      	movs	r2, #4
 800a706:	761a      	strb	r2, [r3, #24]
      break;
 800a708:	e0f1      	b.n	800a8ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	791b      	ldrb	r3, [r3, #4]
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fed1 	bl	800b4b8 <USBH_LL_GetURBState>
 800a716:	4603      	mov	r3, r0
 800a718:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a71a:	7bbb      	ldrb	r3, [r7, #14]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d102      	bne.n	800a726 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2209      	movs	r2, #9
 800a724:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a726:	7bbb      	ldrb	r3, [r7, #14]
 800a728:	2b05      	cmp	r3, #5
 800a72a:	d102      	bne.n	800a732 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a72c:	2303      	movs	r3, #3
 800a72e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a730:	e0d6      	b.n	800a8e0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a732:	7bbb      	ldrb	r3, [r7, #14]
 800a734:	2b04      	cmp	r3, #4
 800a736:	f040 80d3 	bne.w	800a8e0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	220b      	movs	r2, #11
 800a73e:	761a      	strb	r2, [r3, #24]
      break;
 800a740:	e0ce      	b.n	800a8e0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6899      	ldr	r1, [r3, #8]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	899a      	ldrh	r2, [r3, #12]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	795b      	ldrb	r3, [r3, #5]
 800a74e:	2001      	movs	r0, #1
 800a750:	9000      	str	r0, [sp, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f8ea 	bl	800a92c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a75e:	b29a      	uxth	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2206      	movs	r2, #6
 800a768:	761a      	strb	r2, [r3, #24]
      break;
 800a76a:	e0c0      	b.n	800a8ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	795b      	ldrb	r3, [r3, #5]
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fea0 	bl	800b4b8 <USBH_LL_GetURBState>
 800a778:	4603      	mov	r3, r0
 800a77a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d103      	bne.n	800a78a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2207      	movs	r2, #7
 800a786:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a788:	e0ac      	b.n	800a8e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	2b05      	cmp	r3, #5
 800a78e:	d105      	bne.n	800a79c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	220c      	movs	r2, #12
 800a794:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a796:	2303      	movs	r3, #3
 800a798:	73fb      	strb	r3, [r7, #15]
      break;
 800a79a:	e0a3      	b.n	800a8e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d103      	bne.n	800a7aa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2205      	movs	r2, #5
 800a7a6:	761a      	strb	r2, [r3, #24]
      break;
 800a7a8:	e09c      	b.n	800a8e4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a7aa:	7bbb      	ldrb	r3, [r7, #14]
 800a7ac:	2b04      	cmp	r3, #4
 800a7ae:	f040 8099 	bne.w	800a8e4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	220b      	movs	r2, #11
 800a7b6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a7bc:	e092      	b.n	800a8e4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	791b      	ldrb	r3, [r3, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f8d5 	bl	800a976 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2208      	movs	r2, #8
 800a7dc:	761a      	strb	r2, [r3, #24]

      break;
 800a7de:	e086      	b.n	800a8ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	791b      	ldrb	r3, [r3, #4]
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fe66 	bl	800b4b8 <USBH_LL_GetURBState>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a7f0:	7bbb      	ldrb	r3, [r7, #14]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d105      	bne.n	800a802 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	220d      	movs	r2, #13
 800a7fa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a800:	e072      	b.n	800a8e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	2b04      	cmp	r3, #4
 800a806:	d103      	bne.n	800a810 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	220b      	movs	r2, #11
 800a80c:	761a      	strb	r2, [r3, #24]
      break;
 800a80e:	e06b      	b.n	800a8e8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a810:	7bbb      	ldrb	r3, [r7, #14]
 800a812:	2b05      	cmp	r3, #5
 800a814:	d168      	bne.n	800a8e8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a816:	2303      	movs	r3, #3
 800a818:	73fb      	strb	r3, [r7, #15]
      break;
 800a81a:	e065      	b.n	800a8e8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	795b      	ldrb	r3, [r3, #5]
 800a820:	2201      	movs	r2, #1
 800a822:	9200      	str	r2, [sp, #0]
 800a824:	2200      	movs	r2, #0
 800a826:	2100      	movs	r1, #0
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f87f 	bl	800a92c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a834:	b29a      	uxth	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	220a      	movs	r2, #10
 800a83e:	761a      	strb	r2, [r3, #24]
      break;
 800a840:	e055      	b.n	800a8ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	795b      	ldrb	r3, [r3, #5]
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fe35 	bl	800b4b8 <USBH_LL_GetURBState>
 800a84e:	4603      	mov	r3, r0
 800a850:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a852:	7bbb      	ldrb	r3, [r7, #14]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d105      	bne.n	800a864 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	220d      	movs	r2, #13
 800a860:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a862:	e043      	b.n	800a8ec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a864:	7bbb      	ldrb	r3, [r7, #14]
 800a866:	2b02      	cmp	r3, #2
 800a868:	d103      	bne.n	800a872 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2209      	movs	r2, #9
 800a86e:	761a      	strb	r2, [r3, #24]
      break;
 800a870:	e03c      	b.n	800a8ec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a872:	7bbb      	ldrb	r3, [r7, #14]
 800a874:	2b04      	cmp	r3, #4
 800a876:	d139      	bne.n	800a8ec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	220b      	movs	r2, #11
 800a87c:	761a      	strb	r2, [r3, #24]
      break;
 800a87e:	e035      	b.n	800a8ec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	7e5b      	ldrb	r3, [r3, #25]
 800a884:	3301      	adds	r3, #1
 800a886:	b2da      	uxtb	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	765a      	strb	r2, [r3, #25]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	7e5b      	ldrb	r3, [r3, #25]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d806      	bhi.n	800a8a2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a8a0:	e025      	b.n	800a8ee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8a8:	2106      	movs	r1, #6
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	795b      	ldrb	r3, [r3, #5]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f90c 	bl	800aad8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	791b      	ldrb	r3, [r3, #4]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f906 	bl	800aad8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a8d2:	2302      	movs	r3, #2
 800a8d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d6:	e00a      	b.n	800a8ee <USBH_HandleControl+0x2de>

    default:
      break;
 800a8d8:	bf00      	nop
 800a8da:	e008      	b.n	800a8ee <USBH_HandleControl+0x2de>
      break;
 800a8dc:	bf00      	nop
 800a8de:	e006      	b.n	800a8ee <USBH_HandleControl+0x2de>
      break;
 800a8e0:	bf00      	nop
 800a8e2:	e004      	b.n	800a8ee <USBH_HandleControl+0x2de>
      break;
 800a8e4:	bf00      	nop
 800a8e6:	e002      	b.n	800a8ee <USBH_HandleControl+0x2de>
      break;
 800a8e8:	bf00      	nop
 800a8ea:	e000      	b.n	800a8ee <USBH_HandleControl+0x2de>
      break;
 800a8ec:	bf00      	nop
  }

  return status;
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b088      	sub	sp, #32
 800a8fc:	af04      	add	r7, sp, #16
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	4613      	mov	r3, r2
 800a904:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a906:	79f9      	ldrb	r1, [r7, #7]
 800a908:	2300      	movs	r3, #0
 800a90a:	9303      	str	r3, [sp, #12]
 800a90c:	2308      	movs	r3, #8
 800a90e:	9302      	str	r3, [sp, #8]
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	9301      	str	r3, [sp, #4]
 800a914:	2300      	movs	r3, #0
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	2300      	movs	r3, #0
 800a91a:	2200      	movs	r2, #0
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f000 fd9a 	bl	800b456 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b088      	sub	sp, #32
 800a930:	af04      	add	r7, sp, #16
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	4611      	mov	r1, r2
 800a938:	461a      	mov	r2, r3
 800a93a:	460b      	mov	r3, r1
 800a93c:	80fb      	strh	r3, [r7, #6]
 800a93e:	4613      	mov	r3, r2
 800a940:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a94c:	2300      	movs	r3, #0
 800a94e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a950:	7979      	ldrb	r1, [r7, #5]
 800a952:	7e3b      	ldrb	r3, [r7, #24]
 800a954:	9303      	str	r3, [sp, #12]
 800a956:	88fb      	ldrh	r3, [r7, #6]
 800a958:	9302      	str	r3, [sp, #8]
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	9301      	str	r3, [sp, #4]
 800a95e:	2301      	movs	r3, #1
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	2300      	movs	r3, #0
 800a964:	2200      	movs	r2, #0
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 fd75 	bl	800b456 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b088      	sub	sp, #32
 800a97a:	af04      	add	r7, sp, #16
 800a97c:	60f8      	str	r0, [r7, #12]
 800a97e:	60b9      	str	r1, [r7, #8]
 800a980:	4611      	mov	r1, r2
 800a982:	461a      	mov	r2, r3
 800a984:	460b      	mov	r3, r1
 800a986:	80fb      	strh	r3, [r7, #6]
 800a988:	4613      	mov	r3, r2
 800a98a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a98c:	7979      	ldrb	r1, [r7, #5]
 800a98e:	2300      	movs	r3, #0
 800a990:	9303      	str	r3, [sp, #12]
 800a992:	88fb      	ldrh	r3, [r7, #6]
 800a994:	9302      	str	r3, [sp, #8]
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	9301      	str	r3, [sp, #4]
 800a99a:	2301      	movs	r3, #1
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 fd57 	bl	800b456 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a9a8:	2300      	movs	r3, #0

}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b088      	sub	sp, #32
 800a9b6:	af04      	add	r7, sp, #16
 800a9b8:	60f8      	str	r0, [r7, #12]
 800a9ba:	60b9      	str	r1, [r7, #8]
 800a9bc:	4611      	mov	r1, r2
 800a9be:	461a      	mov	r2, r3
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	80fb      	strh	r3, [r7, #6]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9d6:	7979      	ldrb	r1, [r7, #5]
 800a9d8:	7e3b      	ldrb	r3, [r7, #24]
 800a9da:	9303      	str	r3, [sp, #12]
 800a9dc:	88fb      	ldrh	r3, [r7, #6]
 800a9de:	9302      	str	r3, [sp, #8]
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	9301      	str	r3, [sp, #4]
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f000 fd32 	bl	800b456 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b088      	sub	sp, #32
 800aa00:	af04      	add	r7, sp, #16
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	4611      	mov	r1, r2
 800aa08:	461a      	mov	r2, r3
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	80fb      	strh	r3, [r7, #6]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa12:	7979      	ldrb	r1, [r7, #5]
 800aa14:	2300      	movs	r3, #0
 800aa16:	9303      	str	r3, [sp, #12]
 800aa18:	88fb      	ldrh	r3, [r7, #6]
 800aa1a:	9302      	str	r3, [sp, #8]
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	2301      	movs	r3, #1
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	2302      	movs	r3, #2
 800aa26:	2201      	movs	r2, #1
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f000 fd14 	bl	800b456 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af04      	add	r7, sp, #16
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	4608      	mov	r0, r1
 800aa42:	4611      	mov	r1, r2
 800aa44:	461a      	mov	r2, r3
 800aa46:	4603      	mov	r3, r0
 800aa48:	70fb      	strb	r3, [r7, #3]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	70bb      	strb	r3, [r7, #2]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aa52:	7878      	ldrb	r0, [r7, #1]
 800aa54:	78ba      	ldrb	r2, [r7, #2]
 800aa56:	78f9      	ldrb	r1, [r7, #3]
 800aa58:	8b3b      	ldrh	r3, [r7, #24]
 800aa5a:	9302      	str	r3, [sp, #8]
 800aa5c:	7d3b      	ldrb	r3, [r7, #20]
 800aa5e:	9301      	str	r3, [sp, #4]
 800aa60:	7c3b      	ldrb	r3, [r7, #16]
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	4603      	mov	r3, r0
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fca7 	bl	800b3ba <USBH_LL_OpenPipe>

  return USBH_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800aa82:	78fb      	ldrb	r3, [r7, #3]
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fcc6 	bl	800b418 <USBH_LL_ClosePipe>

  return USBH_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b084      	sub	sp, #16
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f836 	bl	800ab14 <USBH_GetFreePipe>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800aaac:	89fb      	ldrh	r3, [r7, #14]
 800aaae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d00a      	beq.n	800aacc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800aab6:	78fa      	ldrb	r2, [r7, #3]
 800aab8:	89fb      	ldrh	r3, [r7, #14]
 800aaba:	f003 030f 	and.w	r3, r3, #15
 800aabe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	33e0      	adds	r3, #224	; 0xe0
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	440b      	add	r3, r1
 800aaca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aacc:	89fb      	ldrh	r3, [r7, #14]
 800aace:	b2db      	uxtb	r3, r3
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	460b      	mov	r3, r1
 800aae2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800aae4:	78fb      	ldrb	r3, [r7, #3]
 800aae6:	2b0f      	cmp	r3, #15
 800aae8:	d80d      	bhi.n	800ab06 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aaea:	78fb      	ldrb	r3, [r7, #3]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	33e0      	adds	r3, #224	; 0xe0
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	78fb      	ldrb	r3, [r7, #3]
 800aaf8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800aafc:	6879      	ldr	r1, [r7, #4]
 800aafe:	33e0      	adds	r3, #224	; 0xe0
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	440b      	add	r3, r1
 800ab04:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ab20:	2300      	movs	r3, #0
 800ab22:	73fb      	strb	r3, [r7, #15]
 800ab24:	e00f      	b.n	800ab46 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	33e0      	adds	r3, #224	; 0xe0
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4413      	add	r3, r2
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d102      	bne.n	800ab40 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ab3a:	7bfb      	ldrb	r3, [r7, #15]
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	e007      	b.n	800ab50 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	3301      	adds	r3, #1
 800ab44:	73fb      	strb	r3, [r7, #15]
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	2b0f      	cmp	r3, #15
 800ab4a:	d9ec      	bls.n	800ab26 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ab4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800ab60:	4814      	ldr	r0, [pc, #80]	; (800abb4 <I2Cx_Init+0x58>)
 800ab62:	f7fa f96f 	bl	8004e44 <HAL_I2C_GetState>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d121      	bne.n	800abb0 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800ab6c:	4b11      	ldr	r3, [pc, #68]	; (800abb4 <I2Cx_Init+0x58>)
 800ab6e:	4a12      	ldr	r2, [pc, #72]	; (800abb8 <I2Cx_Init+0x5c>)
 800ab70:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800ab72:	4b10      	ldr	r3, [pc, #64]	; (800abb4 <I2Cx_Init+0x58>)
 800ab74:	2243      	movs	r2, #67	; 0x43
 800ab76:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 800ab78:	4b0e      	ldr	r3, [pc, #56]	; (800abb4 <I2Cx_Init+0x58>)
 800ab7a:	4a10      	ldr	r2, [pc, #64]	; (800abbc <I2Cx_Init+0x60>)
 800ab7c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ab7e:	4b0d      	ldr	r3, [pc, #52]	; (800abb4 <I2Cx_Init+0x58>)
 800ab80:	2200      	movs	r2, #0
 800ab82:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ab84:	4b0b      	ldr	r3, [pc, #44]	; (800abb4 <I2Cx_Init+0x58>)
 800ab86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ab8a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800ab8c:	4b09      	ldr	r3, [pc, #36]	; (800abb4 <I2Cx_Init+0x58>)
 800ab8e:	2200      	movs	r2, #0
 800ab90:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800ab92:	4b08      	ldr	r3, [pc, #32]	; (800abb4 <I2Cx_Init+0x58>)
 800ab94:	2200      	movs	r2, #0
 800ab96:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800ab98:	4b06      	ldr	r3, [pc, #24]	; (800abb4 <I2Cx_Init+0x58>)
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800ab9e:	4b05      	ldr	r3, [pc, #20]	; (800abb4 <I2Cx_Init+0x58>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800aba4:	4803      	ldr	r0, [pc, #12]	; (800abb4 <I2Cx_Init+0x58>)
 800aba6:	f000 f86b 	bl	800ac80 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800abaa:	4802      	ldr	r0, [pc, #8]	; (800abb4 <I2Cx_Init+0x58>)
 800abac:	f7f9 fcb6 	bl	800451c <HAL_I2C_Init>
  }
}
 800abb0:	bf00      	nop
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	200004ec 	.word	0x200004ec
 800abb8:	40005400 	.word	0x40005400
 800abbc:	000186a0 	.word	0x000186a0

0800abc0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b088      	sub	sp, #32
 800abc4:	af04      	add	r7, sp, #16
 800abc6:	4603      	mov	r3, r0
 800abc8:	80fb      	strh	r3, [r7, #6]
 800abca:	460b      	mov	r3, r1
 800abcc:	717b      	strb	r3, [r7, #5]
 800abce:	4613      	mov	r3, r2
 800abd0:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abd2:	2300      	movs	r3, #0
 800abd4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800abd6:	797b      	ldrb	r3, [r7, #5]
 800abd8:	b29a      	uxth	r2, r3
 800abda:	4b0b      	ldr	r3, [pc, #44]	; (800ac08 <I2Cx_WriteData+0x48>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	88f9      	ldrh	r1, [r7, #6]
 800abe0:	9302      	str	r3, [sp, #8]
 800abe2:	2301      	movs	r3, #1
 800abe4:	9301      	str	r3, [sp, #4]
 800abe6:	1d3b      	adds	r3, r7, #4
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	2301      	movs	r3, #1
 800abec:	4807      	ldr	r0, [pc, #28]	; (800ac0c <I2Cx_WriteData+0x4c>)
 800abee:	f7f9 fe09 	bl	8004804 <HAL_I2C_Mem_Write>
 800abf2:	4603      	mov	r3, r0
 800abf4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800abfc:	f000 f834 	bl	800ac68 <I2Cx_Error>
  }
}
 800ac00:	bf00      	nop
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	200001f8 	.word	0x200001f8
 800ac0c:	200004ec 	.word	0x200004ec

0800ac10 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b088      	sub	sp, #32
 800ac14:	af04      	add	r7, sp, #16
 800ac16:	4603      	mov	r3, r0
 800ac18:	460a      	mov	r2, r1
 800ac1a:	80fb      	strh	r3, [r7, #6]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800ac28:	797b      	ldrb	r3, [r7, #5]
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	4b0c      	ldr	r3, [pc, #48]	; (800ac60 <I2Cx_ReadData+0x50>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	88f9      	ldrh	r1, [r7, #6]
 800ac32:	9302      	str	r3, [sp, #8]
 800ac34:	2301      	movs	r3, #1
 800ac36:	9301      	str	r3, [sp, #4]
 800ac38:	f107 030e 	add.w	r3, r7, #14
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	2301      	movs	r3, #1
 800ac40:	4808      	ldr	r0, [pc, #32]	; (800ac64 <I2Cx_ReadData+0x54>)
 800ac42:	f7f9 fed9 	bl	80049f8 <HAL_I2C_Mem_Read>
 800ac46:	4603      	mov	r3, r0
 800ac48:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d001      	beq.n	800ac54 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800ac50:	f000 f80a 	bl	800ac68 <I2Cx_Error>
  }
  return value;
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	200001f8 	.word	0x200001f8
 800ac64:	200004ec 	.word	0x200004ec

0800ac68 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 800ac6c:	4803      	ldr	r0, [pc, #12]	; (800ac7c <I2Cx_Error+0x14>)
 800ac6e:	f7f9 fd99 	bl	80047a4 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800ac72:	f7ff ff73 	bl	800ab5c <I2Cx_Init>
}
 800ac76:	bf00      	nop
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	200004ec 	.word	0x200004ec

0800ac80 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b08a      	sub	sp, #40	; 0x28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 800ac88:	2300      	movs	r3, #0
 800ac8a:	613b      	str	r3, [r7, #16]
 800ac8c:	4b25      	ldr	r3, [pc, #148]	; (800ad24 <I2Cx_MspInit+0xa4>)
 800ac8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac90:	4a24      	ldr	r2, [pc, #144]	; (800ad24 <I2Cx_MspInit+0xa4>)
 800ac92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac96:	6413      	str	r3, [r2, #64]	; 0x40
 800ac98:	4b22      	ldr	r3, [pc, #136]	; (800ad24 <I2Cx_MspInit+0xa4>)
 800ac9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aca0:	613b      	str	r3, [r7, #16]
 800aca2:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800aca4:	2300      	movs	r3, #0
 800aca6:	60fb      	str	r3, [r7, #12]
 800aca8:	4b1e      	ldr	r3, [pc, #120]	; (800ad24 <I2Cx_MspInit+0xa4>)
 800acaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acac:	4a1d      	ldr	r2, [pc, #116]	; (800ad24 <I2Cx_MspInit+0xa4>)
 800acae:	f043 0302 	orr.w	r3, r3, #2
 800acb2:	6313      	str	r3, [r2, #48]	; 0x30
 800acb4:	4b1b      	ldr	r3, [pc, #108]	; (800ad24 <I2Cx_MspInit+0xa4>)
 800acb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb8:	f003 0302 	and.w	r3, r3, #2
 800acbc:	60fb      	str	r3, [r7, #12]
 800acbe:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 800acc0:	f44f 7310 	mov.w	r3, #576	; 0x240
 800acc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800acc6:	2312      	movs	r3, #18
 800acc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800acca:	2300      	movs	r3, #0
 800accc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800acce:	2302      	movs	r3, #2
 800acd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800acd2:	2304      	movs	r3, #4
 800acd4:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800acd6:	f107 0314 	add.w	r3, r7, #20
 800acda:	4619      	mov	r1, r3
 800acdc:	4812      	ldr	r0, [pc, #72]	; (800ad28 <I2Cx_MspInit+0xa8>)
 800acde:	f7f7 fd5f 	bl	80027a0 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800ace2:	4b10      	ldr	r3, [pc, #64]	; (800ad24 <I2Cx_MspInit+0xa4>)
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	4a0f      	ldr	r2, [pc, #60]	; (800ad24 <I2Cx_MspInit+0xa4>)
 800ace8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800acec:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800acee:	4b0d      	ldr	r3, [pc, #52]	; (800ad24 <I2Cx_MspInit+0xa4>)
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	4a0c      	ldr	r2, [pc, #48]	; (800ad24 <I2Cx_MspInit+0xa4>)
 800acf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800acf8:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800acfa:	2200      	movs	r2, #0
 800acfc:	210f      	movs	r1, #15
 800acfe:	201f      	movs	r0, #31
 800ad00:	f7f7 fd17 	bl	8002732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800ad04:	201f      	movs	r0, #31
 800ad06:	f7f7 fd30 	bl	800276a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	210f      	movs	r1, #15
 800ad0e:	2020      	movs	r0, #32
 800ad10:	f7f7 fd0f 	bl	8002732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 800ad14:	2020      	movs	r0, #32
 800ad16:	f7f7 fd28 	bl	800276a <HAL_NVIC_EnableIRQ>
}
 800ad1a:	bf00      	nop
 800ad1c:	3728      	adds	r7, #40	; 0x28
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	40023800 	.word	0x40023800
 800ad28:	40020400 	.word	0x40020400

0800ad2c <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800ad32:	2300      	movs	r3, #0
 800ad34:	603b      	str	r3, [r7, #0]
 800ad36:	4b0f      	ldr	r3, [pc, #60]	; (800ad74 <COMPASSACCELERO_IO_Init+0x48>)
 800ad38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3a:	4a0e      	ldr	r2, [pc, #56]	; (800ad74 <COMPASSACCELERO_IO_Init+0x48>)
 800ad3c:	f043 0310 	orr.w	r3, r3, #16
 800ad40:	6313      	str	r3, [r2, #48]	; 0x30
 800ad42:	4b0c      	ldr	r3, [pc, #48]	; (800ad74 <COMPASSACCELERO_IO_Init+0x48>)
 800ad44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad46:	f003 0310 	and.w	r3, r3, #16
 800ad4a:	603b      	str	r3, [r7, #0]
 800ad4c:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800ad4e:	2304      	movs	r3, #4
 800ad50:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800ad52:	2300      	movs	r3, #0
 800ad54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800ad56:	2300      	movs	r3, #0
 800ad58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800ad5e:	1d3b      	adds	r3, r7, #4
 800ad60:	4619      	mov	r1, r3
 800ad62:	4805      	ldr	r0, [pc, #20]	; (800ad78 <COMPASSACCELERO_IO_Init+0x4c>)
 800ad64:	f7f7 fd1c 	bl	80027a0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800ad68:	f7ff fef8 	bl	800ab5c <I2Cx_Init>
}
 800ad6c:	bf00      	nop
 800ad6e:	3718      	adds	r7, #24
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	40023800 	.word	0x40023800
 800ad78:	40021000 	.word	0x40021000

0800ad7c <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800ad82:	2300      	movs	r3, #0
 800ad84:	603b      	str	r3, [r7, #0]
 800ad86:	4b13      	ldr	r3, [pc, #76]	; (800add4 <COMPASSACCELERO_IO_ITConfig+0x58>)
 800ad88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8a:	4a12      	ldr	r2, [pc, #72]	; (800add4 <COMPASSACCELERO_IO_ITConfig+0x58>)
 800ad8c:	f043 0310 	orr.w	r3, r3, #16
 800ad90:	6313      	str	r3, [r2, #48]	; 0x30
 800ad92:	4b10      	ldr	r3, [pc, #64]	; (800add4 <COMPASSACCELERO_IO_ITConfig+0x58>)
 800ad94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad96:	f003 0310 	and.w	r3, r3, #16
 800ad9a:	603b      	str	r3, [r7, #0]
 800ad9c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800ad9e:	2330      	movs	r3, #48	; 0x30
 800ada0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800ada2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800ada6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800ada8:	2302      	movs	r3, #2
 800adaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800adac:	2300      	movs	r3, #0
 800adae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800adb0:	1d3b      	adds	r3, r7, #4
 800adb2:	4619      	mov	r1, r3
 800adb4:	4808      	ldr	r0, [pc, #32]	; (800add8 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 800adb6:	f7f7 fcf3 	bl	80027a0 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 800adba:	2200      	movs	r2, #0
 800adbc:	210f      	movs	r1, #15
 800adbe:	200a      	movs	r0, #10
 800adc0:	f7f7 fcb7 	bl	8002732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 800adc4:	200a      	movs	r0, #10
 800adc6:	f7f7 fcd0 	bl	800276a <HAL_NVIC_EnableIRQ>
}
 800adca:	bf00      	nop
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	40023800 	.word	0x40023800
 800add8:	40021000 	.word	0x40021000

0800addc <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	4603      	mov	r3, r0
 800ade4:	80fb      	strh	r3, [r7, #6]
 800ade6:	460b      	mov	r3, r1
 800ade8:	717b      	strb	r3, [r7, #5]
 800adea:	4613      	mov	r3, r2
 800adec:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 800adee:	793a      	ldrb	r2, [r7, #4]
 800adf0:	7979      	ldrb	r1, [r7, #5]
 800adf2:	88fb      	ldrh	r3, [r7, #6]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7ff fee3 	bl	800abc0 <I2Cx_WriteData>
}
 800adfa:	bf00      	nop
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b082      	sub	sp, #8
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	4603      	mov	r3, r0
 800ae0a:	460a      	mov	r2, r1
 800ae0c:	80fb      	strh	r3, [r7, #6]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 800ae12:	797a      	ldrb	r2, [r7, #5]
 800ae14:	88fb      	ldrh	r3, [r7, #6]
 800ae16:	4611      	mov	r1, r2
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7ff fef9 	bl	800ac10 <I2Cx_ReadData>
 800ae1e:	4603      	mov	r3, r0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 800ae32:	2300      	movs	r3, #0
 800ae34:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 800ae36:	1d3b      	adds	r3, r7, #4
 800ae38:	2200      	movs	r2, #0
 800ae3a:	601a      	str	r2, [r3, #0]
 800ae3c:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800ae3e:	4b58      	ldr	r3, [pc, #352]	; (800afa0 <BSP_ACCELERO_Init+0x178>)
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	4798      	blx	r3
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b33      	cmp	r3, #51	; 0x33
 800ae48:	d14f      	bne.n	800aeea <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800ae4a:	4b56      	ldr	r3, [pc, #344]	; (800afa4 <BSP_ACCELERO_Init+0x17c>)
 800ae4c:	4a54      	ldr	r2, [pc, #336]	; (800afa0 <BSP_ACCELERO_Init+0x178>)
 800ae4e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 800ae50:	2300      	movs	r3, #0
 800ae52:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_200_HZ; // cambiar a 200Hz
 800ae54:	2360      	movs	r3, #96	; 0x60
 800ae56:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 800ae58:	2307      	movs	r3, #7
 800ae5a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 800ae60:	2300      	movs	r3, #0
 800ae62:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 800ae64:	2300      	movs	r3, #0
 800ae66:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 800ae68:	2308      	movs	r3, #8
 800ae6a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800ae6c:	7b3a      	ldrb	r2, [r7, #12]
 800ae6e:	7b7b      	ldrb	r3, [r7, #13]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 800ae74:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800ae76:	4313      	orrs	r3, r2
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	8abb      	ldrh	r3, [r7, #20]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800ae82:	7c3a      	ldrb	r2, [r7, #16]
 800ae84:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 800ae86:	4313      	orrs	r3, r2
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	7cbb      	ldrb	r3, [r7, #18]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	b2da      	uxtb	r2, r3
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800ae98:	b21a      	sxth	r2, r3
 800ae9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	b21b      	sxth	r3, r3
 800aea2:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800aea4:	4b3f      	ldr	r3, [pc, #252]	; (800afa4 <BSP_ACCELERO_Init+0x17c>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	8aba      	ldrh	r2, [r7, #20]
 800aeac:	4610      	mov	r0, r2
 800aeae:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 800aeb0:	2380      	movs	r3, #128	; 0x80
 800aeb2:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 800aeb4:	2310      	movs	r3, #16
 800aeb6:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 800aebc:	2300      	movs	r3, #0
 800aebe:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800aec0:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800aec2:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800aec4:	4313      	orrs	r3, r2
 800aec6:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 800aec8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800aeca:	4313      	orrs	r3, r2
 800aecc:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800aece:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800aed0:	4313      	orrs	r3, r2
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800aed6:	4b33      	ldr	r3, [pc, #204]	; (800afa4 <BSP_ACCELERO_Init+0x17c>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aedc:	8aba      	ldrh	r2, [r7, #20]
 800aede:	b2d2      	uxtb	r2, r2
 800aee0:	4610      	mov	r0, r2
 800aee2:	4798      	blx	r3

    ret = ACCELERO_OK;
 800aee4:	2300      	movs	r3, #0
 800aee6:	75fb      	strb	r3, [r7, #23]
 800aee8:	e054      	b.n	800af94 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800aeea:	4b2f      	ldr	r3, [pc, #188]	; (800afa8 <BSP_ACCELERO_Init+0x180>)
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	4798      	blx	r3
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b33      	cmp	r3, #51	; 0x33
 800aef4:	d14e      	bne.n	800af94 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 800aef6:	4b2b      	ldr	r3, [pc, #172]	; (800afa4 <BSP_ACCELERO_Init+0x17c>)
 800aef8:	4a2b      	ldr	r2, [pc, #172]	; (800afa8 <BSP_ACCELERO_Init+0x180>)
 800aefa:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 800aefc:	2300      	movs	r3, #0
 800aefe:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 800af00:	2340      	movs	r3, #64	; 0x40
 800af02:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 800af04:	2307      	movs	r3, #7
 800af06:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 800af08:	2300      	movs	r3, #0
 800af0a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 800af0c:	2300      	movs	r3, #0
 800af0e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 800af10:	2300      	movs	r3, #0
 800af12:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 800af14:	2308      	movs	r3, #8
 800af16:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800af18:	7b3a      	ldrb	r2, [r7, #12]
 800af1a:	7b7b      	ldrb	r3, [r7, #13]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 800af20:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800af22:	4313      	orrs	r3, r2
 800af24:	b2db      	uxtb	r3, r3
 800af26:	b29a      	uxth	r2, r3
 800af28:	8abb      	ldrh	r3, [r7, #20]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800af2e:	7c3a      	ldrb	r2, [r7, #16]
 800af30:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 800af32:	4313      	orrs	r3, r2
 800af34:	b2da      	uxtb	r2, r3
 800af36:	7cbb      	ldrb	r3, [r7, #18]
 800af38:	4313      	orrs	r3, r2
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	4313      	orrs	r3, r2
 800af40:	b2db      	uxtb	r3, r3
 800af42:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800af44:	b21a      	sxth	r2, r3
 800af46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	b21b      	sxth	r3, r3
 800af4e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800af50:	4b14      	ldr	r3, [pc, #80]	; (800afa4 <BSP_ACCELERO_Init+0x17c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	8aba      	ldrh	r2, [r7, #20]
 800af58:	4610      	mov	r0, r2
 800af5a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 800af5c:	2380      	movs	r3, #128	; 0x80
 800af5e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 800af60:	2310      	movs	r3, #16
 800af62:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 800af64:	2300      	movs	r3, #0
 800af66:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 800af68:	2300      	movs	r3, #0
 800af6a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800af6c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800af6e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800af70:	4313      	orrs	r3, r2
 800af72:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 800af74:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800af76:	4313      	orrs	r3, r2
 800af78:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800af7a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800af7c:	4313      	orrs	r3, r2
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800af82:	4b08      	ldr	r3, [pc, #32]	; (800afa4 <BSP_ACCELERO_Init+0x17c>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af88:	8aba      	ldrh	r2, [r7, #20]
 800af8a:	b2d2      	uxtb	r2, r2
 800af8c:	4610      	mov	r0, r2
 800af8e:	4798      	blx	r3

    ret = ACCELERO_OK;
 800af90:	2300      	movs	r3, #0
 800af92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800af94:	7dfb      	ldrb	r3, [r7, #23]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3718      	adds	r7, #24
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	20000034 	.word	0x20000034
 800afa4:	20000540 	.word	0x20000540
 800afa8:	20000000 	.word	0x20000000

0800afac <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 800afb8:	4b10      	ldr	r3, [pc, #64]	; (800affc <BSP_ACCELERO_GetXYZ+0x50>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d018      	beq.n	800aff4 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800afc2:	4b0e      	ldr	r3, [pc, #56]	; (800affc <BSP_ACCELERO_GetXYZ+0x50>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 800afcc:	4b0b      	ldr	r3, [pc, #44]	; (800affc <BSP_ACCELERO_GetXYZ+0x50>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a0b      	ldr	r2, [pc, #44]	; (800b000 <BSP_ACCELERO_GetXYZ+0x54>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d10e      	bne.n	800aff4 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	881b      	ldrh	r3, [r3, #0]
 800afda:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 800afe6:	89fb      	ldrh	r3, [r7, #14]
 800afe8:	425b      	negs	r3, r3
 800afea:	b29a      	uxth	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	3302      	adds	r3, #2
 800aff0:	b212      	sxth	r2, r2
 800aff2:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800aff4:	bf00      	nop
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20000540 	.word	0x20000540
 800b000:	20000034 	.word	0x20000034

0800b004 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b008:	2201      	movs	r2, #1
 800b00a:	490e      	ldr	r1, [pc, #56]	; (800b044 <MX_USB_HOST_Init+0x40>)
 800b00c:	480e      	ldr	r0, [pc, #56]	; (800b048 <MX_USB_HOST_Init+0x44>)
 800b00e:	f7fe f951 	bl	80092b4 <USBH_Init>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b018:	f7f6 feca 	bl	8001db0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b01c:	490b      	ldr	r1, [pc, #44]	; (800b04c <MX_USB_HOST_Init+0x48>)
 800b01e:	480a      	ldr	r0, [pc, #40]	; (800b048 <MX_USB_HOST_Init+0x44>)
 800b020:	f7fe f9d6 	bl	80093d0 <USBH_RegisterClass>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b02a:	f7f6 fec1 	bl	8001db0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b02e:	4806      	ldr	r0, [pc, #24]	; (800b048 <MX_USB_HOST_Init+0x44>)
 800b030:	f7fe fa5a 	bl	80094e8 <USBH_Start>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d001      	beq.n	800b03e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b03a:	f7f6 feb9 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b03e:	bf00      	nop
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	0800b065 	.word	0x0800b065
 800b048:	20000544 	.word	0x20000544
 800b04c:	200001d8 	.word	0x200001d8

0800b050 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b054:	4802      	ldr	r0, [pc, #8]	; (800b060 <MX_USB_HOST_Process+0x10>)
 800b056:	f7fe fa57 	bl	8009508 <USBH_Process>
}
 800b05a:	bf00      	nop
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	20000544 	.word	0x20000544

0800b064 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	460b      	mov	r3, r1
 800b06e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b070:	78fb      	ldrb	r3, [r7, #3]
 800b072:	3b01      	subs	r3, #1
 800b074:	2b04      	cmp	r3, #4
 800b076:	d819      	bhi.n	800b0ac <USBH_UserProcess+0x48>
 800b078:	a201      	add	r2, pc, #4	; (adr r2, 800b080 <USBH_UserProcess+0x1c>)
 800b07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07e:	bf00      	nop
 800b080:	0800b0ad 	.word	0x0800b0ad
 800b084:	0800b09d 	.word	0x0800b09d
 800b088:	0800b0ad 	.word	0x0800b0ad
 800b08c:	0800b0a5 	.word	0x0800b0a5
 800b090:	0800b095 	.word	0x0800b095
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b094:	4b09      	ldr	r3, [pc, #36]	; (800b0bc <USBH_UserProcess+0x58>)
 800b096:	2203      	movs	r2, #3
 800b098:	701a      	strb	r2, [r3, #0]
  break;
 800b09a:	e008      	b.n	800b0ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b09c:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <USBH_UserProcess+0x58>)
 800b09e:	2202      	movs	r2, #2
 800b0a0:	701a      	strb	r2, [r3, #0]
  break;
 800b0a2:	e004      	b.n	800b0ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b0a4:	4b05      	ldr	r3, [pc, #20]	; (800b0bc <USBH_UserProcess+0x58>)
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	701a      	strb	r2, [r3, #0]
  break;
 800b0aa:	e000      	b.n	800b0ae <USBH_UserProcess+0x4a>

  default:
  break;
 800b0ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b0ae:	bf00      	nop
 800b0b0:	370c      	adds	r7, #12
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	2000091c 	.word	0x2000091c

0800b0c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b08a      	sub	sp, #40	; 0x28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0c8:	f107 0314 	add.w	r3, r7, #20
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]
 800b0d0:	605a      	str	r2, [r3, #4]
 800b0d2:	609a      	str	r2, [r3, #8]
 800b0d4:	60da      	str	r2, [r3, #12]
 800b0d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0e0:	d147      	bne.n	800b172 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	613b      	str	r3, [r7, #16]
 800b0e6:	4b25      	ldr	r3, [pc, #148]	; (800b17c <HAL_HCD_MspInit+0xbc>)
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ea:	4a24      	ldr	r2, [pc, #144]	; (800b17c <HAL_HCD_MspInit+0xbc>)
 800b0ec:	f043 0301 	orr.w	r3, r3, #1
 800b0f0:	6313      	str	r3, [r2, #48]	; 0x30
 800b0f2:	4b22      	ldr	r3, [pc, #136]	; (800b17c <HAL_HCD_MspInit+0xbc>)
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	613b      	str	r3, [r7, #16]
 800b0fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b0fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b104:	2300      	movs	r3, #0
 800b106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b108:	2300      	movs	r3, #0
 800b10a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b10c:	f107 0314 	add.w	r3, r7, #20
 800b110:	4619      	mov	r1, r3
 800b112:	481b      	ldr	r0, [pc, #108]	; (800b180 <HAL_HCD_MspInit+0xc0>)
 800b114:	f7f7 fb44 	bl	80027a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b118:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b11c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b11e:	2302      	movs	r3, #2
 800b120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b122:	2300      	movs	r3, #0
 800b124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b126:	2303      	movs	r3, #3
 800b128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b12a:	230a      	movs	r3, #10
 800b12c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b12e:	f107 0314 	add.w	r3, r7, #20
 800b132:	4619      	mov	r1, r3
 800b134:	4812      	ldr	r0, [pc, #72]	; (800b180 <HAL_HCD_MspInit+0xc0>)
 800b136:	f7f7 fb33 	bl	80027a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b13a:	4b10      	ldr	r3, [pc, #64]	; (800b17c <HAL_HCD_MspInit+0xbc>)
 800b13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b13e:	4a0f      	ldr	r2, [pc, #60]	; (800b17c <HAL_HCD_MspInit+0xbc>)
 800b140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b144:	6353      	str	r3, [r2, #52]	; 0x34
 800b146:	2300      	movs	r3, #0
 800b148:	60fb      	str	r3, [r7, #12]
 800b14a:	4b0c      	ldr	r3, [pc, #48]	; (800b17c <HAL_HCD_MspInit+0xbc>)
 800b14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b14e:	4a0b      	ldr	r2, [pc, #44]	; (800b17c <HAL_HCD_MspInit+0xbc>)
 800b150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b154:	6453      	str	r3, [r2, #68]	; 0x44
 800b156:	4b09      	ldr	r3, [pc, #36]	; (800b17c <HAL_HCD_MspInit+0xbc>)
 800b158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b15a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b15e:	60fb      	str	r3, [r7, #12]
 800b160:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b162:	2200      	movs	r2, #0
 800b164:	2100      	movs	r1, #0
 800b166:	2043      	movs	r0, #67	; 0x43
 800b168:	f7f7 fae3 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b16c:	2043      	movs	r0, #67	; 0x43
 800b16e:	f7f7 fafc 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b172:	bf00      	nop
 800b174:	3728      	adds	r7, #40	; 0x28
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	40023800 	.word	0x40023800
 800b180:	40020000 	.word	0x40020000

0800b184 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b192:	4618      	mov	r0, r3
 800b194:	f7fe fd97 	bl	8009cc6 <USBH_LL_IncTimer>
}
 800b198:	bf00      	nop
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fe fdcf 	bl	8009d52 <USBH_LL_Connect>
}
 800b1b4:	bf00      	nop
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fe fdd8 	bl	8009d80 <USBH_LL_Disconnect>
}
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b202:	4618      	mov	r0, r3
 800b204:	f7fe fd89 	bl	8009d1a <USBH_LL_PortEnabled>
}
 800b208:	bf00      	nop
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fe fd89 	bl	8009d36 <USBH_LL_PortDisabled>
}
 800b224:	bf00      	nop
 800b226:	3708      	adds	r7, #8
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d12a      	bne.n	800b294 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b23e:	4a18      	ldr	r2, [pc, #96]	; (800b2a0 <USBH_LL_Init+0x74>)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a15      	ldr	r2, [pc, #84]	; (800b2a0 <USBH_LL_Init+0x74>)
 800b24a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b24e:	4b14      	ldr	r3, [pc, #80]	; (800b2a0 <USBH_LL_Init+0x74>)
 800b250:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b254:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b256:	4b12      	ldr	r3, [pc, #72]	; (800b2a0 <USBH_LL_Init+0x74>)
 800b258:	2208      	movs	r2, #8
 800b25a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b25c:	4b10      	ldr	r3, [pc, #64]	; (800b2a0 <USBH_LL_Init+0x74>)
 800b25e:	2201      	movs	r2, #1
 800b260:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b262:	4b0f      	ldr	r3, [pc, #60]	; (800b2a0 <USBH_LL_Init+0x74>)
 800b264:	2200      	movs	r2, #0
 800b266:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b268:	4b0d      	ldr	r3, [pc, #52]	; (800b2a0 <USBH_LL_Init+0x74>)
 800b26a:	2202      	movs	r2, #2
 800b26c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b26e:	4b0c      	ldr	r3, [pc, #48]	; (800b2a0 <USBH_LL_Init+0x74>)
 800b270:	2200      	movs	r2, #0
 800b272:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b274:	480a      	ldr	r0, [pc, #40]	; (800b2a0 <USBH_LL_Init+0x74>)
 800b276:	f7f7 fd47 	bl	8002d08 <HAL_HCD_Init>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b280:	f7f6 fd96 	bl	8001db0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b284:	4806      	ldr	r0, [pc, #24]	; (800b2a0 <USBH_LL_Init+0x74>)
 800b286:	f7f8 f92a 	bl	80034de <HAL_HCD_GetCurrentFrame>
 800b28a:	4603      	mov	r3, r0
 800b28c:	4619      	mov	r1, r3
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7fe fd0a 	bl	8009ca8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	20000920 	.word	0x20000920

0800b2a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7f8 f899 	bl	80033f2 <HAL_HCD_Start>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 f95c 	bl	800b584 <USBH_Get_USB_Status>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7f8 f8a1 	bl	8003438 <HAL_HCD_Stop>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f000 f941 	bl	800b584 <USBH_Get_USB_Status>
 800b302:	4603      	mov	r3, r0
 800b304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b306:	7bbb      	ldrb	r3, [r7, #14]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b318:	2301      	movs	r3, #1
 800b31a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b322:	4618      	mov	r0, r3
 800b324:	f7f8 f8e9 	bl	80034fa <HAL_HCD_GetCurrentSpeed>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d00c      	beq.n	800b348 <USBH_LL_GetSpeed+0x38>
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d80d      	bhi.n	800b34e <USBH_LL_GetSpeed+0x3e>
 800b332:	2b00      	cmp	r3, #0
 800b334:	d002      	beq.n	800b33c <USBH_LL_GetSpeed+0x2c>
 800b336:	2b01      	cmp	r3, #1
 800b338:	d003      	beq.n	800b342 <USBH_LL_GetSpeed+0x32>
 800b33a:	e008      	b.n	800b34e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b33c:	2300      	movs	r3, #0
 800b33e:	73fb      	strb	r3, [r7, #15]
    break;
 800b340:	e008      	b.n	800b354 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b342:	2301      	movs	r3, #1
 800b344:	73fb      	strb	r3, [r7, #15]
    break;
 800b346:	e005      	b.n	800b354 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b348:	2302      	movs	r3, #2
 800b34a:	73fb      	strb	r3, [r7, #15]
    break;
 800b34c:	e002      	b.n	800b354 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b34e:	2301      	movs	r3, #1
 800b350:	73fb      	strb	r3, [r7, #15]
    break;
 800b352:	bf00      	nop
  }
  return  speed;
 800b354:	7bfb      	ldrb	r3, [r7, #15]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b084      	sub	sp, #16
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b374:	4618      	mov	r0, r3
 800b376:	f7f8 f87c 	bl	8003472 <HAL_HCD_ResetPort>
 800b37a:	4603      	mov	r3, r0
 800b37c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b37e:	7bfb      	ldrb	r3, [r7, #15]
 800b380:	4618      	mov	r0, r3
 800b382:	f000 f8ff 	bl	800b584 <USBH_Get_USB_Status>
 800b386:	4603      	mov	r3, r0
 800b388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b38a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3a6:	78fa      	ldrb	r2, [r7, #3]
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7f8 f883 	bl	80034b6 <HAL_HCD_HC_GetXferCount>
 800b3b0:	4603      	mov	r3, r0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b3ba:	b590      	push	{r4, r7, lr}
 800b3bc:	b089      	sub	sp, #36	; 0x24
 800b3be:	af04      	add	r7, sp, #16
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	4608      	mov	r0, r1
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	70fb      	strb	r3, [r7, #3]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	70bb      	strb	r3, [r7, #2]
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b3e2:	787c      	ldrb	r4, [r7, #1]
 800b3e4:	78ba      	ldrb	r2, [r7, #2]
 800b3e6:	78f9      	ldrb	r1, [r7, #3]
 800b3e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3ea:	9302      	str	r3, [sp, #8]
 800b3ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b3f0:	9301      	str	r3, [sp, #4]
 800b3f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	4623      	mov	r3, r4
 800b3fa:	f7f7 fce7 	bl	8002dcc <HAL_HCD_HC_Init>
 800b3fe:	4603      	mov	r3, r0
 800b400:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b402:	7bfb      	ldrb	r3, [r7, #15]
 800b404:	4618      	mov	r0, r3
 800b406:	f000 f8bd 	bl	800b584 <USBH_Get_USB_Status>
 800b40a:	4603      	mov	r3, r0
 800b40c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b40e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3714      	adds	r7, #20
 800b414:	46bd      	mov	sp, r7
 800b416:	bd90      	pop	{r4, r7, pc}

0800b418 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	460b      	mov	r3, r1
 800b422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b424:	2300      	movs	r3, #0
 800b426:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b432:	78fa      	ldrb	r2, [r7, #3]
 800b434:	4611      	mov	r1, r2
 800b436:	4618      	mov	r0, r3
 800b438:	f7f7 fd57 	bl	8002eea <HAL_HCD_HC_Halt>
 800b43c:	4603      	mov	r3, r0
 800b43e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b440:	7bfb      	ldrb	r3, [r7, #15]
 800b442:	4618      	mov	r0, r3
 800b444:	f000 f89e 	bl	800b584 <USBH_Get_USB_Status>
 800b448:	4603      	mov	r3, r0
 800b44a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b456:	b590      	push	{r4, r7, lr}
 800b458:	b089      	sub	sp, #36	; 0x24
 800b45a:	af04      	add	r7, sp, #16
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	4608      	mov	r0, r1
 800b460:	4611      	mov	r1, r2
 800b462:	461a      	mov	r2, r3
 800b464:	4603      	mov	r3, r0
 800b466:	70fb      	strb	r3, [r7, #3]
 800b468:	460b      	mov	r3, r1
 800b46a:	70bb      	strb	r3, [r7, #2]
 800b46c:	4613      	mov	r3, r2
 800b46e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b470:	2300      	movs	r3, #0
 800b472:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b47e:	787c      	ldrb	r4, [r7, #1]
 800b480:	78ba      	ldrb	r2, [r7, #2]
 800b482:	78f9      	ldrb	r1, [r7, #3]
 800b484:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b488:	9303      	str	r3, [sp, #12]
 800b48a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b48c:	9302      	str	r3, [sp, #8]
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	9301      	str	r3, [sp, #4]
 800b492:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	4623      	mov	r3, r4
 800b49a:	f7f7 fd49 	bl	8002f30 <HAL_HCD_HC_SubmitRequest>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 f86d 	bl	800b584 <USBH_Get_USB_Status>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd90      	pop	{r4, r7, pc}

0800b4b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4ca:	78fa      	ldrb	r2, [r7, #3]
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7f7 ffdd 	bl	800348e <HAL_HCD_HC_GetURBState>
 800b4d4:	4603      	mov	r3, r0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b082      	sub	sp, #8
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d103      	bne.n	800b4fc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b4f4:	78fb      	ldrb	r3, [r7, #3]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 f870 	bl	800b5dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b4fc:	20c8      	movs	r0, #200	; 0xc8
 800b4fe:	f7f7 f819 	bl	8002534 <HAL_Delay>
  return USBH_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b085      	sub	sp, #20
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	460b      	mov	r3, r1
 800b516:	70fb      	strb	r3, [r7, #3]
 800b518:	4613      	mov	r3, r2
 800b51a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b522:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b524:	78fb      	ldrb	r3, [r7, #3]
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	212c      	movs	r1, #44	; 0x2c
 800b52a:	fb01 f303 	mul.w	r3, r1, r3
 800b52e:	4413      	add	r3, r2
 800b530:	333b      	adds	r3, #59	; 0x3b
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d009      	beq.n	800b54c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b538:	78fb      	ldrb	r3, [r7, #3]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	212c      	movs	r1, #44	; 0x2c
 800b53e:	fb01 f303 	mul.w	r3, r1, r3
 800b542:	4413      	add	r3, r2
 800b544:	3354      	adds	r3, #84	; 0x54
 800b546:	78ba      	ldrb	r2, [r7, #2]
 800b548:	701a      	strb	r2, [r3, #0]
 800b54a:	e008      	b.n	800b55e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b54c:	78fb      	ldrb	r3, [r7, #3]
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	212c      	movs	r1, #44	; 0x2c
 800b552:	fb01 f303 	mul.w	r3, r1, r3
 800b556:	4413      	add	r3, r2
 800b558:	3355      	adds	r3, #85	; 0x55
 800b55a:	78ba      	ldrb	r2, [r7, #2]
 800b55c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3714      	adds	r7, #20
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f7f6 ffdd 	bl	8002534 <HAL_Delay>
}
 800b57a:	bf00      	nop
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
	...

0800b584 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b592:	79fb      	ldrb	r3, [r7, #7]
 800b594:	2b03      	cmp	r3, #3
 800b596:	d817      	bhi.n	800b5c8 <USBH_Get_USB_Status+0x44>
 800b598:	a201      	add	r2, pc, #4	; (adr r2, 800b5a0 <USBH_Get_USB_Status+0x1c>)
 800b59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59e:	bf00      	nop
 800b5a0:	0800b5b1 	.word	0x0800b5b1
 800b5a4:	0800b5b7 	.word	0x0800b5b7
 800b5a8:	0800b5bd 	.word	0x0800b5bd
 800b5ac:	0800b5c3 	.word	0x0800b5c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5b4:	e00b      	b.n	800b5ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b5b6:	2302      	movs	r3, #2
 800b5b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ba:	e008      	b.n	800b5ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	73fb      	strb	r3, [r7, #15]
    break;
 800b5c0:	e005      	b.n	800b5ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b5c6:	e002      	b.n	800b5ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b5c8:	2302      	movs	r3, #2
 800b5ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b5cc:	bf00      	nop
  }
  return usb_status;
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3714      	adds	r7, #20
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b5e6:	79fb      	ldrb	r3, [r7, #7]
 800b5e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b5ea:	79fb      	ldrb	r3, [r7, #7]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d102      	bne.n	800b5f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	73fb      	strb	r3, [r7, #15]
 800b5f4:	e001      	b.n	800b5fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b5fa:	7bfb      	ldrb	r3, [r7, #15]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	2101      	movs	r1, #1
 800b600:	4803      	ldr	r0, [pc, #12]	; (800b610 <MX_DriverVbusFS+0x34>)
 800b602:	f7f7 fb35 	bl	8002c70 <HAL_GPIO_WritePin>
}
 800b606:	bf00      	nop
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	40020800 	.word	0x40020800

0800b614 <malloc>:
 800b614:	4b02      	ldr	r3, [pc, #8]	; (800b620 <malloc+0xc>)
 800b616:	4601      	mov	r1, r0
 800b618:	6818      	ldr	r0, [r3, #0]
 800b61a:	f000 b82b 	b.w	800b674 <_malloc_r>
 800b61e:	bf00      	nop
 800b620:	20000248 	.word	0x20000248

0800b624 <free>:
 800b624:	4b02      	ldr	r3, [pc, #8]	; (800b630 <free+0xc>)
 800b626:	4601      	mov	r1, r0
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	f000 b8f3 	b.w	800b814 <_free_r>
 800b62e:	bf00      	nop
 800b630:	20000248 	.word	0x20000248

0800b634 <sbrk_aligned>:
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	4e0e      	ldr	r6, [pc, #56]	; (800b670 <sbrk_aligned+0x3c>)
 800b638:	460c      	mov	r4, r1
 800b63a:	6831      	ldr	r1, [r6, #0]
 800b63c:	4605      	mov	r5, r0
 800b63e:	b911      	cbnz	r1, 800b646 <sbrk_aligned+0x12>
 800b640:	f000 f8ac 	bl	800b79c <_sbrk_r>
 800b644:	6030      	str	r0, [r6, #0]
 800b646:	4621      	mov	r1, r4
 800b648:	4628      	mov	r0, r5
 800b64a:	f000 f8a7 	bl	800b79c <_sbrk_r>
 800b64e:	1c43      	adds	r3, r0, #1
 800b650:	d00a      	beq.n	800b668 <sbrk_aligned+0x34>
 800b652:	1cc4      	adds	r4, r0, #3
 800b654:	f024 0403 	bic.w	r4, r4, #3
 800b658:	42a0      	cmp	r0, r4
 800b65a:	d007      	beq.n	800b66c <sbrk_aligned+0x38>
 800b65c:	1a21      	subs	r1, r4, r0
 800b65e:	4628      	mov	r0, r5
 800b660:	f000 f89c 	bl	800b79c <_sbrk_r>
 800b664:	3001      	adds	r0, #1
 800b666:	d101      	bne.n	800b66c <sbrk_aligned+0x38>
 800b668:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b66c:	4620      	mov	r0, r4
 800b66e:	bd70      	pop	{r4, r5, r6, pc}
 800b670:	20000c28 	.word	0x20000c28

0800b674 <_malloc_r>:
 800b674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b678:	1ccd      	adds	r5, r1, #3
 800b67a:	f025 0503 	bic.w	r5, r5, #3
 800b67e:	3508      	adds	r5, #8
 800b680:	2d0c      	cmp	r5, #12
 800b682:	bf38      	it	cc
 800b684:	250c      	movcc	r5, #12
 800b686:	2d00      	cmp	r5, #0
 800b688:	4607      	mov	r7, r0
 800b68a:	db01      	blt.n	800b690 <_malloc_r+0x1c>
 800b68c:	42a9      	cmp	r1, r5
 800b68e:	d905      	bls.n	800b69c <_malloc_r+0x28>
 800b690:	230c      	movs	r3, #12
 800b692:	603b      	str	r3, [r7, #0]
 800b694:	2600      	movs	r6, #0
 800b696:	4630      	mov	r0, r6
 800b698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b770 <_malloc_r+0xfc>
 800b6a0:	f000 f868 	bl	800b774 <__malloc_lock>
 800b6a4:	f8d8 3000 	ldr.w	r3, [r8]
 800b6a8:	461c      	mov	r4, r3
 800b6aa:	bb5c      	cbnz	r4, 800b704 <_malloc_r+0x90>
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	f7ff ffc0 	bl	800b634 <sbrk_aligned>
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	d155      	bne.n	800b766 <_malloc_r+0xf2>
 800b6ba:	f8d8 4000 	ldr.w	r4, [r8]
 800b6be:	4626      	mov	r6, r4
 800b6c0:	2e00      	cmp	r6, #0
 800b6c2:	d145      	bne.n	800b750 <_malloc_r+0xdc>
 800b6c4:	2c00      	cmp	r4, #0
 800b6c6:	d048      	beq.n	800b75a <_malloc_r+0xe6>
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	4638      	mov	r0, r7
 800b6ce:	eb04 0903 	add.w	r9, r4, r3
 800b6d2:	f000 f863 	bl	800b79c <_sbrk_r>
 800b6d6:	4581      	cmp	r9, r0
 800b6d8:	d13f      	bne.n	800b75a <_malloc_r+0xe6>
 800b6da:	6821      	ldr	r1, [r4, #0]
 800b6dc:	1a6d      	subs	r5, r5, r1
 800b6de:	4629      	mov	r1, r5
 800b6e0:	4638      	mov	r0, r7
 800b6e2:	f7ff ffa7 	bl	800b634 <sbrk_aligned>
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	d037      	beq.n	800b75a <_malloc_r+0xe6>
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	442b      	add	r3, r5
 800b6ee:	6023      	str	r3, [r4, #0]
 800b6f0:	f8d8 3000 	ldr.w	r3, [r8]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d038      	beq.n	800b76a <_malloc_r+0xf6>
 800b6f8:	685a      	ldr	r2, [r3, #4]
 800b6fa:	42a2      	cmp	r2, r4
 800b6fc:	d12b      	bne.n	800b756 <_malloc_r+0xe2>
 800b6fe:	2200      	movs	r2, #0
 800b700:	605a      	str	r2, [r3, #4]
 800b702:	e00f      	b.n	800b724 <_malloc_r+0xb0>
 800b704:	6822      	ldr	r2, [r4, #0]
 800b706:	1b52      	subs	r2, r2, r5
 800b708:	d41f      	bmi.n	800b74a <_malloc_r+0xd6>
 800b70a:	2a0b      	cmp	r2, #11
 800b70c:	d917      	bls.n	800b73e <_malloc_r+0xca>
 800b70e:	1961      	adds	r1, r4, r5
 800b710:	42a3      	cmp	r3, r4
 800b712:	6025      	str	r5, [r4, #0]
 800b714:	bf18      	it	ne
 800b716:	6059      	strne	r1, [r3, #4]
 800b718:	6863      	ldr	r3, [r4, #4]
 800b71a:	bf08      	it	eq
 800b71c:	f8c8 1000 	streq.w	r1, [r8]
 800b720:	5162      	str	r2, [r4, r5]
 800b722:	604b      	str	r3, [r1, #4]
 800b724:	4638      	mov	r0, r7
 800b726:	f104 060b 	add.w	r6, r4, #11
 800b72a:	f000 f829 	bl	800b780 <__malloc_unlock>
 800b72e:	f026 0607 	bic.w	r6, r6, #7
 800b732:	1d23      	adds	r3, r4, #4
 800b734:	1af2      	subs	r2, r6, r3
 800b736:	d0ae      	beq.n	800b696 <_malloc_r+0x22>
 800b738:	1b9b      	subs	r3, r3, r6
 800b73a:	50a3      	str	r3, [r4, r2]
 800b73c:	e7ab      	b.n	800b696 <_malloc_r+0x22>
 800b73e:	42a3      	cmp	r3, r4
 800b740:	6862      	ldr	r2, [r4, #4]
 800b742:	d1dd      	bne.n	800b700 <_malloc_r+0x8c>
 800b744:	f8c8 2000 	str.w	r2, [r8]
 800b748:	e7ec      	b.n	800b724 <_malloc_r+0xb0>
 800b74a:	4623      	mov	r3, r4
 800b74c:	6864      	ldr	r4, [r4, #4]
 800b74e:	e7ac      	b.n	800b6aa <_malloc_r+0x36>
 800b750:	4634      	mov	r4, r6
 800b752:	6876      	ldr	r6, [r6, #4]
 800b754:	e7b4      	b.n	800b6c0 <_malloc_r+0x4c>
 800b756:	4613      	mov	r3, r2
 800b758:	e7cc      	b.n	800b6f4 <_malloc_r+0x80>
 800b75a:	230c      	movs	r3, #12
 800b75c:	603b      	str	r3, [r7, #0]
 800b75e:	4638      	mov	r0, r7
 800b760:	f000 f80e 	bl	800b780 <__malloc_unlock>
 800b764:	e797      	b.n	800b696 <_malloc_r+0x22>
 800b766:	6025      	str	r5, [r4, #0]
 800b768:	e7dc      	b.n	800b724 <_malloc_r+0xb0>
 800b76a:	605b      	str	r3, [r3, #4]
 800b76c:	deff      	udf	#255	; 0xff
 800b76e:	bf00      	nop
 800b770:	20000c24 	.word	0x20000c24

0800b774 <__malloc_lock>:
 800b774:	4801      	ldr	r0, [pc, #4]	; (800b77c <__malloc_lock+0x8>)
 800b776:	f000 b84b 	b.w	800b810 <__retarget_lock_acquire_recursive>
 800b77a:	bf00      	nop
 800b77c:	20000d64 	.word	0x20000d64

0800b780 <__malloc_unlock>:
 800b780:	4801      	ldr	r0, [pc, #4]	; (800b788 <__malloc_unlock+0x8>)
 800b782:	f000 b846 	b.w	800b812 <__retarget_lock_release_recursive>
 800b786:	bf00      	nop
 800b788:	20000d64 	.word	0x20000d64

0800b78c <memset>:
 800b78c:	4402      	add	r2, r0
 800b78e:	4603      	mov	r3, r0
 800b790:	4293      	cmp	r3, r2
 800b792:	d100      	bne.n	800b796 <memset+0xa>
 800b794:	4770      	bx	lr
 800b796:	f803 1b01 	strb.w	r1, [r3], #1
 800b79a:	e7f9      	b.n	800b790 <memset+0x4>

0800b79c <_sbrk_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	4d06      	ldr	r5, [pc, #24]	; (800b7b8 <_sbrk_r+0x1c>)
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	4608      	mov	r0, r1
 800b7a6:	602b      	str	r3, [r5, #0]
 800b7a8:	f7f6 fc08 	bl	8001fbc <_sbrk>
 800b7ac:	1c43      	adds	r3, r0, #1
 800b7ae:	d102      	bne.n	800b7b6 <_sbrk_r+0x1a>
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	b103      	cbz	r3, 800b7b6 <_sbrk_r+0x1a>
 800b7b4:	6023      	str	r3, [r4, #0]
 800b7b6:	bd38      	pop	{r3, r4, r5, pc}
 800b7b8:	20000d68 	.word	0x20000d68

0800b7bc <__errno>:
 800b7bc:	4b01      	ldr	r3, [pc, #4]	; (800b7c4 <__errno+0x8>)
 800b7be:	6818      	ldr	r0, [r3, #0]
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	20000248 	.word	0x20000248

0800b7c8 <__libc_init_array>:
 800b7c8:	b570      	push	{r4, r5, r6, lr}
 800b7ca:	4d0d      	ldr	r5, [pc, #52]	; (800b800 <__libc_init_array+0x38>)
 800b7cc:	4c0d      	ldr	r4, [pc, #52]	; (800b804 <__libc_init_array+0x3c>)
 800b7ce:	1b64      	subs	r4, r4, r5
 800b7d0:	10a4      	asrs	r4, r4, #2
 800b7d2:	2600      	movs	r6, #0
 800b7d4:	42a6      	cmp	r6, r4
 800b7d6:	d109      	bne.n	800b7ec <__libc_init_array+0x24>
 800b7d8:	4d0b      	ldr	r5, [pc, #44]	; (800b808 <__libc_init_array+0x40>)
 800b7da:	4c0c      	ldr	r4, [pc, #48]	; (800b80c <__libc_init_array+0x44>)
 800b7dc:	f000 f888 	bl	800b8f0 <_init>
 800b7e0:	1b64      	subs	r4, r4, r5
 800b7e2:	10a4      	asrs	r4, r4, #2
 800b7e4:	2600      	movs	r6, #0
 800b7e6:	42a6      	cmp	r6, r4
 800b7e8:	d105      	bne.n	800b7f6 <__libc_init_array+0x2e>
 800b7ea:	bd70      	pop	{r4, r5, r6, pc}
 800b7ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7f0:	4798      	blx	r3
 800b7f2:	3601      	adds	r6, #1
 800b7f4:	e7ee      	b.n	800b7d4 <__libc_init_array+0xc>
 800b7f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7fa:	4798      	blx	r3
 800b7fc:	3601      	adds	r6, #1
 800b7fe:	e7f2      	b.n	800b7e6 <__libc_init_array+0x1e>
 800b800:	0800b92c 	.word	0x0800b92c
 800b804:	0800b92c 	.word	0x0800b92c
 800b808:	0800b92c 	.word	0x0800b92c
 800b80c:	0800b930 	.word	0x0800b930

0800b810 <__retarget_lock_acquire_recursive>:
 800b810:	4770      	bx	lr

0800b812 <__retarget_lock_release_recursive>:
 800b812:	4770      	bx	lr

0800b814 <_free_r>:
 800b814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b816:	2900      	cmp	r1, #0
 800b818:	d044      	beq.n	800b8a4 <_free_r+0x90>
 800b81a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b81e:	9001      	str	r0, [sp, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	f1a1 0404 	sub.w	r4, r1, #4
 800b826:	bfb8      	it	lt
 800b828:	18e4      	addlt	r4, r4, r3
 800b82a:	f7ff ffa3 	bl	800b774 <__malloc_lock>
 800b82e:	4a1e      	ldr	r2, [pc, #120]	; (800b8a8 <_free_r+0x94>)
 800b830:	9801      	ldr	r0, [sp, #4]
 800b832:	6813      	ldr	r3, [r2, #0]
 800b834:	b933      	cbnz	r3, 800b844 <_free_r+0x30>
 800b836:	6063      	str	r3, [r4, #4]
 800b838:	6014      	str	r4, [r2, #0]
 800b83a:	b003      	add	sp, #12
 800b83c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b840:	f7ff bf9e 	b.w	800b780 <__malloc_unlock>
 800b844:	42a3      	cmp	r3, r4
 800b846:	d908      	bls.n	800b85a <_free_r+0x46>
 800b848:	6825      	ldr	r5, [r4, #0]
 800b84a:	1961      	adds	r1, r4, r5
 800b84c:	428b      	cmp	r3, r1
 800b84e:	bf01      	itttt	eq
 800b850:	6819      	ldreq	r1, [r3, #0]
 800b852:	685b      	ldreq	r3, [r3, #4]
 800b854:	1949      	addeq	r1, r1, r5
 800b856:	6021      	streq	r1, [r4, #0]
 800b858:	e7ed      	b.n	800b836 <_free_r+0x22>
 800b85a:	461a      	mov	r2, r3
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	b10b      	cbz	r3, 800b864 <_free_r+0x50>
 800b860:	42a3      	cmp	r3, r4
 800b862:	d9fa      	bls.n	800b85a <_free_r+0x46>
 800b864:	6811      	ldr	r1, [r2, #0]
 800b866:	1855      	adds	r5, r2, r1
 800b868:	42a5      	cmp	r5, r4
 800b86a:	d10b      	bne.n	800b884 <_free_r+0x70>
 800b86c:	6824      	ldr	r4, [r4, #0]
 800b86e:	4421      	add	r1, r4
 800b870:	1854      	adds	r4, r2, r1
 800b872:	42a3      	cmp	r3, r4
 800b874:	6011      	str	r1, [r2, #0]
 800b876:	d1e0      	bne.n	800b83a <_free_r+0x26>
 800b878:	681c      	ldr	r4, [r3, #0]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	6053      	str	r3, [r2, #4]
 800b87e:	440c      	add	r4, r1
 800b880:	6014      	str	r4, [r2, #0]
 800b882:	e7da      	b.n	800b83a <_free_r+0x26>
 800b884:	d902      	bls.n	800b88c <_free_r+0x78>
 800b886:	230c      	movs	r3, #12
 800b888:	6003      	str	r3, [r0, #0]
 800b88a:	e7d6      	b.n	800b83a <_free_r+0x26>
 800b88c:	6825      	ldr	r5, [r4, #0]
 800b88e:	1961      	adds	r1, r4, r5
 800b890:	428b      	cmp	r3, r1
 800b892:	bf04      	itt	eq
 800b894:	6819      	ldreq	r1, [r3, #0]
 800b896:	685b      	ldreq	r3, [r3, #4]
 800b898:	6063      	str	r3, [r4, #4]
 800b89a:	bf04      	itt	eq
 800b89c:	1949      	addeq	r1, r1, r5
 800b89e:	6021      	streq	r1, [r4, #0]
 800b8a0:	6054      	str	r4, [r2, #4]
 800b8a2:	e7ca      	b.n	800b83a <_free_r+0x26>
 800b8a4:	b003      	add	sp, #12
 800b8a6:	bd30      	pop	{r4, r5, pc}
 800b8a8:	20000c24 	.word	0x20000c24

0800b8ac <sqrtf>:
 800b8ac:	b508      	push	{r3, lr}
 800b8ae:	ed2d 8b02 	vpush	{d8}
 800b8b2:	eeb0 8a40 	vmov.f32	s16, s0
 800b8b6:	f000 f817 	bl	800b8e8 <__ieee754_sqrtf>
 800b8ba:	eeb4 8a48 	vcmp.f32	s16, s16
 800b8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c2:	d60c      	bvs.n	800b8de <sqrtf+0x32>
 800b8c4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800b8e4 <sqrtf+0x38>
 800b8c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d0:	d505      	bpl.n	800b8de <sqrtf+0x32>
 800b8d2:	f7ff ff73 	bl	800b7bc <__errno>
 800b8d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b8da:	2321      	movs	r3, #33	; 0x21
 800b8dc:	6003      	str	r3, [r0, #0]
 800b8de:	ecbd 8b02 	vpop	{d8}
 800b8e2:	bd08      	pop	{r3, pc}
 800b8e4:	00000000 	.word	0x00000000

0800b8e8 <__ieee754_sqrtf>:
 800b8e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b8ec:	4770      	bx	lr
	...

0800b8f0 <_init>:
 800b8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f2:	bf00      	nop
 800b8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8f6:	bc08      	pop	{r3}
 800b8f8:	469e      	mov	lr, r3
 800b8fa:	4770      	bx	lr

0800b8fc <_fini>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	bf00      	nop
 800b900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b902:	bc08      	pop	{r3}
 800b904:	469e      	mov	lr, r3
 800b906:	4770      	bx	lr
