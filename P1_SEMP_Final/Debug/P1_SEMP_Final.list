
P1_SEMP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008d88  08008d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008da4  08008da4  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  08008da4  08008da4  00018da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dac  08008dac  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dac  08008dac  00018dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008db0  08008db0  00018db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08008db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a2c  2000013c  08008ef0  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b68  08008ef0  00020b68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b794  00000000  00000000  000201af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a7b  00000000  00000000  0003b943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001858  00000000  00000000  000403c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012a7  00000000  00000000  00041c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b161  00000000  00000000  00042ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020947  00000000  00000000  0005e020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096dde  00000000  00000000  0007e967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006890  00000000  00000000  00115748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011bfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000013c 	.word	0x2000013c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008d70 	.word	0x08008d70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000140 	.word	0x20000140
 80001d4:	08008d70 	.word	0x08008d70

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <fsm_new>:

fsm_t*

fsm_new (fsm_trans_t* tt)

{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]

  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 80004dc:	2008      	movs	r0, #8
 80004de:	f008 fafb 	bl	8008ad8 <malloc>
 80004e2:	4603      	mov	r3, r0
 80004e4:	60fb      	str	r3, [r7, #12]

  fsm_init (this, tt);
 80004e6:	6879      	ldr	r1, [r7, #4]
 80004e8:	68f8      	ldr	r0, [r7, #12]
 80004ea:	f000 f805 	bl	80004f8 <fsm_init>

  return this;
 80004ee:	68fb      	ldr	r3, [r7, #12]

}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <fsm_init>:

void

fsm_init (fsm_t* this, fsm_trans_t* tt)

{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]

  this->tt = tt;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	683a      	ldr	r2, [r7, #0]
 8000506:	605a      	str	r2, [r3, #4]

  this->current_state = tt[0].orig_state;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	601a      	str	r2, [r3, #0]

}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <fsm_fire>:

void

fsm_fire (fsm_t* this)

{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

  fsm_trans_t* t;

  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	e01c      	b.n	8000566 <fsm_fire+0x4a>

    if ((this->current_state == t->orig_state) && t->in(this)) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	d113      	bne.n	8000560 <fsm_fire+0x44>
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	4798      	blx	r3
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d00c      	beq.n	8000560 <fsm_fire+0x44>

      this->current_state = t->dest_state;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	689a      	ldr	r2, [r3, #8]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	601a      	str	r2, [r3, #0]

      if (t->out)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d00c      	beq.n	8000570 <fsm_fire+0x54>

        t->out(this);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	4798      	blx	r3

      break;
 800055e:	e007      	b.n	8000570 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3310      	adds	r3, #16
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	dade      	bge.n	800052c <fsm_fire+0x10>

    }

  }

 800056e:	e000      	b.n	8000572 <fsm_fire+0x56>
      break;
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08c      	sub	sp, #48	; 0x30
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
 8000596:	4b66      	ldr	r3, [pc, #408]	; (8000730 <MX_GPIO_Init+0x1b4>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a65      	ldr	r2, [pc, #404]	; (8000730 <MX_GPIO_Init+0x1b4>)
 800059c:	f043 0310 	orr.w	r3, r3, #16
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b63      	ldr	r3, [pc, #396]	; (8000730 <MX_GPIO_Init+0x1b4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0310 	and.w	r3, r3, #16
 80005aa:	61bb      	str	r3, [r7, #24]
 80005ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	4b5f      	ldr	r3, [pc, #380]	; (8000730 <MX_GPIO_Init+0x1b4>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a5e      	ldr	r2, [pc, #376]	; (8000730 <MX_GPIO_Init+0x1b4>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b5c      	ldr	r3, [pc, #368]	; (8000730 <MX_GPIO_Init+0x1b4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b58      	ldr	r3, [pc, #352]	; (8000730 <MX_GPIO_Init+0x1b4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a57      	ldr	r2, [pc, #348]	; (8000730 <MX_GPIO_Init+0x1b4>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b55      	ldr	r3, [pc, #340]	; (8000730 <MX_GPIO_Init+0x1b4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b51      	ldr	r3, [pc, #324]	; (8000730 <MX_GPIO_Init+0x1b4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a50      	ldr	r2, [pc, #320]	; (8000730 <MX_GPIO_Init+0x1b4>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b4e      	ldr	r3, [pc, #312]	; (8000730 <MX_GPIO_Init+0x1b4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b4a      	ldr	r3, [pc, #296]	; (8000730 <MX_GPIO_Init+0x1b4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a49      	ldr	r2, [pc, #292]	; (8000730 <MX_GPIO_Init+0x1b4>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b47      	ldr	r3, [pc, #284]	; (8000730 <MX_GPIO_Init+0x1b4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b43      	ldr	r3, [pc, #268]	; (8000730 <MX_GPIO_Init+0x1b4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a42      	ldr	r2, [pc, #264]	; (8000730 <MX_GPIO_Init+0x1b4>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b40      	ldr	r3, [pc, #256]	; (8000730 <MX_GPIO_Init+0x1b4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2108      	movs	r1, #8
 800063e:	483d      	ldr	r0, [pc, #244]	; (8000734 <MX_GPIO_Init+0x1b8>)
 8000640:	f001 fa46 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2101      	movs	r1, #1
 8000648:	483b      	ldr	r0, [pc, #236]	; (8000738 <MX_GPIO_Init+0x1bc>)
 800064a:	f001 fa41 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800064e:	2200      	movs	r2, #0
 8000650:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000654:	4839      	ldr	r0, [pc, #228]	; (800073c <MX_GPIO_Init+0x1c0>)
 8000656:	f001 fa3b 	bl	8001ad0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800065a:	2304      	movs	r3, #4
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	4831      	ldr	r0, [pc, #196]	; (8000734 <MX_GPIO_Init+0x1b8>)
 800066e:	f001 f893 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000672:	2308      	movs	r3, #8
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	482a      	ldr	r0, [pc, #168]	; (8000734 <MX_GPIO_Init+0x1b8>)
 800068a:	f001 f885 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800068e:	2332      	movs	r3, #50	; 0x32
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000692:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	4824      	ldr	r0, [pc, #144]	; (8000734 <MX_GPIO_Init+0x1b8>)
 80006a4:	f001 f878 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	481e      	ldr	r0, [pc, #120]	; (8000738 <MX_GPIO_Init+0x1bc>)
 80006c0:	f001 f86a 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = boton_Pin;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(boton_GPIO_Port, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	4819      	ldr	r0, [pc, #100]	; (8000740 <MX_GPIO_Init+0x1c4>)
 80006da:	f001 f85d 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = Sensor_Pin|OTG_FS_OverCurrent_Pin;
 80006de:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <MX_GPIO_Init+0x1c0>)
 80006f4:	f001 f850 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006f8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006fc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	480a      	ldr	r0, [pc, #40]	; (800073c <MX_GPIO_Init+0x1c0>)
 8000712:	f001 f841 	bl	8001798 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2006      	movs	r0, #6
 800071c:	f001 f805 	bl	800172a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000720:	2006      	movs	r0, #6
 8000722:	f001 f81e 	bl	8001762 <HAL_NVIC_EnableIRQ>

}
 8000726:	bf00      	nop
 8000728:	3730      	adds	r7, #48	; 0x30
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40021000 	.word	0x40021000
 8000738:	40020800 	.word	0x40020800
 800073c:	40020c00 	.word	0x40020c00
 8000740:	40020000 	.word	0x40020000

08000744 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2C1_Init+0x50>)
 800074a:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MX_I2C1_Init+0x54>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_I2C1_Init+0x50>)
 8000750:	4a12      	ldr	r2, [pc, #72]	; (800079c <MX_I2C1_Init+0x58>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_I2C1_Init+0x50>)
 8000762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000766:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_I2C1_Init+0x50>)
 8000782:	f002 fdfb 	bl	800337c <HAL_I2C_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800078c:	f000 fc00 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000158 	.word	0x20000158
 8000798:	40005400 	.word	0x40005400
 800079c:	000186a0 	.word	0x000186a0

080007a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <HAL_I2C_MspInit+0x84>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d12c      	bne.n	800081c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <HAL_I2C_MspInit+0x88>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <HAL_I2C_MspInit+0x88>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_I2C_MspInit+0x88>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007de:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e4:	2312      	movs	r3, #18
 80007e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f0:	2304      	movs	r3, #4
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <HAL_I2C_MspInit+0x8c>)
 80007fc:	f000 ffcc 	bl	8001798 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_I2C_MspInit+0x88>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_I2C_MspInit+0x88>)
 800080a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_I2C_MspInit+0x88>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40005400 	.word	0x40005400
 8000828:	40023800 	.word	0x40023800
 800082c:	40020400 	.word	0x40020400

08000830 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_I2S2_Init+0x50>)
 8000836:	4a13      	ldr	r2, [pc, #76]	; (8000884 <MX_I2S2_Init+0x54>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_I2S2_Init+0x50>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_I2S2_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <MX_I2S2_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_I2S2_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_I2S2_Init+0x50>)
 8000856:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <MX_I2S2_Init+0x58>)
 8000858:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_I2S2_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_I2S2_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_I2S2_Init+0x50>)
 8000868:	2201      	movs	r2, #1
 800086a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_I2S2_Init+0x50>)
 800086e:	f002 fec9 	bl	8003604 <HAL_I2S_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000878:	f000 fb8a 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200001ac 	.word	0x200001ac
 8000884:	40003800 	.word	0x40003800
 8000888:	00017700 	.word	0x00017700

0800088c <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_I2S3_Init+0x54>)
 8000892:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <MX_I2S3_Init+0x58>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_I2S3_Init+0x54>)
 8000898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <MX_I2S3_Init+0x5c>)
 80008b6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008cc:	f002 fe9a 	bl	8003604 <HAL_I2S_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008d6:	f000 fb5b 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200001f4 	.word	0x200001f4
 80008e4:	40003c00 	.word	0x40003c00
 80008e8:	00017700 	.word	0x00017700

080008ec <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08e      	sub	sp, #56	; 0x38
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a59      	ldr	r2, [pc, #356]	; (8000a70 <HAL_I2S_MspInit+0x184>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d15b      	bne.n	80009c6 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
 8000912:	4b58      	ldr	r3, [pc, #352]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a57      	ldr	r2, [pc, #348]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	4b55      	ldr	r3, [pc, #340]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	623b      	str	r3, [r7, #32]
 8000928:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
 800092e:	4b51      	ldr	r3, [pc, #324]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a50      	ldr	r2, [pc, #320]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b4e      	ldr	r3, [pc, #312]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	61fb      	str	r3, [r7, #28]
 8000944:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
 800094a:	4b4a      	ldr	r3, [pc, #296]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a49      	ldr	r2, [pc, #292]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b47      	ldr	r3, [pc, #284]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000962:	2304      	movs	r3, #4
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000972:	2306      	movs	r3, #6
 8000974:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097a:	4619      	mov	r1, r3
 800097c:	483e      	ldr	r0, [pc, #248]	; (8000a78 <HAL_I2S_MspInit+0x18c>)
 800097e:	f000 ff0b 	bl	8001798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000982:	2308      	movs	r3, #8
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000992:	2305      	movs	r3, #5
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4836      	ldr	r0, [pc, #216]	; (8000a78 <HAL_I2S_MspInit+0x18c>)
 800099e:	f000 fefb 	bl	8001798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80009a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b4:	2305      	movs	r3, #5
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	482f      	ldr	r0, [pc, #188]	; (8000a7c <HAL_I2S_MspInit+0x190>)
 80009c0:	f000 feea 	bl	8001798 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009c4:	e04f      	b.n	8000a66 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a2d      	ldr	r2, [pc, #180]	; (8000a80 <HAL_I2S_MspInit+0x194>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d14a      	bne.n	8000a66 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 80009da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a1f      	ldr	r2, [pc, #124]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_I2S_MspInit+0x188>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a24:	2310      	movs	r3, #16
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a34:	2306      	movs	r3, #6
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4811      	ldr	r0, [pc, #68]	; (8000a84 <HAL_I2S_MspInit+0x198>)
 8000a40:	f000 feaa 	bl	8001798 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a44:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a56:	2306      	movs	r3, #6
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <HAL_I2S_MspInit+0x18c>)
 8000a62:	f000 fe99 	bl	8001798 <HAL_GPIO_Init>
}
 8000a66:	bf00      	nop
 8000a68:	3738      	adds	r7, #56	; 0x38
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40003800 	.word	0x40003800
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020800 	.word	0x40020800
 8000a7c:	40020400 	.word	0x40020400
 8000a80:	40003c00 	.word	0x40003c00
 8000a84:	40020000 	.word	0x40020000

08000a88 <boton_sin_pulsar>:
  ANDANDO,
  AVISO,
};

static int boton_sin_pulsar (fsm_t* this) //boton a false
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	/*if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0) //boton a false
		{
			return 1;
		}
		return 0;*/
	if (boton == 0)
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <boton_sin_pulsar+0x24>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <boton_sin_pulsar+0x14>
	{
		return 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e000      	b.n	8000a9e <boton_sin_pulsar+0x16>
	}
	return 0;
 8000a9c:	2300      	movs	r3, #0
	//return !boton;
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	2000023c 	.word	0x2000023c

08000ab0 <boton_pulsado>:
static int boton_pulsado (fsm_t* this) //boton a true
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	/*if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1) //boton a true
		{
			return 1;
		}
		return 0;*/
	if (boton == 1)
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <boton_pulsado+0x24>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d101      	bne.n	8000ac4 <boton_pulsado+0x14>
	{
		return 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <boton_pulsado+0x16>
	}
	return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000023c 	.word	0x2000023c

08000ad8 <empieza_muestras>:

static int empieza_muestras (fsm_t* this)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	if (tiempo_t1 == 1 && boton == 0)
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <empieza_muestras+0x60>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d122      	bne.n	8000b2e <empieza_muestras+0x56>
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <empieza_muestras+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d11e      	bne.n	8000b2e <empieza_muestras+0x56>
	{
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15); //Led azul
 8000af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af4:	4812      	ldr	r0, [pc, #72]	; (8000b40 <empieza_muestras+0x68>)
 8000af6:	f001 f804 	bl	8001b02 <HAL_GPIO_TogglePin>
		muestras++;
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <empieza_muestras+0x6c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <empieza_muestras+0x6c>)
 8000b02:	6013      	str	r3, [r2, #0]
		tiempo_t1=0;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <empieza_muestras+0x60>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
		if((HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_11)==1))
 8000b0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <empieza_muestras+0x68>)
 8000b10:	f000 ffc6 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d107      	bne.n	8000b2a <empieza_muestras+0x52>
		{
			//HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15); //Led azul
			movimientos++;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <empieza_muestras+0x70>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <empieza_muestras+0x70>)
 8000b22:	6013      	str	r3, [r2, #0]
			tiempo_t1=0;
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <empieza_muestras+0x60>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]

		}
		return 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e7ff      	b.n	8000b2e <empieza_muestras+0x56>
		{
			return 1;
		}

	}
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000244 	.word	0x20000244
 8000b3c:	2000023c 	.word	0x2000023c
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	20000248 	.word	0x20000248
 8000b48:	2000024c 	.word	0x2000024c

08000b4c <esta_parado>:
	}
	return 0;*/


static int esta_parado (fsm_t* this)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((muestras>=20)&&(movimientos<4))
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <esta_parado+0x2c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b13      	cmp	r3, #19
 8000b5a:	dd05      	ble.n	8000b68 <esta_parado+0x1c>
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <esta_parado+0x30>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	dc01      	bgt.n	8000b68 <esta_parado+0x1c>
  {
	  return 1;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e000      	b.n	8000b6a <esta_parado+0x1e>
  }
  else
  {
	  return 0;
 8000b68:	2300      	movs	r3, #0
  }
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000248 	.word	0x20000248
 8000b7c:	2000024c 	.word	0x2000024c

08000b80 <esta_andando>:

static int esta_andando (fsm_t* this)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	if ((muestras>=20)&&(movimientos>4))
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <esta_andando+0x2c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b13      	cmp	r3, #19
 8000b8e:	dd05      	ble.n	8000b9c <esta_andando+0x1c>
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <esta_andando+0x30>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	dd01      	ble.n	8000b9c <esta_andando+0x1c>
	{
	  return 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e000      	b.n	8000b9e <esta_andando+0x1e>
	}
	else
	{
	  return 0;
 8000b9c:	2300      	movs	r3, #0
	}
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000248 	.word	0x20000248
 8000bb0:	2000024c 	.word	0x2000024c

08000bb4 <esta_aviso>:

static int esta_aviso (fsm_t* this)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((muestras>=20)&&(movimientos<=4))
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <esta_aviso+0x2c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b13      	cmp	r3, #19
 8000bc2:	dd05      	ble.n	8000bd0 <esta_aviso+0x1c>
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <esta_aviso+0x30>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	dc01      	bgt.n	8000bd0 <esta_aviso+0x1c>
  {
	 return 1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <esta_aviso+0x1e>
  }
  else
  {
	 return 0;
 8000bd0:	2300      	movs	r3, #0
  }
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000248 	.word	0x20000248
 8000be4:	2000024c 	.word	0x2000024c

08000be8 <funcion_muestreo>:
static void funcion_muestreo (fsm_t* this)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  boton=0;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <funcion_muestreo+0x30>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
  muestras=0;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <funcion_muestreo+0x34>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
  movimientos=0;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <funcion_muestreo+0x38>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim3);
 8000c02:	4808      	ldr	r0, [pc, #32]	; (8000c24 <funcion_muestreo+0x3c>)
 8000c04:	f004 f866 	bl	8004cd4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000c08:	4807      	ldr	r0, [pc, #28]	; (8000c28 <funcion_muestreo+0x40>)
 8000c0a:	f004 f863 	bl	8004cd4 <HAL_TIM_Base_Start_IT>

}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000023c 	.word	0x2000023c
 8000c1c:	20000248 	.word	0x20000248
 8000c20:	2000024c 	.word	0x2000024c
 8000c24:	200002f4 	.word	0x200002f4
 8000c28:	200002ac 	.word	0x200002ac

08000c2c <boton_espera>:
	return 0;
	//HAL_TIM_Base_Start_IT(&htim2);
	//HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15)=1;
}*/
static int boton_espera (fsm_t* this)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	if (boton==0 && tiempo_t2==1) //500ms pasados
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <boton_espera+0x2c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d105      	bne.n	8000c48 <boton_espera+0x1c>
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <boton_espera+0x30>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d101      	bne.n	8000c48 <boton_espera+0x1c>
	{
		return 1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e000      	b.n	8000c4a <boton_espera+0x1e>
		{
			return 1;

		}*/
	}
	return 0;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	2000023c 	.word	0x2000023c
 8000c5c:	20000240 	.word	0x20000240

08000c60 <funcion_terminar>:

static void funcion_terminar (fsm_t* this)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	  HAL_TIM_Base_Stop_IT(&htim3);//timer 1 zero
 8000c68:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <funcion_terminar+0x60>)
 8000c6a:	f004 f895 	bl	8004d98 <HAL_TIM_Base_Stop_IT>
	  HAL_TIM_Base_Stop_IT(&htim2); //timer 2 a zero
 8000c6e:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <funcion_terminar+0x64>)
 8000c70:	f004 f892 	bl	8004d98 <HAL_TIM_Base_Stop_IT>
	  muestras=0;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <funcion_terminar+0x68>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
	  movimientos=0;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <funcion_terminar+0x6c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
	  boton=0;
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <funcion_terminar+0x70>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOD, (uint16_t) LD6_Pin,0); //Led azul off
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c8c:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <funcion_terminar+0x74>)
 8000c8e:	f000 ff1f 	bl	8001ad0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, (uint16_t) LD5_Pin,0); //Led rojo off
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c98:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <funcion_terminar+0x74>)
 8000c9a:	f000 ff19 	bl	8001ad0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, (uint16_t) LD4_Pin,0); //Led verde off
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca4:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <funcion_terminar+0x74>)
 8000ca6:	f000 ff13 	bl	8001ad0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, (uint16_t) LD3_Pin,0); //Led naranja off
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <funcion_terminar+0x74>)
 8000cb2:	f000 ff0d 	bl	8001ad0 <HAL_GPIO_WritePin>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200002f4 	.word	0x200002f4
 8000cc4:	200002ac 	.word	0x200002ac
 8000cc8:	20000248 	.word	0x20000248
 8000ccc:	2000024c 	.word	0x2000024c
 8000cd0:	2000023c 	.word	0x2000023c
 8000cd4:	40020c00 	.word	0x40020c00

08000cd8 <funcion_andando>:

static void funcion_andando (fsm_t* this)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD,(uint16_t) LD3_Pin,1); //Led naranja on
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce6:	480c      	ldr	r0, [pc, #48]	; (8000d18 <funcion_andando+0x40>)
 8000ce8:	f000 fef2 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,(uint16_t) LD5_Pin,0); //Led rojo off
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <funcion_andando+0x40>)
 8000cf4:	f000 feec 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,(uint16_t) LD4_Pin,0); //Led verde off
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <funcion_andando+0x40>)
 8000d00:	f000 fee6 	bl	8001ad0 <HAL_GPIO_WritePin>
	muestras=0;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <funcion_andando+0x44>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
	movimientos=0;
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <funcion_andando+0x48>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
	/*stop = 0;
	walking = 1;
	warning = 0;*/

}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40020c00 	.word	0x40020c00
 8000d1c:	20000248 	.word	0x20000248
 8000d20:	2000024c 	.word	0x2000024c

08000d24 <funcion_aviso>:
static void funcion_aviso (fsm_t* this)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD,(uint16_t) LD5_Pin,1); //Led rojo on
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d32:	480c      	ldr	r0, [pc, #48]	; (8000d64 <funcion_aviso+0x40>)
 8000d34:	f000 fecc 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,(uint16_t) LD3_Pin,0); //Led naranja off
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3e:	4809      	ldr	r0, [pc, #36]	; (8000d64 <funcion_aviso+0x40>)
 8000d40:	f000 fec6 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,(uint16_t) LD4_Pin,0); //Led verde off
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4a:	4806      	ldr	r0, [pc, #24]	; (8000d64 <funcion_aviso+0x40>)
 8000d4c:	f000 fec0 	bl	8001ad0 <HAL_GPIO_WritePin>
	muestras=0;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <funcion_aviso+0x44>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
	movimientos=0;
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <funcion_aviso+0x48>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
	/*stop = 0;
	walking = 0;
	warning = 1;*/
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40020c00 	.word	0x40020c00
 8000d68:	20000248 	.word	0x20000248
 8000d6c:	2000024c 	.word	0x2000024c

08000d70 <funcion_parado>:
static void funcion_parado (fsm_t* this)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD,(uint16_t) LD4_Pin,1); //Led verde on
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7e:	480c      	ldr	r0, [pc, #48]	; (8000db0 <funcion_parado+0x40>)
 8000d80:	f000 fea6 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,(uint16_t) LD3_Pin,0); //Led naranja off
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	4809      	ldr	r0, [pc, #36]	; (8000db0 <funcion_parado+0x40>)
 8000d8c:	f000 fea0 	bl	8001ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,(uint16_t) LD5_Pin,0); //Led rojo off
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <funcion_parado+0x40>)
 8000d98:	f000 fe9a 	bl	8001ad0 <HAL_GPIO_WritePin>
	muestras=0;
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <funcion_parado+0x44>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
	movimientos=0;
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <funcion_parado+0x48>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
	/*stop = 1;
	walking = 0;
	warning = 0;*/
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40020c00 	.word	0x40020c00
 8000db4:	20000248 	.word	0x20000248
 8000db8:	2000024c 	.word	0x2000024c

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	fsm_t * muestreoP1_fsm = fsm_new (muestreoP1);
 8000dc2:	4813      	ldr	r0, [pc, #76]	; (8000e10 <main+0x54>)
 8000dc4:	f7ff fb86 	bl	80004d4 <fsm_new>
 8000dc8:	6078      	str	r0, [r7, #4]
  	fsm_t * P1_fsm = fsm_new (P1);
 8000dca:	4812      	ldr	r0, [pc, #72]	; (8000e14 <main+0x58>)
 8000dcc:	f7ff fb82 	bl	80004d4 <fsm_new>
 8000dd0:	6038      	str	r0, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f000 fb39 	bl	8001448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f81f 	bl	8000e18 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000dda:	f000 f885 	bl	8000ee8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dde:	f7ff fbcd 	bl	800057c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000de2:	f7ff fcaf 	bl	8000744 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000de6:	f7ff fd23 	bl	8000830 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000dea:	f7ff fd4f 	bl	800088c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000dee:	f000 f8d5 	bl	8000f9c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000df2:	f007 fb69 	bl	80084c8 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000df6:	f000 fa1d 	bl	8001234 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dfa:	f000 fa69 	bl	80012d0 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	fsm_fire (muestreoP1_fsm);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fb8c 	bl	800051c <fsm_fire>
   	fsm_fire (P1_fsm);
 8000e04:	6838      	ldr	r0, [r7, #0]
 8000e06:	f7ff fb89 	bl	800051c <fsm_fire>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e0a:	f007 fb83 	bl	8008514 <MX_USB_HOST_Process>
	fsm_fire (muestreoP1_fsm);
 8000e0e:	e7f6      	b.n	8000dfe <main+0x42>
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000060 	.word	0x20000060

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b094      	sub	sp, #80	; 0x50
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	2230      	movs	r2, #48	; 0x30
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f007 ff12 	bl	8008c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <SystemClock_Config+0xc8>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <SystemClock_Config+0xc8>)
 8000e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <SystemClock_Config+0xc8>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <SystemClock_Config+0xcc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a20      	ldr	r2, [pc, #128]	; (8000ee4 <SystemClock_Config+0xcc>)
 8000e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <SystemClock_Config+0xcc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e74:	2301      	movs	r3, #1
 8000e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e8c:	23c0      	movs	r3, #192	; 0xc0
 8000e8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e90:	2304      	movs	r3, #4
 8000e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000e94:	2308      	movs	r3, #8
 8000e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e98:	f107 0320 	add.w	r3, r7, #32
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 f86b 	bl	8003f78 <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ea8:	f000 f872 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eac:	230f      	movs	r3, #15
 8000eae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f003 facf 	bl	800446c <HAL_RCC_ClockConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ed4:	f000 f85c 	bl	8000f90 <Error_Handler>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3750      	adds	r7, #80	; 0x50
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000efe:	2301      	movs	r3, #1
 8000f00:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000f02:	23c8      	movs	r3, #200	; 0xc8
 8000f04:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000f06:	2305      	movs	r3, #5
 8000f08:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 fcb7 	bl	8004884 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000f1c:	f000 f838 	bl	8000f90 <Error_Handler>
  }
}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d102      	bne.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		tiempo_t1=1; //1s cumplido
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]

		//HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15); //LED AZUL
		//empieza_muestras(muestreoP1_fsm);
	}
	if(htim == &htim2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d102      	bne.n	8000f4c <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		tiempo_t2=1; //500ms se han cumplido
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
		else // boton a false pasa el tiempo y vuele a muestras
		{
			empieza_muestras(muestreoP1_fsm);
		}*/

}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	200002f4 	.word	0x200002f4
 8000f5c:	20000244 	.word	0x20000244
 8000f60:	200002ac 	.word	0x200002ac
 8000f64:	20000240 	.word	0x20000240

08000f68 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // para el boton interrupciones
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0)
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d102      	bne.n	8000f7e <HAL_GPIO_EXTI_Callback+0x16>
  {
	  boton=1;
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x24>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
		  funcion_espera(muestreoP1_fsm);
		  //HAL_TIM_Base_Start_IT(&htim2);
	  }*/

  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000023c 	.word	0x2000023c

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <Error_Handler+0x8>
	...

08000f9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <MX_SPI1_Init+0x64>)
 8000fa2:	4a18      	ldr	r2, [pc, #96]	; (8001004 <MX_SPI1_Init+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_SPI1_Init+0x64>)
 8000fa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <MX_SPI1_Init+0x64>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_SPI1_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_SPI1_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_SPI1_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_SPI1_Init+0x64>)
 8000fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fcc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_SPI1_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <MX_SPI1_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_SPI1_Init+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <MX_SPI1_Init+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_SPI1_Init+0x64>)
 8000fe8:	220a      	movs	r2, #10
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <MX_SPI1_Init+0x64>)
 8000fee:	f003 fd99 	bl	8004b24 <HAL_SPI_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ff8:	f7ff ffca 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000250 	.word	0x20000250
 8001004:	40013000 	.word	0x40013000

08001008 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a19      	ldr	r2, [pc, #100]	; (800108c <HAL_SPI_MspInit+0x84>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d12b      	bne.n	8001082 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_SPI_MspInit+0x88>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <HAL_SPI_MspInit+0x88>)
 8001034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_SPI_MspInit+0x88>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_SPI_MspInit+0x88>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_SPI_MspInit+0x88>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_SPI_MspInit+0x88>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001062:	23e0      	movs	r3, #224	; 0xe0
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001072:	2305      	movs	r3, #5
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <HAL_SPI_MspInit+0x8c>)
 800107e:	f000 fb8b 	bl	8001798 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40013000 	.word	0x40013000
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_MspInit+0x5c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a13      	ldr	r2, [pc, #76]	; (80010f4 <HAL_MspInit+0x5c>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_MspInit+0x5c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_MspInit+0x5c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <HAL_MspInit+0x5c>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_MspInit+0x5c>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010d6:	2007      	movs	r0, #7
 80010d8:	f000 fb1c 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 fb22 	bl	800172a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f000 fb3b 	bl	8001762 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f9d2 	bl	80014ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001150:	f002 fef8 	bl	8003f44 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(boton_Pin);
 800115c:	2001      	movs	r0, #1
 800115e:	f000 fceb 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <TIM2_IRQHandler+0x10>)
 800116e:	f003 fe42 	bl	8004df6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200002ac 	.word	0x200002ac

0800117c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <TIM3_IRQHandler+0x10>)
 8001182:	f003 fe38 	bl	8004df6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200002f4 	.word	0x200002f4

08001190 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <OTG_FS_IRQHandler+0x10>)
 8001196:	f000 ff51 	bl	800203c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000071c 	.word	0x2000071c

080011a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <_sbrk+0x5c>)
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <_sbrk+0x60>)
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <_sbrk+0x64>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <_sbrk+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d207      	bcs.n	80011e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d4:	f007 fd54 	bl	8008c80 <__errno>
 80011d8:	4603      	mov	r3, r0
 80011da:	220c      	movs	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	e009      	b.n	80011f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <_sbrk+0x64>)
 80011f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20020000 	.word	0x20020000
 8001204:	00000400 	.word	0x00000400
 8001208:	200002a8 	.word	0x200002a8
 800120c:	20000b68 	.word	0x20000b68

08001210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <SystemInit+0x20>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <SystemInit+0x20>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <MX_TIM2_Init+0x98>)
 8001252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001256:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9600-1;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_TIM2_Init+0x98>)
 800125a:	f242 527f 	movw	r2, #9599	; 0x257f
 800125e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_TIM2_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_TIM2_Init+0x98>)
 8001268:	f241 3288 	movw	r2, #5000	; 0x1388
 800126c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_TIM2_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_TIM2_Init+0x98>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127a:	4814      	ldr	r0, [pc, #80]	; (80012cc <MX_TIM2_Init+0x98>)
 800127c:	f003 fcdb 	bl	8004c36 <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001286:	f7ff fe83 	bl	8000f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_TIM2_Init+0x98>)
 8001298:	f003 feb5 	bl	8005006 <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012a2:	f7ff fe75 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <MX_TIM2_Init+0x98>)
 80012b4:	f004 f8b0 	bl	8005418 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012be:	f7ff fe67 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200002ac 	.word	0x200002ac

080012d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <MX_TIM3_Init+0x94>)
 80012ee:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <MX_TIM3_Init+0x98>)
 80012f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_TIM3_Init+0x94>)
 80012f4:	f242 527f 	movw	r2, #9599	; 0x257f
 80012f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_TIM3_Init+0x94>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_TIM3_Init+0x94>)
 8001302:	f242 7210 	movw	r2, #10000	; 0x2710
 8001306:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_TIM3_Init+0x94>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_TIM3_Init+0x94>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <MX_TIM3_Init+0x94>)
 8001316:	f003 fc8e 	bl	8004c36 <HAL_TIM_Base_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001320:	f7ff fe36 	bl	8000f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001328:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4619      	mov	r1, r3
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <MX_TIM3_Init+0x94>)
 8001332:	f003 fe68 	bl	8005006 <HAL_TIM_ConfigClockSource>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800133c:	f7ff fe28 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_TIM3_Init+0x94>)
 800134e:	f004 f863 	bl	8005418 <HAL_TIMEx_MasterConfigSynchronization>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001358:	f7ff fe1a 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200002f4 	.word	0x200002f4
 8001368:	40000400 	.word	0x40000400

0800136c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800137c:	d116      	bne.n	80013ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_TIM_Base_MspInit+0x80>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_TIM_Base_MspInit+0x80>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_TIM_Base_MspInit+0x80>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	201c      	movs	r0, #28
 80013a0:	f000 f9c3 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013a4:	201c      	movs	r0, #28
 80013a6:	f000 f9dc 	bl	8001762 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013aa:	e01a      	b.n	80013e2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d115      	bne.n	80013e2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_TIM_Base_MspInit+0x80>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <HAL_TIM_Base_MspInit+0x80>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_TIM_Base_MspInit+0x80>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	201d      	movs	r0, #29
 80013d8:	f000 f9a7 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013dc:	201d      	movs	r0, #29
 80013de:	f000 f9c0 	bl	8001762 <HAL_NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40000400 	.word	0x40000400

080013f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800142c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013fa:	490e      	ldr	r1, [pc, #56]	; (8001434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013fc:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001410:	4c0b      	ldr	r4, [pc, #44]	; (8001440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800141e:	f7ff fef7 	bl	8001210 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001422:	f007 fc33 	bl	8008c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001426:	f7ff fcc9 	bl	8000dbc <main>
  bx  lr    
 800142a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800142c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001434:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8001438:	08008db4 	.word	0x08008db4
  ldr r2, =_sbss
 800143c:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8001440:	20000b68 	.word	0x20000b68

08001444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <ADC_IRQHandler>
	...

08001448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_Init+0x40>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <HAL_Init+0x40>)
 8001452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_Init+0x40>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <HAL_Init+0x40>)
 800145e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_Init+0x40>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_Init+0x40>)
 800146a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001470:	2003      	movs	r0, #3
 8001472:	f000 f94f 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001476:	2000      	movs	r0, #0
 8001478:	f000 f808 	bl	800148c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800147c:	f7ff fe0c 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023c00 	.word	0x40023c00

0800148c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_InitTick+0x54>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_InitTick+0x58>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f967 	bl	800177e <HAL_SYSTICK_Config>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00e      	b.n	80014d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	d80a      	bhi.n	80014d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c0:	2200      	movs	r2, #0
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f000 f92f 	bl	800172a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <HAL_InitTick+0x5c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e000      	b.n	80014d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200000c0 	.word	0x200000c0
 80014e4:	200000c8 	.word	0x200000c8
 80014e8:	200000c4 	.word	0x200000c4

080014ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_IncTick+0x20>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x24>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a04      	ldr	r2, [pc, #16]	; (8001510 <HAL_IncTick+0x24>)
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	200000c8 	.word	0x200000c8
 8001510:	2000033c 	.word	0x2000033c

08001514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return uwTick;
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_GetTick+0x14>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	2000033c 	.word	0x2000033c

0800152c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001534:	f7ff ffee 	bl	8001514 <HAL_GetTick>
 8001538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001544:	d005      	beq.n	8001552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_Delay+0x44>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001552:	bf00      	nop
 8001554:	f7ff ffde 	bl	8001514 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	429a      	cmp	r2, r3
 8001562:	d8f7      	bhi.n	8001554 <HAL_Delay+0x28>
  {
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200000c8 	.word	0x200000c8

08001574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001590:	4013      	ands	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800159c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <__NVIC_GetPriorityGrouping+0x18>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f003 0307 	and.w	r3, r3, #7
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db0b      	blt.n	8001602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f003 021f 	and.w	r2, r3, #31
 80015f0:	4907      	ldr	r1, [pc, #28]	; (8001610 <__NVIC_EnableIRQ+0x38>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	2001      	movs	r0, #1
 80015fa:	fa00 f202 	lsl.w	r2, r0, r2
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000e100 	.word	0xe000e100

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	; (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	; (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f1c3 0307 	rsb	r3, r3, #7
 8001682:	2b04      	cmp	r3, #4
 8001684:	bf28      	it	cs
 8001686:	2304      	movcs	r3, #4
 8001688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3304      	adds	r3, #4
 800168e:	2b06      	cmp	r3, #6
 8001690:	d902      	bls.n	8001698 <NVIC_EncodePriority+0x30>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b03      	subs	r3, #3
 8001696:	e000      	b.n	800169a <NVIC_EncodePriority+0x32>
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	f04f 32ff 	mov.w	r2, #4294967295
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43d9      	mvns	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	4313      	orrs	r3, r2
         );
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f7ff ff8e 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff29 	bl	8001574 <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff3e 	bl	80015bc <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff8e 	bl	8001668 <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5d 	bl	8001614 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff31 	bl	80015d8 <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffa2 	bl	80016d0 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e159      	b.n	8001a68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8148 	bne.w	8001a62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d005      	beq.n	80017ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d130      	bne.n	800184c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 0201 	and.w	r2, r3, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b03      	cmp	r3, #3
 8001856:	d017      	beq.n	8001888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d123      	bne.n	80018dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	08da      	lsrs	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	220f      	movs	r2, #15
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	69b9      	ldr	r1, [r7, #24]
 80018d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0203 	and.w	r2, r3, #3
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a2 	beq.w	8001a62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b57      	ldr	r3, [pc, #348]	; (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	4a56      	ldr	r2, [pc, #344]	; (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
 800192e:	4b54      	ldr	r3, [pc, #336]	; (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800193a:	4a52      	ldr	r2, [pc, #328]	; (8001a84 <HAL_GPIO_Init+0x2ec>)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3302      	adds	r3, #2
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x202>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <HAL_GPIO_Init+0x2f4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x1fe>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a47      	ldr	r2, [pc, #284]	; (8001a90 <HAL_GPIO_Init+0x2f8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x1fa>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <HAL_GPIO_Init+0x2fc>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x1f6>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a45      	ldr	r2, [pc, #276]	; (8001a98 <HAL_GPIO_Init+0x300>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x1f2>
 8001986:	2304      	movs	r3, #4
 8001988:	e008      	b.n	800199c <HAL_GPIO_Init+0x204>
 800198a:	2307      	movs	r3, #7
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x204>
 800198e:	2303      	movs	r3, #3
 8001990:	e004      	b.n	800199c <HAL_GPIO_Init+0x204>
 8001992:	2302      	movs	r3, #2
 8001994:	e002      	b.n	800199c <HAL_GPIO_Init+0x204>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_GPIO_Init+0x204>
 800199a:	2300      	movs	r3, #0
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	f002 0203 	and.w	r2, r2, #3
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	4093      	lsls	r3, r2
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ac:	4935      	ldr	r1, [pc, #212]	; (8001a84 <HAL_GPIO_Init+0x2ec>)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ba:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <HAL_GPIO_Init+0x304>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019de:	4a2f      	ldr	r2, [pc, #188]	; (8001a9c <HAL_GPIO_Init+0x304>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_GPIO_Init+0x304>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a08:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a0e:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a32:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a5c:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3301      	adds	r3, #1
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2b0f      	cmp	r3, #15
 8001a6c:	f67f aea2 	bls.w	80017b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40013800 	.word	0x40013800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40013c00 	.word	0x40013c00

08001aa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	e001      	b.n	8001ac2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aec:	e003      	b.n	8001af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	041a      	lsls	r2, r3, #16
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	619a      	str	r2, [r3, #24]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b14:	887a      	ldrh	r2, [r7, #2]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	041a      	lsls	r2, r3, #16
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43d9      	mvns	r1, r3
 8001b20:	887b      	ldrh	r3, [r7, #2]
 8001b22:	400b      	ands	r3, r1
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	619a      	str	r2, [r3, #24]
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fa06 	bl	8000f68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40013c00 	.word	0x40013c00

08001b68 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6a:	b08f      	sub	sp, #60	; 0x3c
 8001b6c:	af0a      	add	r7, sp, #40	; 0x28
 8001b6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e054      	b.n	8001c24 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d106      	bne.n	8001b9a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f006 fcf5 	bl	8008584 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d102      	bne.n	8001bb4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 fd21 	bl	8005600 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	687e      	ldr	r6, [r7, #4]
 8001bc6:	466d      	mov	r5, sp
 8001bc8:	f106 0410 	add.w	r4, r6, #16
 8001bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bdc:	1d33      	adds	r3, r6, #4
 8001bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001be0:	6838      	ldr	r0, [r7, #0]
 8001be2:	f003 fc9b 	bl	800551c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2101      	movs	r1, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 fd18 	bl	8005622 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	687e      	ldr	r6, [r7, #4]
 8001bfa:	466d      	mov	r5, sp
 8001bfc:	f106 0410 	add.w	r4, r6, #16
 8001c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c10:	1d33      	adds	r3, r6, #4
 8001c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c14:	6838      	ldr	r0, [r7, #0]
 8001c16:	f003 fea1 	bl	800595c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c2c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af04      	add	r7, sp, #16
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	70fb      	strb	r3, [r7, #3]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	70bb      	strb	r3, [r7, #2]
 8001c42:	4613      	mov	r3, r2
 8001c44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_HCD_HC_Init+0x28>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e076      	b.n	8001d42 <HAL_HCD_HC_Init+0x116>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	212c      	movs	r1, #44	; 0x2c
 8001c62:	fb01 f303 	mul.w	r3, r1, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	333d      	adds	r3, #61	; 0x3d
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	212c      	movs	r1, #44	; 0x2c
 8001c74:	fb01 f303 	mul.w	r3, r1, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	3338      	adds	r3, #56	; 0x38
 8001c7c:	787a      	ldrb	r2, [r7, #1]
 8001c7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	212c      	movs	r1, #44	; 0x2c
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3340      	adds	r3, #64	; 0x40
 8001c8e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c90:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	212c      	movs	r1, #44	; 0x2c
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3339      	adds	r3, #57	; 0x39
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	212c      	movs	r1, #44	; 0x2c
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	333f      	adds	r3, #63	; 0x3f
 8001cb2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001cb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	78ba      	ldrb	r2, [r7, #2]
 8001cbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cc0:	b2d0      	uxtb	r0, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	212c      	movs	r1, #44	; 0x2c
 8001cc6:	fb01 f303 	mul.w	r3, r1, r3
 8001cca:	4413      	add	r3, r2
 8001ccc:	333a      	adds	r3, #58	; 0x3a
 8001cce:	4602      	mov	r2, r0
 8001cd0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001cd2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	da09      	bge.n	8001cee <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	212c      	movs	r1, #44	; 0x2c
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	333b      	adds	r3, #59	; 0x3b
 8001ce8:	2201      	movs	r2, #1
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	e008      	b.n	8001d00 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	212c      	movs	r1, #44	; 0x2c
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	333b      	adds	r3, #59	; 0x3b
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	212c      	movs	r1, #44	; 0x2c
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	333c      	adds	r3, #60	; 0x3c
 8001d0e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d12:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	787c      	ldrb	r4, [r7, #1]
 8001d1a:	78ba      	ldrb	r2, [r7, #2]
 8001d1c:	78f9      	ldrb	r1, [r7, #3]
 8001d1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	4623      	mov	r3, r4
 8001d30:	f003 ff9a 	bl	8005c68 <USB_HC_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}

08001d4a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_HCD_HC_Halt+0x1e>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e00f      	b.n	8001d88 <HAL_HCD_HC_Halt+0x3e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 f9ea 	bl	8006152 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	4608      	mov	r0, r1
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4603      	mov	r3, r0
 8001da0:	70fb      	strb	r3, [r7, #3]
 8001da2:	460b      	mov	r3, r1
 8001da4:	70bb      	strb	r3, [r7, #2]
 8001da6:	4613      	mov	r3, r2
 8001da8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	212c      	movs	r1, #44	; 0x2c
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	333b      	adds	r3, #59	; 0x3b
 8001db8:	78ba      	ldrb	r2, [r7, #2]
 8001dba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	212c      	movs	r1, #44	; 0x2c
 8001dc2:	fb01 f303 	mul.w	r3, r1, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	333f      	adds	r3, #63	; 0x3f
 8001dca:	787a      	ldrb	r2, [r7, #1]
 8001dcc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001dce:	7c3b      	ldrb	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d112      	bne.n	8001dfa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	212c      	movs	r1, #44	; 0x2c
 8001dda:	fb01 f303 	mul.w	r3, r1, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	3342      	adds	r3, #66	; 0x42
 8001de2:	2203      	movs	r2, #3
 8001de4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	212c      	movs	r1, #44	; 0x2c
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	333d      	adds	r3, #61	; 0x3d
 8001df4:	7f3a      	ldrb	r2, [r7, #28]
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	e008      	b.n	8001e0c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	212c      	movs	r1, #44	; 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	3342      	adds	r3, #66	; 0x42
 8001e08:	2202      	movs	r2, #2
 8001e0a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001e0c:	787b      	ldrb	r3, [r7, #1]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	f200 80c6 	bhi.w	8001fa0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001e14:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001f8d 	.word	0x08001f8d
 8001e24:	08001e91 	.word	0x08001e91
 8001e28:	08001f0f 	.word	0x08001f0f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001e2c:	7c3b      	ldrb	r3, [r7, #16]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	f040 80b8 	bne.w	8001fa4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001e34:	78bb      	ldrb	r3, [r7, #2]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 80b4 	bne.w	8001fa4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001e3c:	8b3b      	ldrh	r3, [r7, #24]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d108      	bne.n	8001e54 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	212c      	movs	r1, #44	; 0x2c
 8001e48:	fb01 f303 	mul.w	r3, r1, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3355      	adds	r3, #85	; 0x55
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	212c      	movs	r1, #44	; 0x2c
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	3355      	adds	r3, #85	; 0x55
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d109      	bne.n	8001e7c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	3342      	adds	r3, #66	; 0x42
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e7a:	e093      	b.n	8001fa4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	3342      	adds	r3, #66	; 0x42
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	701a      	strb	r2, [r3, #0]
      break;
 8001e8e:	e089      	b.n	8001fa4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e90:	78bb      	ldrb	r3, [r7, #2]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d11d      	bne.n	8001ed2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3355      	adds	r3, #85	; 0x55
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3342      	adds	r3, #66	; 0x42
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ebc:	e073      	b.n	8001fa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	212c      	movs	r1, #44	; 0x2c
 8001ec4:	fb01 f303 	mul.w	r3, r1, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	3342      	adds	r3, #66	; 0x42
 8001ecc:	2202      	movs	r2, #2
 8001ece:	701a      	strb	r2, [r3, #0]
      break;
 8001ed0:	e069      	b.n	8001fa6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	212c      	movs	r1, #44	; 0x2c
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	3354      	adds	r3, #84	; 0x54
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d109      	bne.n	8001efa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3342      	adds	r3, #66	; 0x42
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
      break;
 8001ef8:	e055      	b.n	8001fa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	3342      	adds	r3, #66	; 0x42
 8001f08:	2202      	movs	r2, #2
 8001f0a:	701a      	strb	r2, [r3, #0]
      break;
 8001f0c:	e04b      	b.n	8001fa6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001f0e:	78bb      	ldrb	r3, [r7, #2]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d11d      	bne.n	8001f50 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	3355      	adds	r3, #85	; 0x55
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d109      	bne.n	8001f3c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	3342      	adds	r3, #66	; 0x42
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f3a:	e034      	b.n	8001fa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	212c      	movs	r1, #44	; 0x2c
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	3342      	adds	r3, #66	; 0x42
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	701a      	strb	r2, [r3, #0]
      break;
 8001f4e:	e02a      	b.n	8001fa6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	212c      	movs	r1, #44	; 0x2c
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3354      	adds	r3, #84	; 0x54
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	212c      	movs	r1, #44	; 0x2c
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	3342      	adds	r3, #66	; 0x42
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
      break;
 8001f76:	e016      	b.n	8001fa6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	212c      	movs	r1, #44	; 0x2c
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	3342      	adds	r3, #66	; 0x42
 8001f86:	2202      	movs	r2, #2
 8001f88:	701a      	strb	r2, [r3, #0]
      break;
 8001f8a:	e00c      	b.n	8001fa6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	212c      	movs	r1, #44	; 0x2c
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	3342      	adds	r3, #66	; 0x42
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
      break;
 8001f9e:	e002      	b.n	8001fa6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001fa0:	bf00      	nop
 8001fa2:	e000      	b.n	8001fa6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001fa4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3344      	adds	r3, #68	; 0x44
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	8b3a      	ldrh	r2, [r7, #24]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	202c      	movs	r0, #44	; 0x2c
 8001fc0:	fb00 f303 	mul.w	r3, r0, r3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	334c      	adds	r3, #76	; 0x4c
 8001fc8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	212c      	movs	r1, #44	; 0x2c
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3360      	adds	r3, #96	; 0x60
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3350      	adds	r3, #80	; 0x50
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	212c      	movs	r1, #44	; 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3339      	adds	r3, #57	; 0x39
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	3361      	adds	r3, #97	; 0x61
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	222c      	movs	r2, #44	; 0x2c
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	3338      	adds	r3, #56	; 0x38
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	18d1      	adds	r1, r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	f003 ff3e 	bl	8005eac <USB_HC_StartXfer>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop

0800203c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f003 fc3f 	bl	80058d6 <USB_GetMode>
 8002058:	4603      	mov	r3, r0
 800205a:	2b01      	cmp	r3, #1
 800205c:	f040 80f6 	bne.w	800224c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f003 fc23 	bl	80058b0 <USB_ReadInterrupts>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80ec 	beq.w	800224a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f003 fc1a 	bl	80058b0 <USB_ReadInterrupts>
 800207c:	4603      	mov	r3, r0
 800207e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002086:	d104      	bne.n	8002092 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002090:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f003 fc0a 	bl	80058b0 <USB_ReadInterrupts>
 800209c:	4603      	mov	r3, r0
 800209e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020a6:	d104      	bne.n	80020b2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 fbfa 	bl	80058b0 <USB_ReadInterrupts>
 80020bc:	4603      	mov	r3, r0
 80020be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020c6:	d104      	bne.n	80020d2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 fbea 	bl	80058b0 <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d103      	bne.n	80020ee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2202      	movs	r2, #2
 80020ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 fbdc 	bl	80058b0 <USB_ReadInterrupts>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002102:	d11c      	bne.n	800213e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800210c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800211e:	2110      	movs	r1, #16
 8002120:	6938      	ldr	r0, [r7, #16]
 8002122:	f003 facb 	bl	80056bc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002126:	6938      	ldr	r0, [r7, #16]
 8002128:	f003 fafc 	bl	8005724 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	4618      	mov	r0, r3
 8002134:	f003 fcd2 	bl	8005adc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f006 faa1 	bl	8008680 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f003 fbb4 	bl	80058b0 <USB_ReadInterrupts>
 8002148:	4603      	mov	r3, r0
 800214a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800214e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002152:	d102      	bne.n	800215a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f001 f89e 	bl	8003296 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f003 fba6 	bl	80058b0 <USB_ReadInterrupts>
 8002164:	4603      	mov	r3, r0
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b08      	cmp	r3, #8
 800216c:	d106      	bne.n	800217c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f006 fa6a 	bl	8008648 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2208      	movs	r2, #8
 800217a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f003 fb95 	bl	80058b0 <USB_ReadInterrupts>
 8002186:	4603      	mov	r3, r0
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b10      	cmp	r3, #16
 800218e:	d101      	bne.n	8002194 <HAL_HCD_IRQHandler+0x158>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <HAL_HCD_IRQHandler+0x15a>
 8002194:	2300      	movs	r3, #0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d012      	beq.n	80021c0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0210 	bic.w	r2, r2, #16
 80021a8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 ffa1 	bl	80030f2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0210 	orr.w	r2, r2, #16
 80021be:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f003 fb73 	bl	80058b0 <USB_ReadInterrupts>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021d4:	d13a      	bne.n	800224c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 ffa8 	bl	8006130 <USB_HC_ReadInterrupt>
 80021e0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	e025      	b.n	8002234 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d018      	beq.n	800222e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	015a      	lsls	r2, r3, #5
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002212:	d106      	bne.n	8002222 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	4619      	mov	r1, r3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f8ab 	bl	8002376 <HCD_HC_IN_IRQHandler>
 8002220:	e005      	b.n	800222e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 fbf9 	bl	8002a20 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3301      	adds	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	429a      	cmp	r2, r3
 800223c:	d3d4      	bcc.n	80021e8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002246:	615a      	str	r2, [r3, #20]
 8002248:	e000      	b.n	800224c <HAL_HCD_IRQHandler+0x210>
      return;
 800224a:	bf00      	nop
    }
  }
}
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_HCD_Start+0x16>
 8002264:	2302      	movs	r3, #2
 8002266:	e013      	b.n	8002290 <HAL_HCD_Start+0x3e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2101      	movs	r1, #1
 8002276:	4618      	mov	r0, r3
 8002278:	f003 fc94 	bl	8005ba4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f003 f9ac 	bl	80055de <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_HCD_Stop+0x16>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e00d      	b.n	80022ca <HAL_HCD_Stop+0x32>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 f882 	bl	80063c4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 fc36 	bl	8005b50 <USB_ResetPort>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	3360      	adds	r3, #96	; 0x60
 8002308:	781b      	ldrb	r3, [r3, #0]
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	3350      	adds	r3, #80	; 0x50
 8002330:	681b      	ldr	r3, [r3, #0]
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f003 fc7a 	bl	8005c44 <USB_GetCurrentFrame>
 8002350:	4603      	mov	r3, r0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f003 fc55 	bl	8005c16 <USB_GetHostSpeed>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d11a      	bne.n	80023dc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	461a      	mov	r2, r3
 80023b4:	2304      	movs	r3, #4
 80023b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3361      	adds	r3, #97	; 0x61
 80023c6:	2206      	movs	r2, #6
 80023c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 febc 	bl	8006152 <USB_HC_Halt>
 80023da:	e0af      	b.n	800253c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f2:	d11b      	bne.n	800242c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	461a      	mov	r2, r3
 8002402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002406:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	3361      	adds	r3, #97	; 0x61
 8002416:	2207      	movs	r2, #7
 8002418:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f003 fe94 	bl	8006152 <USB_HC_Halt>
 800242a:	e087      	b.n	800253c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b20      	cmp	r3, #32
 8002440:	d109      	bne.n	8002456 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	461a      	mov	r2, r3
 8002450:	2320      	movs	r3, #32
 8002452:	6093      	str	r3, [r2, #8]
 8002454:	e072      	b.n	800253c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b08      	cmp	r3, #8
 800246a:	d11a      	bne.n	80024a2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	461a      	mov	r2, r3
 800247a:	2308      	movs	r3, #8
 800247c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	3361      	adds	r3, #97	; 0x61
 800248c:	2205      	movs	r2, #5
 800248e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fe59 	bl	8006152 <USB_HC_Halt>
 80024a0:	e04c      	b.n	800253c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b8:	d11b      	bne.n	80024f2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	461a      	mov	r2, r3
 80024c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3361      	adds	r3, #97	; 0x61
 80024dc:	2208      	movs	r2, #8
 80024de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fe31 	bl	8006152 <USB_HC_Halt>
 80024f0:	e024      	b.n	800253c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002504:	2b80      	cmp	r3, #128	; 0x80
 8002506:	d119      	bne.n	800253c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	461a      	mov	r2, r3
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	3361      	adds	r3, #97	; 0x61
 8002528:	2206      	movs	r2, #6
 800252a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f003 fe0b 	bl	8006152 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002552:	d112      	bne.n	800257a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f003 fdf7 	bl	8006152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002570:	461a      	mov	r2, r3
 8002572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002576:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002578:	e24e      	b.n	8002a18 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	f040 80df 	bne.w	8002750 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d019      	beq.n	80025ce <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3348      	adds	r3, #72	; 0x48
 80025a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	0159      	lsls	r1, r3, #5
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80025bc:	1ad2      	subs	r2, r2, r3
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	202c      	movs	r0, #44	; 0x2c
 80025c4:	fb00 f303 	mul.w	r3, r0, r3
 80025c8:	440b      	add	r3, r1
 80025ca:	3350      	adds	r3, #80	; 0x50
 80025cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3361      	adds	r3, #97	; 0x61
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	335c      	adds	r3, #92	; 0x5c
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	461a      	mov	r2, r3
 8002600:	2301      	movs	r3, #1
 8002602:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	333f      	adds	r3, #63	; 0x3f
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d009      	beq.n	800262c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	333f      	adds	r3, #63	; 0x3f
 8002626:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002628:	2b02      	cmp	r3, #2
 800262a:	d111      	bne.n	8002650 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f003 fd8b 	bl	8006152 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	461a      	mov	r2, r3
 800264a:	2310      	movs	r3, #16
 800264c:	6093      	str	r3, [r2, #8]
 800264e:	e03a      	b.n	80026c6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	333f      	adds	r3, #63	; 0x3f
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d009      	beq.n	8002678 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	333f      	adds	r3, #63	; 0x3f
 8002672:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002674:	2b01      	cmp	r3, #1
 8002676:	d126      	bne.n	80026c6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	0151      	lsls	r1, r2, #5
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	440a      	add	r2, r1
 800268e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002696:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	3360      	adds	r3, #96	; 0x60
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	b2d9      	uxtb	r1, r3
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	202c      	movs	r0, #44	; 0x2c
 80026b4:	fb00 f303 	mul.w	r3, r0, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	3360      	adds	r3, #96	; 0x60
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f005 ffeb 	bl	800869c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d12b      	bne.n	8002726 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	3348      	adds	r3, #72	; 0x48
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	202c      	movs	r0, #44	; 0x2c
 80026e4:	fb00 f202 	mul.w	r2, r0, r2
 80026e8:	440a      	add	r2, r1
 80026ea:	3240      	adds	r2, #64	; 0x40
 80026ec:	8812      	ldrh	r2, [r2, #0]
 80026ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 818e 	beq.w	8002a18 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	3354      	adds	r3, #84	; 0x54
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	f083 0301 	eor.w	r3, r3, #1
 8002710:	b2d8      	uxtb	r0, r3
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3354      	adds	r3, #84	; 0x54
 8002720:	4602      	mov	r2, r0
 8002722:	701a      	strb	r2, [r3, #0]
}
 8002724:	e178      	b.n	8002a18 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3354      	adds	r3, #84	; 0x54
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	f083 0301 	eor.w	r3, r3, #1
 800273a:	b2d8      	uxtb	r0, r3
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	212c      	movs	r1, #44	; 0x2c
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	4413      	add	r3, r2
 8002748:	3354      	adds	r3, #84	; 0x54
 800274a:	4602      	mov	r2, r0
 800274c:	701a      	strb	r2, [r3, #0]
}
 800274e:	e163      	b.n	8002a18 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b02      	cmp	r3, #2
 8002764:	f040 80f6 	bne.w	8002954 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	3361      	adds	r3, #97	; 0x61
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d109      	bne.n	8002790 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	3360      	adds	r3, #96	; 0x60
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	e0c9      	b.n	8002924 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	3361      	adds	r3, #97	; 0x61
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d109      	bne.n	80027b8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	3360      	adds	r3, #96	; 0x60
 80027b2:	2205      	movs	r2, #5
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e0b5      	b.n	8002924 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	212c      	movs	r1, #44	; 0x2c
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	3361      	adds	r3, #97	; 0x61
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b06      	cmp	r3, #6
 80027ca:	d009      	beq.n	80027e0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	3361      	adds	r3, #97	; 0x61
 80027da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d150      	bne.n	8002882 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	335c      	adds	r3, #92	; 0x5c
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	202c      	movs	r0, #44	; 0x2c
 80027f8:	fb00 f303 	mul.w	r3, r0, r3
 80027fc:	440b      	add	r3, r1
 80027fe:	335c      	adds	r3, #92	; 0x5c
 8002800:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	335c      	adds	r3, #92	; 0x5c
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d912      	bls.n	800283c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	335c      	adds	r3, #92	; 0x5c
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3360      	adds	r3, #96	; 0x60
 8002836:	2204      	movs	r2, #4
 8002838:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800283a:	e073      	b.n	8002924 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3360      	adds	r3, #96	; 0x60
 800284a:	2202      	movs	r2, #2
 800284c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002864:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800286c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4413      	add	r3, r2
 8002876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287a:	461a      	mov	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002880:	e050      	b.n	8002924 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3361      	adds	r3, #97	; 0x61
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b03      	cmp	r3, #3
 8002894:	d122      	bne.n	80028dc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3360      	adds	r3, #96	; 0x60
 80028a4:	2202      	movs	r2, #2
 80028a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e023      	b.n	8002924 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3361      	adds	r3, #97	; 0x61
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b07      	cmp	r3, #7
 80028ee:	d119      	bne.n	8002924 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	335c      	adds	r3, #92	; 0x5c
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	202c      	movs	r0, #44	; 0x2c
 8002908:	fb00 f303 	mul.w	r3, r0, r3
 800290c:	440b      	add	r3, r1
 800290e:	335c      	adds	r3, #92	; 0x5c
 8002910:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3360      	adds	r3, #96	; 0x60
 8002920:	2204      	movs	r2, #4
 8002922:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	461a      	mov	r2, r3
 8002932:	2302      	movs	r3, #2
 8002934:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	b2d9      	uxtb	r1, r3
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	202c      	movs	r0, #44	; 0x2c
 8002940:	fb00 f303 	mul.w	r3, r0, r3
 8002944:	4413      	add	r3, r2
 8002946:	3360      	adds	r3, #96	; 0x60
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f005 fea5 	bl	800869c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002952:	e061      	b.n	8002a18 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b10      	cmp	r3, #16
 8002968:	d156      	bne.n	8002a18 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	333f      	adds	r3, #63	; 0x3f
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b03      	cmp	r3, #3
 800297c:	d111      	bne.n	80029a2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	212c      	movs	r1, #44	; 0x2c
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	4413      	add	r3, r2
 800298a:	335c      	adds	r3, #92	; 0x5c
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f003 fbd9 	bl	8006152 <USB_HC_Halt>
 80029a0:	e031      	b.n	8002a06 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	333f      	adds	r3, #63	; 0x3f
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	333f      	adds	r3, #63	; 0x3f
 80029c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d11d      	bne.n	8002a06 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	335c      	adds	r3, #92	; 0x5c
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d110      	bne.n	8002a06 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3361      	adds	r3, #97	; 0x61
 80029f2:	2203      	movs	r2, #3
 80029f4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f003 fba6 	bl	8006152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	461a      	mov	r2, r3
 8002a14:	2310      	movs	r3, #16
 8002a16:	6093      	str	r3, [r2, #8]
}
 8002a18:	bf00      	nop
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d11a      	bne.n	8002a86 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2304      	movs	r3, #4
 8002a60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3361      	adds	r3, #97	; 0x61
 8002a70:	2206      	movs	r2, #6
 8002a72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 fb67 	bl	8006152 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002a84:	e331      	b.n	80030ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d12e      	bne.n	8002afa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2320      	movs	r3, #32
 8002aac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	333d      	adds	r3, #61	; 0x3d
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	f040 8313 	bne.w	80030ea <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	333d      	adds	r3, #61	; 0x3d
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3360      	adds	r3, #96	; 0x60
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 fb2d 	bl	8006152 <USB_HC_Halt>
}
 8002af8:	e2f7      	b.n	80030ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b10:	d112      	bne.n	8002b38 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b24:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 fb0e 	bl	8006152 <USB_HC_Halt>
}
 8002b36:	e2d8      	b.n	80030ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d140      	bne.n	8002bd0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	335c      	adds	r3, #92	; 0x5c
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b72:	2b40      	cmp	r3, #64	; 0x40
 8002b74:	d111      	bne.n	8002b9a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	333d      	adds	r3, #61	; 0x3d
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	2340      	movs	r3, #64	; 0x40
 8002b98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2301      	movs	r3, #1
 8002baa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3361      	adds	r3, #97	; 0x61
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 fac2 	bl	8006152 <USB_HC_Halt>
}
 8002bce:	e28c      	b.n	80030ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be2:	2b40      	cmp	r3, #64	; 0x40
 8002be4:	d12c      	bne.n	8002c40 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3361      	adds	r3, #97	; 0x61
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	333d      	adds	r3, #61	; 0x3d
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	335c      	adds	r3, #92	; 0x5c
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 fa93 	bl	8006152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2340      	movs	r3, #64	; 0x40
 8002c3c:	6093      	str	r3, [r2, #8]
}
 8002c3e:	e254      	b.n	80030ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d11a      	bne.n	8002c8c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c62:	461a      	mov	r2, r3
 8002c64:	2308      	movs	r3, #8
 8002c66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3361      	adds	r3, #97	; 0x61
 8002c76:	2205      	movs	r2, #5
 8002c78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 fa64 	bl	8006152 <USB_HC_Halt>
}
 8002c8a:	e22e      	b.n	80030ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d140      	bne.n	8002d24 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	212c      	movs	r1, #44	; 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	335c      	adds	r3, #92	; 0x5c
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3361      	adds	r3, #97	; 0x61
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	333d      	adds	r3, #61	; 0x3d
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d112      	bne.n	8002d00 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	333c      	adds	r3, #60	; 0x3c
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d108      	bne.n	8002d00 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	333d      	adds	r3, #61	; 0x3d
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 fa21 	bl	8006152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2310      	movs	r3, #16
 8002d20:	6093      	str	r3, [r2, #8]
}
 8002d22:	e1e2      	b.n	80030ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b80      	cmp	r3, #128	; 0x80
 8002d38:	d164      	bne.n	8002e04 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d111      	bne.n	8002d66 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3361      	adds	r3, #97	; 0x61
 8002d50:	2206      	movs	r2, #6
 8002d52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f003 f9f7 	bl	8006152 <USB_HC_Halt>
 8002d64:	e044      	b.n	8002df0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	335c      	adds	r3, #92	; 0x5c
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	202c      	movs	r0, #44	; 0x2c
 8002d7e:	fb00 f303 	mul.w	r3, r0, r3
 8002d82:	440b      	add	r3, r1
 8002d84:	335c      	adds	r3, #92	; 0x5c
 8002d86:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	335c      	adds	r3, #92	; 0x5c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d920      	bls.n	8002dde <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	335c      	adds	r3, #92	; 0x5c
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	3360      	adds	r3, #96	; 0x60
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	b2d9      	uxtb	r1, r3
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	202c      	movs	r0, #44	; 0x2c
 8002dca:	fb00 f303 	mul.w	r3, r0, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3360      	adds	r3, #96	; 0x60
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f005 fc60 	bl	800869c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ddc:	e008      	b.n	8002df0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3360      	adds	r3, #96	; 0x60
 8002dec:	2202      	movs	r2, #2
 8002dee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	6093      	str	r3, [r2, #8]
}
 8002e02:	e172      	b.n	80030ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1a:	d11b      	bne.n	8002e54 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	3361      	adds	r3, #97	; 0x61
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 f98a 	bl	8006152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e50:	6093      	str	r3, [r2, #8]
}
 8002e52:	e14a      	b.n	80030ea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	f040 813f 	bne.w	80030ea <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3361      	adds	r3, #97	; 0x61
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d17d      	bne.n	8002f7c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3360      	adds	r3, #96	; 0x60
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	333f      	adds	r3, #63	; 0x3f
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d00a      	beq.n	8002ebc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	333f      	adds	r3, #63	; 0x3f
 8002eb4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	f040 8100 	bne.w	80030bc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d113      	bne.n	8002eec <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3355      	adds	r3, #85	; 0x55
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	f083 0301 	eor.w	r3, r3, #1
 8002ed8:	b2d8      	uxtb	r0, r3
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3355      	adds	r3, #85	; 0x55
 8002ee8:	4602      	mov	r2, r0
 8002eea:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	f040 80e3 	bne.w	80030bc <HCD_HC_OUT_IRQHandler+0x69c>
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	334c      	adds	r3, #76	; 0x4c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80d8 	beq.w	80030bc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	334c      	adds	r3, #76	; 0x4c
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	202c      	movs	r0, #44	; 0x2c
 8002f22:	fb00 f202 	mul.w	r2, r0, r2
 8002f26:	440a      	add	r2, r1
 8002f28:	3240      	adds	r2, #64	; 0x40
 8002f2a:	8812      	ldrh	r2, [r2, #0]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	202c      	movs	r0, #44	; 0x2c
 8002f36:	fb00 f202 	mul.w	r2, r0, r2
 8002f3a:	440a      	add	r2, r1
 8002f3c:	3240      	adds	r2, #64	; 0x40
 8002f3e:	8812      	ldrh	r2, [r2, #0]
 8002f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80b5 	beq.w	80030bc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3355      	adds	r3, #85	; 0x55
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	f083 0301 	eor.w	r3, r3, #1
 8002f66:	b2d8      	uxtb	r0, r3
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	212c      	movs	r1, #44	; 0x2c
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	3355      	adds	r3, #85	; 0x55
 8002f76:	4602      	mov	r2, r0
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e09f      	b.n	80030bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3361      	adds	r3, #97	; 0x61
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d109      	bne.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3360      	adds	r3, #96	; 0x60
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e08b      	b.n	80030bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	3361      	adds	r3, #97	; 0x61
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d109      	bne.n	8002fcc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	212c      	movs	r1, #44	; 0x2c
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3360      	adds	r3, #96	; 0x60
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	701a      	strb	r2, [r3, #0]
 8002fca:	e077      	b.n	80030bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	212c      	movs	r1, #44	; 0x2c
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3361      	adds	r3, #97	; 0x61
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d109      	bne.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	212c      	movs	r1, #44	; 0x2c
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	4413      	add	r3, r2
 8002fec:	3360      	adds	r3, #96	; 0x60
 8002fee:	2205      	movs	r2, #5
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	e063      	b.n	80030bc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	212c      	movs	r1, #44	; 0x2c
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	3361      	adds	r3, #97	; 0x61
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b06      	cmp	r3, #6
 8003006:	d009      	beq.n	800301c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3361      	adds	r3, #97	; 0x61
 8003016:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003018:	2b08      	cmp	r3, #8
 800301a:	d14f      	bne.n	80030bc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	335c      	adds	r3, #92	; 0x5c
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	202c      	movs	r0, #44	; 0x2c
 8003034:	fb00 f303 	mul.w	r3, r0, r3
 8003038:	440b      	add	r3, r1
 800303a:	335c      	adds	r3, #92	; 0x5c
 800303c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	335c      	adds	r3, #92	; 0x5c
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d912      	bls.n	8003078 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	335c      	adds	r3, #92	; 0x5c
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	3360      	adds	r3, #96	; 0x60
 8003072:	2204      	movs	r2, #4
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	e021      	b.n	80030bc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	212c      	movs	r1, #44	; 0x2c
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	3360      	adds	r3, #96	; 0x60
 8003086:	2202      	movs	r2, #2
 8003088:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030a0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030a8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b6:	461a      	mov	r2, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c8:	461a      	mov	r2, r3
 80030ca:	2302      	movs	r3, #2
 80030cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	b2d9      	uxtb	r1, r3
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	202c      	movs	r0, #44	; 0x2c
 80030d8:	fb00 f303 	mul.w	r3, r0, r3
 80030dc:	4413      	add	r3, r2
 80030de:	3360      	adds	r3, #96	; 0x60
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f005 fad9 	bl	800869c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80030ea:	bf00      	nop
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b08a      	sub	sp, #40	; 0x28
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	0c5b      	lsrs	r3, r3, #17
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003126:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d004      	beq.n	8003138 <HCD_RXQLVL_IRQHandler+0x46>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b05      	cmp	r3, #5
 8003132:	f000 80a9 	beq.w	8003288 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003136:	e0aa      	b.n	800328e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80a6 	beq.w	800328c <HCD_RXQLVL_IRQHandler+0x19a>
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	3344      	adds	r3, #68	; 0x44
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 809b 	beq.w	800328c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3350      	adds	r3, #80	; 0x50
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	441a      	add	r2, r3
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	202c      	movs	r0, #44	; 0x2c
 8003170:	fb00 f303 	mul.w	r3, r0, r3
 8003174:	440b      	add	r3, r1
 8003176:	334c      	adds	r3, #76	; 0x4c
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d87a      	bhi.n	8003274 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	3344      	adds	r3, #68	; 0x44
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	b292      	uxth	r2, r2
 8003196:	4619      	mov	r1, r3
 8003198:	f002 fb32 	bl	8005800 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3344      	adds	r3, #68	; 0x44
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	441a      	add	r2, r3
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	202c      	movs	r0, #44	; 0x2c
 80031b6:	fb00 f303 	mul.w	r3, r0, r3
 80031ba:	440b      	add	r3, r1
 80031bc:	3344      	adds	r3, #68	; 0x44
 80031be:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	3350      	adds	r3, #80	; 0x50
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	441a      	add	r2, r3
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	202c      	movs	r0, #44	; 0x2c
 80031da:	fb00 f303 	mul.w	r3, r0, r3
 80031de:	440b      	add	r3, r1
 80031e0:	3350      	adds	r3, #80	; 0x50
 80031e2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	0cdb      	lsrs	r3, r3, #19
 80031f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031f8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3340      	adds	r3, #64	; 0x40
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4293      	cmp	r3, r2
 8003210:	d13c      	bne.n	800328c <HCD_RXQLVL_IRQHandler+0x19a>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d039      	beq.n	800328c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	4413      	add	r3, r2
 8003220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800322e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003236:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	461a      	mov	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	3354      	adds	r3, #84	; 0x54
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	f083 0301 	eor.w	r3, r3, #1
 800325e:	b2d8      	uxtb	r0, r3
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3354      	adds	r3, #84	; 0x54
 800326e:	4602      	mov	r2, r0
 8003270:	701a      	strb	r2, [r3, #0]
      break;
 8003272:	e00b      	b.n	800328c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	3360      	adds	r3, #96	; 0x60
 8003282:	2204      	movs	r2, #4
 8003284:	701a      	strb	r2, [r3, #0]
      break;
 8003286:	e001      	b.n	800328c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003288:	bf00      	nop
 800328a:	e000      	b.n	800328e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800328c:	bf00      	nop
  }
}
 800328e:	bf00      	nop
 8003290:	3728      	adds	r7, #40	; 0x28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032c2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d10b      	bne.n	80032e6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d102      	bne.n	80032de <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f005 f9c3 	bl	8008664 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d132      	bne.n	8003356 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f043 0308 	orr.w	r3, r3, #8
 80032f6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d126      	bne.n	8003350 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d113      	bne.n	8003332 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003310:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003314:	d106      	bne.n	8003324 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2102      	movs	r1, #2
 800331c:	4618      	mov	r0, r3
 800331e:	f002 fbdd 	bl	8005adc <USB_InitFSLSPClkSel>
 8003322:	e011      	b.n	8003348 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2101      	movs	r1, #1
 800332a:	4618      	mov	r0, r3
 800332c:	f002 fbd6 	bl	8005adc <USB_InitFSLSPClkSel>
 8003330:	e00a      	b.n	8003348 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d106      	bne.n	8003348 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003340:	461a      	mov	r2, r3
 8003342:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003346:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f005 f9b5 	bl	80086b8 <HAL_HCD_PortEnabled_Callback>
 800334e:	e002      	b.n	8003356 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f005 f9bf 	bl	80086d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b20      	cmp	r3, #32
 800335e:	d103      	bne.n	8003368 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f043 0320 	orr.w	r3, r3, #32
 8003366:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800336e:	461a      	mov	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	bf00      	nop
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e12b      	b.n	80035e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd f9fc 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2224      	movs	r2, #36	; 0x24
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033e0:	f001 fa3c 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 80033e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4a81      	ldr	r2, [pc, #516]	; (80035f0 <HAL_I2C_Init+0x274>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d807      	bhi.n	8003400 <HAL_I2C_Init+0x84>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4a80      	ldr	r2, [pc, #512]	; (80035f4 <HAL_I2C_Init+0x278>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	bf94      	ite	ls
 80033f8:	2301      	movls	r3, #1
 80033fa:	2300      	movhi	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e006      	b.n	800340e <HAL_I2C_Init+0x92>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a7d      	ldr	r2, [pc, #500]	; (80035f8 <HAL_I2C_Init+0x27c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	bf94      	ite	ls
 8003408:	2301      	movls	r3, #1
 800340a:	2300      	movhi	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0e7      	b.n	80035e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a78      	ldr	r2, [pc, #480]	; (80035fc <HAL_I2C_Init+0x280>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	0c9b      	lsrs	r3, r3, #18
 8003420:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a6a      	ldr	r2, [pc, #424]	; (80035f0 <HAL_I2C_Init+0x274>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d802      	bhi.n	8003450 <HAL_I2C_Init+0xd4>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3301      	adds	r3, #1
 800344e:	e009      	b.n	8003464 <HAL_I2C_Init+0xe8>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	4a69      	ldr	r2, [pc, #420]	; (8003600 <HAL_I2C_Init+0x284>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	3301      	adds	r3, #1
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	430b      	orrs	r3, r1
 800346a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003476:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	495c      	ldr	r1, [pc, #368]	; (80035f0 <HAL_I2C_Init+0x274>)
 8003480:	428b      	cmp	r3, r1
 8003482:	d819      	bhi.n	80034b8 <HAL_I2C_Init+0x13c>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1e59      	subs	r1, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003492:	1c59      	adds	r1, r3, #1
 8003494:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003498:	400b      	ands	r3, r1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_I2C_Init+0x138>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1e59      	subs	r1, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ac:	3301      	adds	r3, #1
 80034ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b2:	e051      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 80034b4:	2304      	movs	r3, #4
 80034b6:	e04f      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d111      	bne.n	80034e4 <HAL_I2C_Init+0x168>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1e58      	subs	r0, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	440b      	add	r3, r1
 80034ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d2:	3301      	adds	r3, #1
 80034d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	e012      	b.n	800350a <HAL_I2C_Init+0x18e>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1e58      	subs	r0, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	0099      	lsls	r1, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Init+0x196>
 800350e:	2301      	movs	r3, #1
 8003510:	e022      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10e      	bne.n	8003538 <HAL_I2C_Init+0x1bc>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1e58      	subs	r0, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6859      	ldr	r1, [r3, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	440b      	add	r3, r1
 8003528:	fbb0 f3f3 	udiv	r3, r0, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003536:	e00f      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1e58      	subs	r0, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	0099      	lsls	r1, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	fbb0 f3f3 	udiv	r3, r0, r3
 800354e:	3301      	adds	r3, #1
 8003550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	6809      	ldr	r1, [r1, #0]
 800355c:	4313      	orrs	r3, r2
 800355e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6911      	ldr	r1, [r2, #16]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68d2      	ldr	r2, [r2, #12]
 8003592:	4311      	orrs	r1, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	430b      	orrs	r3, r1
 800359a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	000186a0 	.word	0x000186a0
 80035f4:	001e847f 	.word	0x001e847f
 80035f8:	003d08ff 	.word	0x003d08ff
 80035fc:	431bde83 	.word	0x431bde83
 8003600:	10624dd3 	.word	0x10624dd3

08003604 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e128      	b.n	8003868 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a90      	ldr	r2, [pc, #576]	; (8003870 <HAL_I2S_Init+0x26c>)
 800362e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7fd f95b 	bl	80008ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2202      	movs	r2, #2
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800364c:	f023 030f 	bic.w	r3, r3, #15
 8003650:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2202      	movs	r2, #2
 8003658:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d060      	beq.n	8003724 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800366a:	2310      	movs	r3, #16
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	e001      	b.n	8003674 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003670:	2320      	movs	r3, #32
 8003672:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b20      	cmp	r3, #32
 800367a:	d802      	bhi.n	8003682 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003682:	2001      	movs	r0, #1
 8003684:	f001 f9ee 	bl	8004a64 <HAL_RCCEx_GetPeriphCLKFreq>
 8003688:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003692:	d125      	bne.n	80036e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d010      	beq.n	80036be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	461a      	mov	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b8:	3305      	adds	r3, #5
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	e01f      	b.n	80036fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	461a      	mov	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	3305      	adds	r3, #5
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	e00e      	b.n	80036fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	461a      	mov	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fa:	3305      	adds	r3, #5
 80036fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4a5c      	ldr	r2, [pc, #368]	; (8003874 <HAL_I2S_Init+0x270>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	08db      	lsrs	r3, r3, #3
 8003708:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e003      	b.n	800372c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003724:	2302      	movs	r3, #2
 8003726:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d902      	bls.n	8003738 <HAL_I2S_Init+0x134>
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2bff      	cmp	r3, #255	; 0xff
 8003736:	d907      	bls.n	8003748 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373c:	f043 0210 	orr.w	r2, r3, #16
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e08f      	b.n	8003868 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	ea42 0103 	orr.w	r1, r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	430a      	orrs	r2, r1
 800375a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003766:	f023 030f 	bic.w	r3, r3, #15
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6851      	ldr	r1, [r2, #4]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6892      	ldr	r2, [r2, #8]
 8003772:	4311      	orrs	r1, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68d2      	ldr	r2, [r2, #12]
 8003778:	4311      	orrs	r1, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6992      	ldr	r2, [r2, #24]
 800377e:	430a      	orrs	r2, r1
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800378a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d161      	bne.n	8003858 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a38      	ldr	r2, [pc, #224]	; (8003878 <HAL_I2S_Init+0x274>)
 8003798:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a37      	ldr	r2, [pc, #220]	; (800387c <HAL_I2S_Init+0x278>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_I2S_Init+0x1a4>
 80037a4:	4b36      	ldr	r3, [pc, #216]	; (8003880 <HAL_I2S_Init+0x27c>)
 80037a6:	e001      	b.n	80037ac <HAL_I2S_Init+0x1a8>
 80037a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	4932      	ldr	r1, [pc, #200]	; (800387c <HAL_I2S_Init+0x278>)
 80037b4:	428a      	cmp	r2, r1
 80037b6:	d101      	bne.n	80037bc <HAL_I2S_Init+0x1b8>
 80037b8:	4a31      	ldr	r2, [pc, #196]	; (8003880 <HAL_I2S_Init+0x27c>)
 80037ba:	e001      	b.n	80037c0 <HAL_I2S_Init+0x1bc>
 80037bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80037c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037c4:	f023 030f 	bic.w	r3, r3, #15
 80037c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2b      	ldr	r2, [pc, #172]	; (800387c <HAL_I2S_Init+0x278>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d101      	bne.n	80037d8 <HAL_I2S_Init+0x1d4>
 80037d4:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_I2S_Init+0x27c>)
 80037d6:	e001      	b.n	80037dc <HAL_I2S_Init+0x1d8>
 80037d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037dc:	2202      	movs	r2, #2
 80037de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a25      	ldr	r2, [pc, #148]	; (800387c <HAL_I2S_Init+0x278>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_I2S_Init+0x1ea>
 80037ea:	4b25      	ldr	r3, [pc, #148]	; (8003880 <HAL_I2S_Init+0x27c>)
 80037ec:	e001      	b.n	80037f2 <HAL_I2S_Init+0x1ee>
 80037ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fe:	d003      	beq.n	8003808 <HAL_I2S_Init+0x204>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d103      	bne.n	8003810 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	e001      	b.n	8003814 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003810:	2300      	movs	r3, #0
 8003812:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800381e:	4313      	orrs	r3, r2
 8003820:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003828:	4313      	orrs	r3, r2
 800382a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003832:	4313      	orrs	r3, r2
 8003834:	b29a      	uxth	r2, r3
 8003836:	897b      	ldrh	r3, [r7, #10]
 8003838:	4313      	orrs	r3, r2
 800383a:	b29b      	uxth	r3, r3
 800383c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003840:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a0d      	ldr	r2, [pc, #52]	; (800387c <HAL_I2S_Init+0x278>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_I2S_Init+0x24c>
 800384c:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <HAL_I2S_Init+0x27c>)
 800384e:	e001      	b.n	8003854 <HAL_I2S_Init+0x250>
 8003850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003854:	897a      	ldrh	r2, [r7, #10]
 8003856:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3720      	adds	r7, #32
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	0800397b 	.word	0x0800397b
 8003874:	cccccccd 	.word	0xcccccccd
 8003878:	08003a91 	.word	0x08003a91
 800387c:	40003800 	.word	0x40003800
 8003880:	40003400 	.word	0x40003400

08003884 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	881a      	ldrh	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c9a      	adds	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10e      	bne.n	8003914 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003904:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff ffb8 	bl	8003884 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	b292      	uxth	r2, r2
 8003930:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	1c9a      	adds	r2, r3, #2
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10e      	bne.n	8003972 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003962:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff93 	bl	8003898 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b04      	cmp	r3, #4
 8003994:	d13a      	bne.n	8003a0c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d109      	bne.n	80039b4 <I2S_IRQHandler+0x3a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d102      	bne.n	80039b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff ffb4 	bl	800391c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	d126      	bne.n	8003a0c <I2S_IRQHandler+0x92>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d11f      	bne.n	8003a0c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039dc:	2300      	movs	r3, #0
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	f043 0202 	orr.w	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ff50 	bl	80038ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d136      	bne.n	8003a86 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d109      	bne.n	8003a36 <I2S_IRQHandler+0xbc>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2c:	2b80      	cmp	r3, #128	; 0x80
 8003a2e:	d102      	bne.n	8003a36 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff45 	bl	80038c0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d122      	bne.n	8003a86 <I2S_IRQHandler+0x10c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d11b      	bne.n	8003a86 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a5c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f043 0204 	orr.w	r2, r3, #4
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff ff13 	bl	80038ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a92      	ldr	r2, [pc, #584]	; (8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003aaa:	4b92      	ldr	r3, [pc, #584]	; (8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003aac:	e001      	b.n	8003ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a8b      	ldr	r2, [pc, #556]	; (8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d101      	bne.n	8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ac8:	4b8a      	ldr	r3, [pc, #552]	; (8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003aca:	e001      	b.n	8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003adc:	d004      	beq.n	8003ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f040 8099 	bne.w	8003c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d107      	bne.n	8003b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f925 	bl	8003d4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d107      	bne.n	8003b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f9c8 	bl	8003eac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d13a      	bne.n	8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d035      	beq.n	8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a6e      	ldr	r2, [pc, #440]	; (8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d101      	bne.n	8003b3e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003b3a:	4b6e      	ldr	r3, [pc, #440]	; (8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b3c:	e001      	b.n	8003b42 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003b3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4969      	ldr	r1, [pc, #420]	; (8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b4a:	428b      	cmp	r3, r1
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003b4e:	4b69      	ldr	r3, [pc, #420]	; (8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b50:	e001      	b.n	8003b56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003b52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b5a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f043 0202 	orr.w	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff fe88 	bl	80038ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	f040 80c3 	bne.w	8003d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80bd 	beq.w	8003d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bc2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a49      	ldr	r2, [pc, #292]	; (8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d101      	bne.n	8003bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003bce:	4b49      	ldr	r3, [pc, #292]	; (8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bd0:	e001      	b.n	8003bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4944      	ldr	r1, [pc, #272]	; (8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bde:	428b      	cmp	r3, r1
 8003be0:	d101      	bne.n	8003be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003be2:	4b44      	ldr	r3, [pc, #272]	; (8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003be4:	e001      	b.n	8003bea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003be6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	f043 0204 	orr.w	r2, r3, #4
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff fe4a 	bl	80038ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c18:	e089      	b.n	8003d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d107      	bne.n	8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f8be 	bl	8003db0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d107      	bne.n	8003c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f8fd 	bl	8003e48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c54:	2b40      	cmp	r3, #64	; 0x40
 8003c56:	d12f      	bne.n	8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d02a      	beq.n	8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c70:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d101      	bne.n	8003c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c7c:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c7e:	e001      	b.n	8003c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4919      	ldr	r1, [pc, #100]	; (8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	d101      	bne.n	8003c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c90:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c92:	e001      	b.n	8003c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	f043 0202 	orr.w	r2, r3, #2
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff fdfa 	bl	80038ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d136      	bne.n	8003d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d031      	beq.n	8003d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003cd6:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cd8:	e001      	b.n	8003cde <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003cda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4902      	ldr	r1, [pc, #8]	; (8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ce6:	428b      	cmp	r3, r1
 8003ce8:	d106      	bne.n	8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003cea:	4b02      	ldr	r3, [pc, #8]	; (8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cec:	e006      	b.n	8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003cee:	bf00      	nop
 8003cf0:	40003800 	.word	0x40003800
 8003cf4:	40003400 	.word	0x40003400
 8003cf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d00:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	f043 0204 	orr.w	r2, r3, #4
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff fdc0 	bl	80038ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d2c:	e000      	b.n	8003d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d2e:	bf00      	nop
}
 8003d30:	bf00      	nop
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	1c99      	adds	r1, r3, #2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6251      	str	r1, [r2, #36]	; 0x24
 8003d5e:	881a      	ldrh	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d113      	bne.n	8003da6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ffc9 	bl	8003d38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	1c99      	adds	r1, r3, #2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6251      	str	r1, [r2, #36]	; 0x24
 8003dc2:	8819      	ldrh	r1, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <I2SEx_TxISR_I2SExt+0x90>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <I2SEx_TxISR_I2SExt+0x22>
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <I2SEx_TxISR_I2SExt+0x94>)
 8003dd0:	e001      	b.n	8003dd6 <I2SEx_TxISR_I2SExt+0x26>
 8003dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd6:	460a      	mov	r2, r1
 8003dd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d121      	bne.n	8003e36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a12      	ldr	r2, [pc, #72]	; (8003e40 <I2SEx_TxISR_I2SExt+0x90>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d101      	bne.n	8003e00 <I2SEx_TxISR_I2SExt+0x50>
 8003dfc:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <I2SEx_TxISR_I2SExt+0x94>)
 8003dfe:	e001      	b.n	8003e04 <I2SEx_TxISR_I2SExt+0x54>
 8003e00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	490d      	ldr	r1, [pc, #52]	; (8003e40 <I2SEx_TxISR_I2SExt+0x90>)
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	d101      	bne.n	8003e14 <I2SEx_TxISR_I2SExt+0x64>
 8003e10:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <I2SEx_TxISR_I2SExt+0x94>)
 8003e12:	e001      	b.n	8003e18 <I2SEx_TxISR_I2SExt+0x68>
 8003e14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d106      	bne.n	8003e36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff81 	bl	8003d38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40003800 	.word	0x40003800
 8003e44:	40003400 	.word	0x40003400

08003e48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68d8      	ldr	r0, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	1c99      	adds	r1, r3, #2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e60:	b282      	uxth	r2, r0
 8003e62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d113      	bne.n	8003ea4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ff4a 	bl	8003d38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a20      	ldr	r2, [pc, #128]	; (8003f3c <I2SEx_RxISR_I2SExt+0x90>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <I2SEx_RxISR_I2SExt+0x16>
 8003ebe:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <I2SEx_RxISR_I2SExt+0x94>)
 8003ec0:	e001      	b.n	8003ec6 <I2SEx_RxISR_I2SExt+0x1a>
 8003ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec6:	68d8      	ldr	r0, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	1c99      	adds	r1, r3, #2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ed2:	b282      	uxth	r2, r0
 8003ed4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d121      	bne.n	8003f32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a12      	ldr	r2, [pc, #72]	; (8003f3c <I2SEx_RxISR_I2SExt+0x90>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d101      	bne.n	8003efc <I2SEx_RxISR_I2SExt+0x50>
 8003ef8:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <I2SEx_RxISR_I2SExt+0x94>)
 8003efa:	e001      	b.n	8003f00 <I2SEx_RxISR_I2SExt+0x54>
 8003efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	490d      	ldr	r1, [pc, #52]	; (8003f3c <I2SEx_RxISR_I2SExt+0x90>)
 8003f08:	428b      	cmp	r3, r1
 8003f0a:	d101      	bne.n	8003f10 <I2SEx_RxISR_I2SExt+0x64>
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <I2SEx_RxISR_I2SExt+0x94>)
 8003f0e:	e001      	b.n	8003f14 <I2SEx_RxISR_I2SExt+0x68>
 8003f10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d106      	bne.n	8003f32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff ff03 	bl	8003d38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40003800 	.word	0x40003800
 8003f40:	40003400 	.word	0x40003400

08003f44 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003f54:	f000 f808 	bl	8003f68 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003f58:	4b02      	ldr	r3, [pc, #8]	; (8003f64 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003f5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f5e:	615a      	str	r2, [r3, #20]
  }
}
 8003f60:	bf00      	nop
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40013c00 	.word	0x40013c00

08003f68 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e269      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d077      	beq.n	8004086 <HAL_RCC_OscConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f96:	4b89      	ldr	r3, [pc, #548]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d00c      	beq.n	8003fbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fa2:	4b86      	ldr	r3, [pc, #536]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d112      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fae:	4b83      	ldr	r3, [pc, #524]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fba:	d10b      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fbc:	4b7f      	ldr	r3, [pc, #508]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d05d      	beq.n	8004084 <HAL_RCC_OscConfig+0x10c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d159      	bne.n	8004084 <HAL_RCC_OscConfig+0x10c>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e244      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fdc:	d106      	bne.n	8003fec <HAL_RCC_OscConfig+0x74>
 8003fde:	4b77      	ldr	r3, [pc, #476]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a76      	ldr	r2, [pc, #472]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e01d      	b.n	8004028 <HAL_RCC_OscConfig+0xb0>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCC_OscConfig+0x98>
 8003ff6:	4b71      	ldr	r3, [pc, #452]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a70      	ldr	r2, [pc, #448]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8003ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	4b6e      	ldr	r3, [pc, #440]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a6d      	ldr	r2, [pc, #436]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e00b      	b.n	8004028 <HAL_RCC_OscConfig+0xb0>
 8004010:	4b6a      	ldr	r3, [pc, #424]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a69      	ldr	r2, [pc, #420]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8004016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	4b67      	ldr	r3, [pc, #412]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a66      	ldr	r2, [pc, #408]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8004022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d014      	beq.n	800405a <HAL_RCC_OscConfig+0xe2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fd fa70 	bl	8001514 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	e009      	b.n	800404c <HAL_RCC_OscConfig+0xd4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004038:	f7fd fa6c 	bl	8001514 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e208      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404c:	4b5b      	ldr	r3, [pc, #364]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0ef      	beq.n	8004038 <HAL_RCC_OscConfig+0xc0>
 8004058:	e015      	b.n	8004086 <HAL_RCC_OscConfig+0x10e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405a:	f7fd fa5b 	bl	8001514 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004060:	e009      	b.n	8004076 <HAL_RCC_OscConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004062:	f7fd fa57 	bl	8001514 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e1f3      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004076:	4b51      	ldr	r3, [pc, #324]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1ef      	bne.n	8004062 <HAL_RCC_OscConfig+0xea>
 8004082:	e000      	b.n	8004086 <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d063      	beq.n	800415a <HAL_RCC_OscConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004092:	4b4a      	ldr	r3, [pc, #296]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00b      	beq.n	80040b6 <HAL_RCC_OscConfig+0x13e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409e:	4b47      	ldr	r3, [pc, #284]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d11c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x16c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040aa:	4b44      	ldr	r3, [pc, #272]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d116      	bne.n	80040e4 <HAL_RCC_OscConfig+0x16c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b6:	4b41      	ldr	r3, [pc, #260]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_RCC_OscConfig+0x156>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d001      	beq.n	80040ce <HAL_RCC_OscConfig+0x156>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e1c7      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ce:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4937      	ldr	r1, [pc, #220]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e2:	e03a      	b.n	800415a <HAL_RCC_OscConfig+0x1e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d020      	beq.n	800412e <HAL_RCC_OscConfig+0x1b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ec:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <HAL_RCC_OscConfig+0x248>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fd fa0f 	bl	8001514 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x194>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fa:	f7fd fa0b 	bl	8001514 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x194>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e1a8      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410c:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x182>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004118:	4b28      	ldr	r3, [pc, #160]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4925      	ldr	r1, [pc, #148]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8004128:	4313      	orrs	r3, r2
 800412a:	600b      	str	r3, [r1, #0]
 800412c:	e015      	b.n	800415a <HAL_RCC_OscConfig+0x1e2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412e:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <HAL_RCC_OscConfig+0x248>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fd f9ee 	bl	8001514 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x1d6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800413c:	f7fd f9ea 	bl	8001514 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x1d6>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e187      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414e:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d036      	beq.n	80041d4 <HAL_RCC_OscConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d016      	beq.n	800419c <HAL_RCC_OscConfig+0x224>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <HAL_RCC_OscConfig+0x24c>)
 8004170:	2201      	movs	r2, #1
 8004172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004174:	f7fd f9ce 	bl	8001514 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417c:	f7fd f9ca 	bl	8001514 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x216>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e167      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418e:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 8004190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x204>
 800419a:	e01b      	b.n	80041d4 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419c:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_RCC_OscConfig+0x24c>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a2:	f7fd f9b7 	bl	8001514 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a8:	e00e      	b.n	80041c8 <HAL_RCC_OscConfig+0x250>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041aa:	f7fd f9b3 	bl	8001514 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d907      	bls.n	80041c8 <HAL_RCC_OscConfig+0x250>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e150      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
 80041bc:	40023800 	.word	0x40023800
 80041c0:	42470000 	.word	0x42470000
 80041c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c8:	4b88      	ldr	r3, [pc, #544]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 80041ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1ea      	bne.n	80041aa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8097 	beq.w	8004310 <HAL_RCC_OscConfig+0x398>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e2:	2300      	movs	r3, #0
 80041e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e6:	4b81      	ldr	r3, [pc, #516]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10f      	bne.n	8004212 <HAL_RCC_OscConfig+0x29a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	4b7d      	ldr	r3, [pc, #500]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a7c      	ldr	r2, [pc, #496]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
 8004202:	4b7a      	ldr	r3, [pc, #488]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004212:	4b77      	ldr	r3, [pc, #476]	; (80043f0 <HAL_RCC_OscConfig+0x478>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d118      	bne.n	8004250 <HAL_RCC_OscConfig+0x2d8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800421e:	4b74      	ldr	r3, [pc, #464]	; (80043f0 <HAL_RCC_OscConfig+0x478>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a73      	ldr	r2, [pc, #460]	; (80043f0 <HAL_RCC_OscConfig+0x478>)
 8004224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422a:	f7fd f973 	bl	8001514 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004232:	f7fd f96f 	bl	8001514 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e10c      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004244:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <HAL_RCC_OscConfig+0x478>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d106      	bne.n	8004266 <HAL_RCC_OscConfig+0x2ee>
 8004258:	4b64      	ldr	r3, [pc, #400]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a63      	ldr	r2, [pc, #396]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
 8004264:	e01c      	b.n	80042a0 <HAL_RCC_OscConfig+0x328>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b05      	cmp	r3, #5
 800426c:	d10c      	bne.n	8004288 <HAL_RCC_OscConfig+0x310>
 800426e:	4b5f      	ldr	r3, [pc, #380]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	4a5e      	ldr	r2, [pc, #376]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 8004274:	f043 0304 	orr.w	r3, r3, #4
 8004278:	6713      	str	r3, [r2, #112]	; 0x70
 800427a:	4b5c      	ldr	r3, [pc, #368]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	4a5b      	ldr	r2, [pc, #364]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6713      	str	r3, [r2, #112]	; 0x70
 8004286:	e00b      	b.n	80042a0 <HAL_RCC_OscConfig+0x328>
 8004288:	4b58      	ldr	r3, [pc, #352]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	4a57      	ldr	r2, [pc, #348]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	6713      	str	r3, [r2, #112]	; 0x70
 8004294:	4b55      	ldr	r3, [pc, #340]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4a54      	ldr	r2, [pc, #336]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 800429a:	f023 0304 	bic.w	r3, r3, #4
 800429e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d015      	beq.n	80042d4 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fd f934 	bl	8001514 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fd f930 	bl	8001514 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0cb      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c6:	4b49      	ldr	r3, [pc, #292]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ee      	beq.n	80042b0 <HAL_RCC_OscConfig+0x338>
 80042d2:	e014      	b.n	80042fe <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d4:	f7fd f91e 	bl	8001514 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fd f91a 	bl	8001514 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e0b5      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f2:	4b3e      	ldr	r3, [pc, #248]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ee      	bne.n	80042dc <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042fe:	7dfb      	ldrb	r3, [r7, #23]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d105      	bne.n	8004310 <HAL_RCC_OscConfig+0x398>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004304:	4b39      	ldr	r3, [pc, #228]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	4a38      	ldr	r2, [pc, #224]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 800430a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80a1 	beq.w	800445c <HAL_RCC_OscConfig+0x4e4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800431a:	4b34      	ldr	r3, [pc, #208]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b08      	cmp	r3, #8
 8004324:	d05c      	beq.n	80043e0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d141      	bne.n	80043b2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432e:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <HAL_RCC_OscConfig+0x47c>)
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fd f8ee 	bl	8001514 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433c:	f7fd f8ea 	bl	8001514 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e087      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434e:	4b27      	ldr	r3, [pc, #156]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69da      	ldr	r2, [r3, #28]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	019b      	lsls	r3, r3, #6
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	3b01      	subs	r3, #1
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	491b      	ldr	r1, [pc, #108]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 8004380:	4313      	orrs	r3, r2
 8004382:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_RCC_OscConfig+0x47c>)
 8004386:	2201      	movs	r2, #1
 8004388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438a:	f7fd f8c3 	bl	8001514 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004392:	f7fd f8bf 	bl	8001514 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e05c      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f0      	beq.n	8004392 <HAL_RCC_OscConfig+0x41a>
 80043b0:	e054      	b.n	800445c <HAL_RCC_OscConfig+0x4e4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <HAL_RCC_OscConfig+0x47c>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fd f8ac 	bl	8001514 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fd f8a8 	bl	8001514 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e045      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x448>
 80043de:	e03d      	b.n	800445c <HAL_RCC_OscConfig+0x4e4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d107      	bne.n	80043f8 <HAL_RCC_OscConfig+0x480>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e038      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
 80043ec:	40023800 	.word	0x40023800
 80043f0:	40007000 	.word	0x40007000
 80043f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043f8:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <HAL_RCC_OscConfig+0x4f0>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d028      	beq.n	8004458 <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004410:	429a      	cmp	r2, r3
 8004412:	d121      	bne.n	8004458 <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d11a      	bne.n	8004458 <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004428:	4013      	ands	r3, r2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800442e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004430:	4293      	cmp	r3, r2
 8004432:	d111      	bne.n	8004458 <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	3b01      	subs	r3, #1
 8004442:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004444:	429a      	cmp	r2, r3
 8004446:	d107      	bne.n	8004458 <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004454:	429a      	cmp	r2, r3
 8004456:	d001      	beq.n	800445c <HAL_RCC_OscConfig+0x4e4>
#endif
        {
          return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }
  }
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800

0800446c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0cc      	b.n	800461a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004480:	4b68      	ldr	r3, [pc, #416]	; (8004624 <HAL_RCC_ClockConfig+0x1b8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d90c      	bls.n	80044a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448e:	4b65      	ldr	r3, [pc, #404]	; (8004624 <HAL_RCC_ClockConfig+0x1b8>)
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004496:	4b63      	ldr	r3, [pc, #396]	; (8004624 <HAL_RCC_ClockConfig+0x1b8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0b8      	b.n	800461a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d020      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044c0:	4b59      	ldr	r3, [pc, #356]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4a58      	ldr	r2, [pc, #352]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044d8:	4b53      	ldr	r3, [pc, #332]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4a52      	ldr	r2, [pc, #328]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e4:	4b50      	ldr	r3, [pc, #320]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	494d      	ldr	r1, [pc, #308]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d044      	beq.n	800458c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d107      	bne.n	800451a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450a:	4b47      	ldr	r3, [pc, #284]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d119      	bne.n	800454a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e07f      	b.n	800461a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d003      	beq.n	800452a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004526:	2b03      	cmp	r3, #3
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452a:	4b3f      	ldr	r3, [pc, #252]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e06f      	b.n	800461a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453a:	4b3b      	ldr	r3, [pc, #236]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e067      	b.n	800461a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800454a:	4b37      	ldr	r3, [pc, #220]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f023 0203 	bic.w	r2, r3, #3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4934      	ldr	r1, [pc, #208]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 8004558:	4313      	orrs	r3, r2
 800455a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800455c:	f7fc ffda 	bl	8001514 <HAL_GetTick>
 8004560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	e00a      	b.n	800457a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004564:	f7fc ffd6 	bl	8001514 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004572:	4293      	cmp	r3, r2
 8004574:	d901      	bls.n	800457a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e04f      	b.n	800461a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457a:	4b2b      	ldr	r3, [pc, #172]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 020c 	and.w	r2, r3, #12
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	429a      	cmp	r2, r3
 800458a:	d1eb      	bne.n	8004564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800458c:	4b25      	ldr	r3, [pc, #148]	; (8004624 <HAL_RCC_ClockConfig+0x1b8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d20c      	bcs.n	80045b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459a:	4b22      	ldr	r3, [pc, #136]	; (8004624 <HAL_RCC_ClockConfig+0x1b8>)
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a2:	4b20      	ldr	r3, [pc, #128]	; (8004624 <HAL_RCC_ClockConfig+0x1b8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e032      	b.n	800461a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c0:	4b19      	ldr	r3, [pc, #100]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4916      	ldr	r1, [pc, #88]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	490e      	ldr	r1, [pc, #56]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045f2:	f000 f821 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 80045f6:	4602      	mov	r2, r0
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	490a      	ldr	r1, [pc, #40]	; (800462c <HAL_RCC_ClockConfig+0x1c0>)
 8004604:	5ccb      	ldrb	r3, [r1, r3]
 8004606:	fa22 f303 	lsr.w	r3, r2, r3
 800460a:	4a09      	ldr	r2, [pc, #36]	; (8004630 <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800460e:	4b09      	ldr	r3, [pc, #36]	; (8004634 <HAL_RCC_ClockConfig+0x1c8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fc ff3a 	bl	800148c <HAL_InitTick>

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40023c00 	.word	0x40023c00
 8004628:	40023800 	.word	0x40023800
 800462c:	08008d8c 	.word	0x08008d8c
 8004630:	200000c0 	.word	0x200000c0
 8004634:	200000c4 	.word	0x200000c4

08004638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800463c:	b094      	sub	sp, #80	; 0x50
 800463e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	647b      	str	r3, [r7, #68]	; 0x44
 8004644:	2300      	movs	r3, #0
 8004646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004648:	2300      	movs	r3, #0
 800464a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004650:	4b79      	ldr	r3, [pc, #484]	; (8004838 <HAL_RCC_GetSysClockFreq+0x200>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 030c 	and.w	r3, r3, #12
 8004658:	2b08      	cmp	r3, #8
 800465a:	d00d      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0x40>
 800465c:	2b08      	cmp	r3, #8
 800465e:	f200 80e1 	bhi.w	8004824 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0x34>
 8004666:	2b04      	cmp	r3, #4
 8004668:	d003      	beq.n	8004672 <HAL_RCC_GetSysClockFreq+0x3a>
 800466a:	e0db      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800466c:	4b73      	ldr	r3, [pc, #460]	; (800483c <HAL_RCC_GetSysClockFreq+0x204>)
 800466e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004670:	e0db      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004672:	4b73      	ldr	r3, [pc, #460]	; (8004840 <HAL_RCC_GetSysClockFreq+0x208>)
 8004674:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004676:	e0d8      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004678:	4b6f      	ldr	r3, [pc, #444]	; (8004838 <HAL_RCC_GetSysClockFreq+0x200>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004680:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004682:	4b6d      	ldr	r3, [pc, #436]	; (8004838 <HAL_RCC_GetSysClockFreq+0x200>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d063      	beq.n	8004756 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800468e:	4b6a      	ldr	r3, [pc, #424]	; (8004838 <HAL_RCC_GetSysClockFreq+0x200>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	099b      	lsrs	r3, r3, #6
 8004694:	2200      	movs	r2, #0
 8004696:	63bb      	str	r3, [r7, #56]	; 0x38
 8004698:	63fa      	str	r2, [r7, #60]	; 0x3c
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a0:	633b      	str	r3, [r7, #48]	; 0x30
 80046a2:	2300      	movs	r3, #0
 80046a4:	637b      	str	r3, [r7, #52]	; 0x34
 80046a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046aa:	4622      	mov	r2, r4
 80046ac:	462b      	mov	r3, r5
 80046ae:	f04f 0000 	mov.w	r0, #0
 80046b2:	f04f 0100 	mov.w	r1, #0
 80046b6:	0159      	lsls	r1, r3, #5
 80046b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046bc:	0150      	lsls	r0, r2, #5
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4621      	mov	r1, r4
 80046c4:	1a51      	subs	r1, r2, r1
 80046c6:	6139      	str	r1, [r7, #16]
 80046c8:	4629      	mov	r1, r5
 80046ca:	eb63 0301 	sbc.w	r3, r3, r1
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046dc:	4659      	mov	r1, fp
 80046de:	018b      	lsls	r3, r1, #6
 80046e0:	4651      	mov	r1, sl
 80046e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046e6:	4651      	mov	r1, sl
 80046e8:	018a      	lsls	r2, r1, #6
 80046ea:	4651      	mov	r1, sl
 80046ec:	ebb2 0801 	subs.w	r8, r2, r1
 80046f0:	4659      	mov	r1, fp
 80046f2:	eb63 0901 	sbc.w	r9, r3, r1
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800470a:	4690      	mov	r8, r2
 800470c:	4699      	mov	r9, r3
 800470e:	4623      	mov	r3, r4
 8004710:	eb18 0303 	adds.w	r3, r8, r3
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	462b      	mov	r3, r5
 8004718:	eb49 0303 	adc.w	r3, r9, r3
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800472a:	4629      	mov	r1, r5
 800472c:	024b      	lsls	r3, r1, #9
 800472e:	4621      	mov	r1, r4
 8004730:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004734:	4621      	mov	r1, r4
 8004736:	024a      	lsls	r2, r1, #9
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
 800473c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800473e:	2200      	movs	r2, #0
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28
 8004742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004744:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004748:	f7fb fd46 	bl	80001d8 <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4613      	mov	r3, r2
 8004752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004754:	e058      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004756:	4b38      	ldr	r3, [pc, #224]	; (8004838 <HAL_RCC_GetSysClockFreq+0x200>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	099b      	lsrs	r3, r3, #6
 800475c:	2200      	movs	r2, #0
 800475e:	4618      	mov	r0, r3
 8004760:	4611      	mov	r1, r2
 8004762:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004766:	623b      	str	r3, [r7, #32]
 8004768:	2300      	movs	r3, #0
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
 800476c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004770:	4642      	mov	r2, r8
 8004772:	464b      	mov	r3, r9
 8004774:	f04f 0000 	mov.w	r0, #0
 8004778:	f04f 0100 	mov.w	r1, #0
 800477c:	0159      	lsls	r1, r3, #5
 800477e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004782:	0150      	lsls	r0, r2, #5
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4641      	mov	r1, r8
 800478a:	ebb2 0a01 	subs.w	sl, r2, r1
 800478e:	4649      	mov	r1, r9
 8004790:	eb63 0b01 	sbc.w	fp, r3, r1
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047a8:	ebb2 040a 	subs.w	r4, r2, sl
 80047ac:	eb63 050b 	sbc.w	r5, r3, fp
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	00eb      	lsls	r3, r5, #3
 80047ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047be:	00e2      	lsls	r2, r4, #3
 80047c0:	4614      	mov	r4, r2
 80047c2:	461d      	mov	r5, r3
 80047c4:	4643      	mov	r3, r8
 80047c6:	18e3      	adds	r3, r4, r3
 80047c8:	603b      	str	r3, [r7, #0]
 80047ca:	464b      	mov	r3, r9
 80047cc:	eb45 0303 	adc.w	r3, r5, r3
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047de:	4629      	mov	r1, r5
 80047e0:	028b      	lsls	r3, r1, #10
 80047e2:	4621      	mov	r1, r4
 80047e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e8:	4621      	mov	r1, r4
 80047ea:	028a      	lsls	r2, r1, #10
 80047ec:	4610      	mov	r0, r2
 80047ee:	4619      	mov	r1, r3
 80047f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f2:	2200      	movs	r2, #0
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	61fa      	str	r2, [r7, #28]
 80047f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047fc:	f7fb fcec 	bl	80001d8 <__aeabi_uldivmod>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4613      	mov	r3, r2
 8004806:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_GetSysClockFreq+0x200>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	3301      	adds	r3, #1
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800481a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004822:	e002      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <HAL_RCC_GetSysClockFreq+0x204>)
 8004826:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800482a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800482c:	4618      	mov	r0, r3
 800482e:	3750      	adds	r7, #80	; 0x50
 8004830:	46bd      	mov	sp, r7
 8004832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800
 800483c:	00f42400 	.word	0x00f42400
 8004840:	007a1200 	.word	0x007a1200

08004844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004848:	4b03      	ldr	r3, [pc, #12]	; (8004858 <HAL_RCC_GetHCLKFreq+0x14>)
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	200000c0 	.word	0x200000c0

0800485c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004860:	f7ff fff0 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004864:	4602      	mov	r2, r0
 8004866:	4b05      	ldr	r3, [pc, #20]	; (800487c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	0a9b      	lsrs	r3, r3, #10
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	4903      	ldr	r1, [pc, #12]	; (8004880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004872:	5ccb      	ldrb	r3, [r1, r3]
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004878:	4618      	mov	r0, r3
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40023800 	.word	0x40023800
 8004880:	08008d9c 	.word	0x08008d9c

08004884 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d105      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d038      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048ac:	4b68      	ldr	r3, [pc, #416]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048b2:	f7fc fe2f 	bl	8001514 <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048ba:	f7fc fe2b 	bl	8001514 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e0bd      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048cc:	4b61      	ldr	r3, [pc, #388]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f0      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	019b      	lsls	r3, r3, #6
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	071b      	lsls	r3, r3, #28
 80048ea:	495a      	ldr	r1, [pc, #360]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048f2:	4b57      	ldr	r3, [pc, #348]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048f8:	f7fc fe0c 	bl	8001514 <HAL_GetTick>
 80048fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004900:	f7fc fe08 	bl	8001514 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e09a      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004912:	4b50      	ldr	r3, [pc, #320]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8083 	beq.w	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	4b48      	ldr	r3, [pc, #288]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	4a47      	ldr	r2, [pc, #284]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493a:	6413      	str	r3, [r2, #64]	; 0x40
 800493c:	4b45      	ldr	r3, [pc, #276]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004948:	4b43      	ldr	r3, [pc, #268]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a42      	ldr	r2, [pc, #264]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800494e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004952:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004954:	f7fc fdde 	bl	8001514 <HAL_GetTick>
 8004958:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800495a:	e008      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800495c:	f7fc fdda 	bl	8001514 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e06c      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800496e:	4b3a      	ldr	r3, [pc, #232]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800497a:	4b36      	ldr	r3, [pc, #216]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d02f      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	429a      	cmp	r2, r3
 8004996:	d028      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004998:	4b2e      	ldr	r3, [pc, #184]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049a2:	4b2e      	ldr	r3, [pc, #184]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049a8:	4b2c      	ldr	r3, [pc, #176]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80049ae:	4a29      	ldr	r2, [pc, #164]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049b4:	4b27      	ldr	r3, [pc, #156]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d114      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80049c0:	f7fc fda8 	bl	8001514 <HAL_GetTick>
 80049c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c6:	e00a      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c8:	f7fc fda4 	bl	8001514 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e034      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049de:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ee      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049f6:	d10d      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80049f8:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0c:	4911      	ldr	r1, [pc, #68]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
 8004a12:	e005      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004a14:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	4a0e      	ldr	r2, [pc, #56]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a1e:	6093      	str	r3, [r2, #8]
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a2c:	4909      	ldr	r1, [pc, #36]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	7d1a      	ldrb	r2, [r3, #20]
 8004a42:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004a44:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	42470068 	.word	0x42470068
 8004a54:	40023800 	.word	0x40023800
 8004a58:	40007000 	.word	0x40007000
 8004a5c:	42470e40 	.word	0x42470e40
 8004a60:	424711e0 	.word	0x424711e0

08004a64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d140      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004a82:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d131      	bne.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a98:	4b1f      	ldr	r3, [pc, #124]	; (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a9a:	617b      	str	r3, [r7, #20]
          break;
 8004a9c:	e031      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a9e:	4b1d      	ldr	r3, [pc, #116]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aaa:	d109      	bne.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab6:	4a19      	ldr	r2, [pc, #100]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	e008      	b.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ac0:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aca:	4a15      	ldr	r2, [pc, #84]	; (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad8:	099b      	lsrs	r3, r3, #6
 8004ada:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	fb02 f303 	mul.w	r3, r2, r3
 8004ae4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aec:	0f1b      	lsrs	r3, r3, #28
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af8:	617b      	str	r3, [r7, #20]
          break;
 8004afa:	e002      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
          break;
 8004b00:	bf00      	nop
        }
      }
      break;
 8004b02:	bf00      	nop
    }
  }
  return frequency;
 8004b04:	697b      	ldr	r3, [r7, #20]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800
 8004b18:	00bb8000 	.word	0x00bb8000
 8004b1c:	007a1200 	.word	0x007a1200
 8004b20:	00f42400 	.word	0x00f42400

08004b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e07b      	b.n	8004c2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d108      	bne.n	8004b50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b46:	d009      	beq.n	8004b5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	61da      	str	r2, [r3, #28]
 8004b4e:	e005      	b.n	8004b5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fc fa46 	bl	8001008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	ea42 0103 	orr.w	r1, r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	f003 0104 	and.w	r1, r3, #4
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f003 0210 	and.w	r2, r3, #16
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e041      	b.n	8004ccc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7fc fb85 	bl	800136c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2202      	movs	r2, #2
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f000 fab5 	bl	80051e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d001      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e044      	b.n	8004d76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1e      	ldr	r2, [pc, #120]	; (8004d84 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d018      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0x6c>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d16:	d013      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0x6c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1a      	ldr	r2, [pc, #104]	; (8004d88 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00e      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0x6c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a19      	ldr	r2, [pc, #100]	; (8004d8c <HAL_TIM_Base_Start_IT+0xb8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d009      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0x6c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d004      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0x6c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d111      	bne.n	8004d64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b06      	cmp	r3, #6
 8004d50:	d010      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d62:	e007      	b.n	8004d74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40000800 	.word	0x40000800
 8004d90:	40000c00 	.word	0x40000c00
 8004d94:	40014000 	.word	0x40014000

08004d98 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6a1a      	ldr	r2, [r3, #32]
 8004db6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10f      	bne.n	8004de0 <HAL_TIM_Base_Stop_IT+0x48>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	f240 4344 	movw	r3, #1092	; 0x444
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d107      	bne.n	8004de0 <HAL_TIM_Base_Stop_IT+0x48>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d122      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d11b      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f06f 0202 	mvn.w	r2, #2
 8004e22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f9b5 	bl	80051a8 <HAL_TIM_IC_CaptureCallback>
 8004e3e:	e005      	b.n	8004e4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f9a7 	bl	8005194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f9b8 	bl	80051bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d122      	bne.n	8004ea6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d11b      	bne.n	8004ea6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f06f 0204 	mvn.w	r2, #4
 8004e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f98b 	bl	80051a8 <HAL_TIM_IC_CaptureCallback>
 8004e92:	e005      	b.n	8004ea0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f97d 	bl	8005194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f98e 	bl	80051bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d122      	bne.n	8004efa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d11b      	bne.n	8004efa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f06f 0208 	mvn.w	r2, #8
 8004eca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2204      	movs	r2, #4
 8004ed0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f961 	bl	80051a8 <HAL_TIM_IC_CaptureCallback>
 8004ee6:	e005      	b.n	8004ef4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f953 	bl	8005194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f964 	bl	80051bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d122      	bne.n	8004f4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b10      	cmp	r3, #16
 8004f14:	d11b      	bne.n	8004f4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f06f 0210 	mvn.w	r2, #16
 8004f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2208      	movs	r2, #8
 8004f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f937 	bl	80051a8 <HAL_TIM_IC_CaptureCallback>
 8004f3a:	e005      	b.n	8004f48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f929 	bl	8005194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f93a 	bl	80051bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d10e      	bne.n	8004f7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d107      	bne.n	8004f7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f06f 0201 	mvn.w	r2, #1
 8004f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7fb ffd7 	bl	8000f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f84:	2b80      	cmp	r3, #128	; 0x80
 8004f86:	d10e      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b80      	cmp	r3, #128	; 0x80
 8004f94:	d107      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fab1 	bl	8005508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb0:	2b40      	cmp	r3, #64	; 0x40
 8004fb2:	d10e      	bne.n	8004fd2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d107      	bne.n	8004fd2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f8ff 	bl	80051d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d10e      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d107      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f06f 0220 	mvn.w	r2, #32
 8004ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fa7b 	bl	80054f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_TIM_ConfigClockSource+0x1c>
 800501e:	2302      	movs	r3, #2
 8005020:	e0b4      	b.n	800518c <HAL_TIM_ConfigClockSource+0x186>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005040:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005048:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505a:	d03e      	beq.n	80050da <HAL_TIM_ConfigClockSource+0xd4>
 800505c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005060:	f200 8087 	bhi.w	8005172 <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005068:	f000 8086 	beq.w	8005178 <HAL_TIM_ConfigClockSource+0x172>
 800506c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005070:	d87f      	bhi.n	8005172 <HAL_TIM_ConfigClockSource+0x16c>
 8005072:	2b70      	cmp	r3, #112	; 0x70
 8005074:	d01a      	beq.n	80050ac <HAL_TIM_ConfigClockSource+0xa6>
 8005076:	2b70      	cmp	r3, #112	; 0x70
 8005078:	d87b      	bhi.n	8005172 <HAL_TIM_ConfigClockSource+0x16c>
 800507a:	2b60      	cmp	r3, #96	; 0x60
 800507c:	d050      	beq.n	8005120 <HAL_TIM_ConfigClockSource+0x11a>
 800507e:	2b60      	cmp	r3, #96	; 0x60
 8005080:	d877      	bhi.n	8005172 <HAL_TIM_ConfigClockSource+0x16c>
 8005082:	2b50      	cmp	r3, #80	; 0x50
 8005084:	d03c      	beq.n	8005100 <HAL_TIM_ConfigClockSource+0xfa>
 8005086:	2b50      	cmp	r3, #80	; 0x50
 8005088:	d873      	bhi.n	8005172 <HAL_TIM_ConfigClockSource+0x16c>
 800508a:	2b40      	cmp	r3, #64	; 0x40
 800508c:	d058      	beq.n	8005140 <HAL_TIM_ConfigClockSource+0x13a>
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d86f      	bhi.n	8005172 <HAL_TIM_ConfigClockSource+0x16c>
 8005092:	2b30      	cmp	r3, #48	; 0x30
 8005094:	d064      	beq.n	8005160 <HAL_TIM_ConfigClockSource+0x15a>
 8005096:	2b30      	cmp	r3, #48	; 0x30
 8005098:	d86b      	bhi.n	8005172 <HAL_TIM_ConfigClockSource+0x16c>
 800509a:	2b20      	cmp	r3, #32
 800509c:	d060      	beq.n	8005160 <HAL_TIM_ConfigClockSource+0x15a>
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d867      	bhi.n	8005172 <HAL_TIM_ConfigClockSource+0x16c>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d05c      	beq.n	8005160 <HAL_TIM_ConfigClockSource+0x15a>
 80050a6:	2b10      	cmp	r3, #16
 80050a8:	d05a      	beq.n	8005160 <HAL_TIM_ConfigClockSource+0x15a>
 80050aa:	e062      	b.n	8005172 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	6899      	ldr	r1, [r3, #8]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f000 f98c 	bl	80053d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	609a      	str	r2, [r3, #8]
      break;
 80050d8:	e04f      	b.n	800517a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6899      	ldr	r1, [r3, #8]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f000 f975 	bl	80053d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050fc:	609a      	str	r2, [r3, #8]
      break;
 80050fe:	e03c      	b.n	800517a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	6859      	ldr	r1, [r3, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	461a      	mov	r2, r3
 800510e:	f000 f8e9 	bl	80052e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2150      	movs	r1, #80	; 0x50
 8005118:	4618      	mov	r0, r3
 800511a:	f000 f942 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 800511e:	e02c      	b.n	800517a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	6859      	ldr	r1, [r3, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	461a      	mov	r2, r3
 800512e:	f000 f908 	bl	8005342 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2160      	movs	r1, #96	; 0x60
 8005138:	4618      	mov	r0, r3
 800513a:	f000 f932 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 800513e:	e01c      	b.n	800517a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	6859      	ldr	r1, [r3, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	461a      	mov	r2, r3
 800514e:	f000 f8c9 	bl	80052e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2140      	movs	r1, #64	; 0x40
 8005158:	4618      	mov	r0, r3
 800515a:	f000 f922 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 800515e:	e00c      	b.n	800517a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f000 f919 	bl	80053a2 <TIM_ITRx_SetConfig>
      break;
 8005170:	e003      	b.n	800517a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	73fb      	strb	r3, [r7, #15]
      break;
 8005176:	e000      	b.n	800517a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005178:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800518a:	7bfb      	ldrb	r3, [r7, #15]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a34      	ldr	r2, [pc, #208]	; (80052c8 <TIM_Base_SetConfig+0xe4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00f      	beq.n	800521c <TIM_Base_SetConfig+0x38>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005202:	d00b      	beq.n	800521c <TIM_Base_SetConfig+0x38>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a31      	ldr	r2, [pc, #196]	; (80052cc <TIM_Base_SetConfig+0xe8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d007      	beq.n	800521c <TIM_Base_SetConfig+0x38>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a30      	ldr	r2, [pc, #192]	; (80052d0 <TIM_Base_SetConfig+0xec>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <TIM_Base_SetConfig+0x38>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a2f      	ldr	r2, [pc, #188]	; (80052d4 <TIM_Base_SetConfig+0xf0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d108      	bne.n	800522e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a25      	ldr	r2, [pc, #148]	; (80052c8 <TIM_Base_SetConfig+0xe4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01b      	beq.n	800526e <TIM_Base_SetConfig+0x8a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523c:	d017      	beq.n	800526e <TIM_Base_SetConfig+0x8a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a22      	ldr	r2, [pc, #136]	; (80052cc <TIM_Base_SetConfig+0xe8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <TIM_Base_SetConfig+0x8a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <TIM_Base_SetConfig+0xec>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00f      	beq.n	800526e <TIM_Base_SetConfig+0x8a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a20      	ldr	r2, [pc, #128]	; (80052d4 <TIM_Base_SetConfig+0xf0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00b      	beq.n	800526e <TIM_Base_SetConfig+0x8a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a1f      	ldr	r2, [pc, #124]	; (80052d8 <TIM_Base_SetConfig+0xf4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <TIM_Base_SetConfig+0x8a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <TIM_Base_SetConfig+0xf8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_Base_SetConfig+0x8a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a1d      	ldr	r2, [pc, #116]	; (80052e0 <TIM_Base_SetConfig+0xfc>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d108      	bne.n	8005280 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <TIM_Base_SetConfig+0xe4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d103      	bne.n	80052b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	615a      	str	r2, [r3, #20]
}
 80052ba:	bf00      	nop
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40014000 	.word	0x40014000
 80052dc:	40014400 	.word	0x40014400
 80052e0:	40014800 	.word	0x40014800

080052e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f023 0201 	bic.w	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800530e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f023 030a 	bic.w	r3, r3, #10
 8005320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005342:	b480      	push	{r7}
 8005344:	b087      	sub	sp, #28
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f023 0210 	bic.w	r2, r3, #16
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800536c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	031b      	lsls	r3, r3, #12
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800537e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	f043 0307 	orr.w	r3, r3, #7
 80053c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	609a      	str	r2, [r3, #8]
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	021a      	lsls	r2, r3, #8
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4313      	orrs	r3, r2
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800542c:	2302      	movs	r3, #2
 800542e:	e050      	b.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d018      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547c:	d013      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a18      	ldr	r2, [pc, #96]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a15      	ldr	r2, [pc, #84]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a13      	ldr	r2, [pc, #76]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d10c      	bne.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800
 80054ec:	40000c00 	.word	0x40000c00
 80054f0:	40014000 	.word	0x40014000

080054f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800551c:	b084      	sub	sp, #16
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	f107 001c 	add.w	r0, r7, #28
 800552a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	2b01      	cmp	r3, #1
 8005532:	d122      	bne.n	800557a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800555c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555e:	2b01      	cmp	r3, #1
 8005560:	d105      	bne.n	800556e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f9c0 	bl	80058f4 <USB_CoreReset>
 8005574:	4603      	mov	r3, r0
 8005576:	73fb      	strb	r3, [r7, #15]
 8005578:	e01a      	b.n	80055b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f9b4 	bl	80058f4 <USB_CoreReset>
 800558c:	4603      	mov	r3, r0
 800558e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38
 80055a2:	e005      	b.n	80055b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d10b      	bne.n	80055ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f043 0206 	orr.w	r2, r3, #6
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055da:	b004      	add	sp, #16
 80055dc:	4770      	bx	lr

080055de <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f043 0201 	orr.w	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f023 0201 	bic.w	r2, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	460b      	mov	r3, r1
 800562c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800563e:	78fb      	ldrb	r3, [r7, #3]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d115      	bne.n	8005670 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005650:	2001      	movs	r0, #1
 8005652:	f7fb ff6b 	bl	800152c <HAL_Delay>
      ms++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3301      	adds	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f93a 	bl	80058d6 <USB_GetMode>
 8005662:	4603      	mov	r3, r0
 8005664:	2b01      	cmp	r3, #1
 8005666:	d01e      	beq.n	80056a6 <USB_SetCurrentMode+0x84>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b31      	cmp	r3, #49	; 0x31
 800566c:	d9f0      	bls.n	8005650 <USB_SetCurrentMode+0x2e>
 800566e:	e01a      	b.n	80056a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d115      	bne.n	80056a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005682:	2001      	movs	r0, #1
 8005684:	f7fb ff52 	bl	800152c <HAL_Delay>
      ms++;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3301      	adds	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f921 	bl	80058d6 <USB_GetMode>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <USB_SetCurrentMode+0x84>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b31      	cmp	r3, #49	; 0x31
 800569e:	d9f0      	bls.n	8005682 <USB_SetCurrentMode+0x60>
 80056a0:	e001      	b.n	80056a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e005      	b.n	80056b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b32      	cmp	r3, #50	; 0x32
 80056aa:	d101      	bne.n	80056b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3301      	adds	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4a13      	ldr	r2, [pc, #76]	; (8005720 <USB_FlushTxFifo+0x64>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e01b      	b.n	8005714 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	daf2      	bge.n	80056ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	019b      	lsls	r3, r3, #6
 80056ec:	f043 0220 	orr.w	r2, r3, #32
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a08      	ldr	r2, [pc, #32]	; (8005720 <USB_FlushTxFifo+0x64>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e006      	b.n	8005714 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b20      	cmp	r3, #32
 8005710:	d0f0      	beq.n	80056f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	00030d40 	.word	0x00030d40

08005724 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3301      	adds	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a11      	ldr	r2, [pc, #68]	; (8005780 <USB_FlushRxFifo+0x5c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d901      	bls.n	8005742 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e018      	b.n	8005774 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	daf2      	bge.n	8005730 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2210      	movs	r2, #16
 8005752:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4a08      	ldr	r2, [pc, #32]	; (8005780 <USB_FlushRxFifo+0x5c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e006      	b.n	8005774 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0310 	and.w	r3, r3, #16
 800576e:	2b10      	cmp	r3, #16
 8005770:	d0f0      	beq.n	8005754 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	00030d40 	.word	0x00030d40

08005784 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005784:	b480      	push	{r7}
 8005786:	b089      	sub	sp, #36	; 0x24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	4611      	mov	r1, r2
 8005790:	461a      	mov	r2, r3
 8005792:	460b      	mov	r3, r1
 8005794:	71fb      	strb	r3, [r7, #7]
 8005796:	4613      	mov	r3, r2
 8005798:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d123      	bne.n	80057f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057aa:	88bb      	ldrh	r3, [r7, #4]
 80057ac:	3303      	adds	r3, #3
 80057ae:	089b      	lsrs	r3, r3, #2
 80057b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	e018      	b.n	80057ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	031a      	lsls	r2, r3, #12
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c4:	461a      	mov	r2, r3
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	3301      	adds	r3, #1
 80057d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	3301      	adds	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	3301      	adds	r3, #1
 80057dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3301      	adds	r3, #1
 80057e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	3301      	adds	r3, #1
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d3e2      	bcc.n	80057b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3724      	adds	r7, #36	; 0x24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005800:	b480      	push	{r7}
 8005802:	b08b      	sub	sp, #44	; 0x2c
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	4613      	mov	r3, r2
 800580c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005816:	88fb      	ldrh	r3, [r7, #6]
 8005818:	089b      	lsrs	r3, r3, #2
 800581a:	b29b      	uxth	r3, r3
 800581c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005826:	2300      	movs	r3, #0
 8005828:	623b      	str	r3, [r7, #32]
 800582a:	e014      	b.n	8005856 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	601a      	str	r2, [r3, #0]
    pDest++;
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	3301      	adds	r3, #1
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	3301      	adds	r3, #1
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	3301      	adds	r3, #1
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	3301      	adds	r3, #1
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	3301      	adds	r3, #1
 8005854:	623b      	str	r3, [r7, #32]
 8005856:	6a3a      	ldr	r2, [r7, #32]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	429a      	cmp	r2, r3
 800585c:	d3e6      	bcc.n	800582c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800585e:	8bfb      	ldrh	r3, [r7, #30]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01e      	beq.n	80058a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586e:	461a      	mov	r2, r3
 8005870:	f107 0310 	add.w	r3, r7, #16
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
 8005884:	b2da      	uxtb	r2, r3
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	701a      	strb	r2, [r3, #0]
      i++;
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	3301      	adds	r3, #1
 800588e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	3301      	adds	r3, #1
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005896:	8bfb      	ldrh	r3, [r7, #30]
 8005898:	3b01      	subs	r3, #1
 800589a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800589c:	8bfb      	ldrh	r3, [r7, #30]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1ea      	bne.n	8005878 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	372c      	adds	r7, #44	; 0x2c
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4013      	ands	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058c8:	68fb      	ldr	r3, [r7, #12]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f003 0301 	and.w	r3, r3, #1
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3301      	adds	r3, #1
 8005904:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4a13      	ldr	r2, [pc, #76]	; (8005958 <USB_CoreReset+0x64>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e01b      	b.n	800594a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	daf2      	bge.n	8005900 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f043 0201 	orr.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3301      	adds	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a09      	ldr	r2, [pc, #36]	; (8005958 <USB_CoreReset+0x64>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d901      	bls.n	800593c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e006      	b.n	800594a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b01      	cmp	r3, #1
 8005946:	d0f0      	beq.n	800592a <USB_CoreReset+0x36>

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	00030d40 	.word	0x00030d40

0800595c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800595c:	b084      	sub	sp, #16
 800595e:	b580      	push	{r7, lr}
 8005960:	b086      	sub	sp, #24
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800596a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800597c:	461a      	mov	r2, r3
 800597e:	2300      	movs	r3, #0
 8005980:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d018      	beq.n	80059e4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d10a      	bne.n	80059ce <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059c6:	f043 0304 	orr.w	r3, r3, #4
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	e014      	b.n	80059f8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059dc:	f023 0304 	bic.w	r3, r3, #4
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	e009      	b.n	80059f8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059f2:	f023 0304 	bic.w	r3, r3, #4
 80059f6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059f8:	2110      	movs	r1, #16
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff fe5e 	bl	80056bc <USB_FlushTxFifo>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff fe8a 	bl	8005724 <USB_FlushRxFifo>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	e015      	b.n	8005a4c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a32:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a40:	461a      	mov	r2, r3
 8005a42:	2300      	movs	r3, #0
 8005a44:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d3e5      	bcc.n	8005a20 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a60:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <USB_HostInit+0x16c>)
 8005a7a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a13      	ldr	r2, [pc, #76]	; (8005acc <USB_HostInit+0x170>)
 8005a80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005a84:	e009      	b.n	8005a9a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2280      	movs	r2, #128	; 0x80
 8005a8a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a10      	ldr	r2, [pc, #64]	; (8005ad0 <USB_HostInit+0x174>)
 8005a90:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a0f      	ldr	r2, [pc, #60]	; (8005ad4 <USB_HostInit+0x178>)
 8005a96:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d105      	bne.n	8005aac <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	f043 0210 	orr.w	r2, r3, #16
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699a      	ldr	r2, [r3, #24]
 8005ab0:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <USB_HostInit+0x17c>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ac4:	b004      	add	sp, #16
 8005ac6:	4770      	bx	lr
 8005ac8:	01000200 	.word	0x01000200
 8005acc:	00e00300 	.word	0x00e00300
 8005ad0:	00600080 	.word	0x00600080
 8005ad4:	004000e0 	.word	0x004000e0
 8005ad8:	a3200008 	.word	0xa3200008

08005adc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005afa:	f023 0303 	bic.w	r3, r3, #3
 8005afe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b14:	4313      	orrs	r3, r2
 8005b16:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d107      	bne.n	8005b2e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b24:	461a      	mov	r2, r3
 8005b26:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005b2a:	6053      	str	r3, [r2, #4]
 8005b2c:	e009      	b.n	8005b42 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d106      	bne.n	8005b42 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005b40:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005b80:	2064      	movs	r0, #100	; 0x64
 8005b82:	f7fb fcd3 	bl	800152c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b92:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005b94:	200a      	movs	r0, #10
 8005b96:	f7fb fcc9 	bl	800152c <HAL_Delay>

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005bc8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d109      	bne.n	8005be8 <USB_DriveVbus+0x44>
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d106      	bne.n	8005be8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005be6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf2:	d109      	bne.n	8005c08 <USB_DriveVbus+0x64>
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c06:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	0c5b      	lsrs	r3, r3, #17
 8005c34:	f003 0303 	and.w	r3, r3, #3
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	b29b      	uxth	r3, r3
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
	...

08005c68 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	4608      	mov	r0, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	461a      	mov	r2, r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	70fb      	strb	r3, [r7, #3]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	70bb      	strb	r3, [r7, #2]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c96:	461a      	mov	r2, r3
 8005c98:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d87e      	bhi.n	8005da4 <USB_HC_Init+0x13c>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <USB_HC_Init+0x44>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cbd 	.word	0x08005cbd
 8005cb0:	08005d67 	.word	0x08005d67
 8005cb4:	08005cbd 	.word	0x08005cbd
 8005cb8:	08005d29 	.word	0x08005d29
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f240 439d 	movw	r3, #1181	; 0x49d
 8005cce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005cd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	da10      	bge.n	8005cfa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005cf8:	e057      	b.n	8005daa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d051      	beq.n	8005daa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	78fa      	ldrb	r2, [r7, #3]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d24:	60d3      	str	r3, [r2, #12]
      break;
 8005d26:	e040      	b.n	8005daa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d34:	461a      	mov	r2, r3
 8005d36:	f240 639d 	movw	r3, #1693	; 0x69d
 8005d3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	da34      	bge.n	8005dae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	78fa      	ldrb	r2, [r7, #3]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d62:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d64:	e023      	b.n	8005dae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d66:	78fb      	ldrb	r3, [r7, #3]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d72:	461a      	mov	r2, r3
 8005d74:	f240 2325 	movw	r3, #549	; 0x225
 8005d78:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	da17      	bge.n	8005db2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	78fa      	ldrb	r2, [r7, #3]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d9c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005da0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005da2:	e006      	b.n	8005db2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	77fb      	strb	r3, [r7, #31]
      break;
 8005da8:	e004      	b.n	8005db4 <USB_HC_Init+0x14c>
      break;
 8005daa:	bf00      	nop
 8005dac:	e002      	b.n	8005db4 <USB_HC_Init+0x14c>
      break;
 8005dae:	bf00      	nop
 8005db0:	e000      	b.n	8005db4 <USB_HC_Init+0x14c>
      break;
 8005db2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	78fa      	ldrb	r2, [r7, #3]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dce:	f043 0302 	orr.w	r3, r3, #2
 8005dd2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dda:	699a      	ldr	r2, [r3, #24]
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	2101      	movs	r1, #1
 8005de4:	fa01 f303 	lsl.w	r3, r1, r3
 8005de8:	6939      	ldr	r1, [r7, #16]
 8005dea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005dee:	4313      	orrs	r3, r2
 8005df0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005dfe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	da03      	bge.n	8005e0e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	e001      	b.n	8005e12 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff feff 	bl	8005c16 <USB_GetHostSpeed>
 8005e18:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005e1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d106      	bne.n	8005e30 <USB_HC_Init+0x1c8>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d003      	beq.n	8005e30 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	e001      	b.n	8005e34 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e34:	787b      	ldrb	r3, [r7, #1]
 8005e36:	059b      	lsls	r3, r3, #22
 8005e38:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e3c:	78bb      	ldrb	r3, [r7, #2]
 8005e3e:	02db      	lsls	r3, r3, #11
 8005e40:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e44:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e4a:	049b      	lsls	r3, r3, #18
 8005e4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e50:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e52:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005e54:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e58:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	0159      	lsls	r1, r3, #5
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	440b      	add	r3, r1
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e70:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005e72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d003      	beq.n	8005e82 <USB_HC_Init+0x21a>
 8005e7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d10f      	bne.n	8005ea2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	78fa      	ldrb	r2, [r7, #3]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ea0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005ea2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3720      	adds	r7, #32
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08c      	sub	sp, #48	; 0x30
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ec8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d02d      	beq.n	8005f32 <USB_HC_StartXfer+0x86>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	791b      	ldrb	r3, [r3, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d129      	bne.n	8005f32 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d117      	bne.n	8005f14 <USB_HC_StartXfer+0x68>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	79db      	ldrb	r3, [r3, #7]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <USB_HC_StartXfer+0x48>
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	79db      	ldrb	r3, [r3, #7]
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d10f      	bne.n	8005f14 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	6a3a      	ldr	r2, [r7, #32]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005f14:	79fb      	ldrb	r3, [r7, #7]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10b      	bne.n	8005f32 <USB_HC_StartXfer+0x86>
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	795b      	ldrb	r3, [r3, #5]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d107      	bne.n	8005f32 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	785b      	ldrb	r3, [r3, #1]
 8005f26:	4619      	mov	r1, r3
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fa0f 	bl	800634c <USB_DoPing>
      return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e0f8      	b.n	8006124 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d018      	beq.n	8005f6c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	8912      	ldrh	r2, [r2, #8]
 8005f42:	4413      	add	r3, r2
 8005f44:	3b01      	subs	r3, #1
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	8912      	ldrh	r2, [r2, #8]
 8005f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f4e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005f50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f52:	8b7b      	ldrh	r3, [r7, #26]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d90b      	bls.n	8005f70 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005f58:	8b7b      	ldrh	r3, [r7, #26]
 8005f5a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	8912      	ldrh	r2, [r2, #8]
 8005f62:	fb03 f202 	mul.w	r2, r3, r2
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	611a      	str	r2, [r3, #16]
 8005f6a:	e001      	b.n	8005f70 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	78db      	ldrb	r3, [r3, #3]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	8912      	ldrh	r2, [r2, #8]
 8005f7e:	fb03 f202 	mul.w	r2, r3, r2
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	611a      	str	r2, [r3, #16]
 8005f86:	e003      	b.n	8005f90 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	695a      	ldr	r2, [r3, #20]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f9a:	04d9      	lsls	r1, r3, #19
 8005f9c:	4b63      	ldr	r3, [pc, #396]	; (800612c <USB_HC_StartXfer+0x280>)
 8005f9e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fa0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	7a9b      	ldrb	r3, [r3, #10]
 8005fa6:	075b      	lsls	r3, r3, #29
 8005fa8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fac:	69f9      	ldr	r1, [r7, #28]
 8005fae:	0148      	lsls	r0, r1, #5
 8005fb0:	6a39      	ldr	r1, [r7, #32]
 8005fb2:	4401      	add	r1, r0
 8005fb4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005fb8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	68d9      	ldr	r1, [r3, #12]
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	460a      	mov	r2, r1
 8005fd4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69fa      	ldr	r2, [r7, #28]
 8005ffe:	0151      	lsls	r1, r2, #5
 8006000:	6a3a      	ldr	r2, [r7, #32]
 8006002:	440a      	add	r2, r1
 8006004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006008:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800600c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	4413      	add	r3, r2
 8006016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	7e7b      	ldrb	r3, [r7, #25]
 800601e:	075b      	lsls	r3, r3, #29
 8006020:	69f9      	ldr	r1, [r7, #28]
 8006022:	0148      	lsls	r0, r1, #5
 8006024:	6a39      	ldr	r1, [r7, #32]
 8006026:	4401      	add	r1, r0
 8006028:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800602c:	4313      	orrs	r3, r2
 800602e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006046:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	78db      	ldrb	r3, [r3, #3]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	e003      	b.n	8006062 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006060:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006068:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	4413      	add	r3, r2
 8006072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006076:	461a      	mov	r2, r3
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800607c:	79fb      	ldrb	r3, [r7, #7]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e04e      	b.n	8006124 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	78db      	ldrb	r3, [r3, #3]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d149      	bne.n	8006122 <USB_HC_StartXfer+0x276>
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d045      	beq.n	8006122 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	79db      	ldrb	r3, [r3, #7]
 800609a:	2b03      	cmp	r3, #3
 800609c:	d830      	bhi.n	8006100 <USB_HC_StartXfer+0x254>
 800609e:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <USB_HC_StartXfer+0x1f8>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060b5 	.word	0x080060b5
 80060a8:	080060d9 	.word	0x080060d9
 80060ac:	080060b5 	.word	0x080060b5
 80060b0:	080060d9 	.word	0x080060d9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	3303      	adds	r3, #3
 80060ba:	089b      	lsrs	r3, r3, #2
 80060bc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80060be:	8afa      	ldrh	r2, [r7, #22]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d91c      	bls.n	8006104 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f043 0220 	orr.w	r2, r3, #32
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80060d6:	e015      	b.n	8006104 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	3303      	adds	r3, #3
 80060de:	089b      	lsrs	r3, r3, #2
 80060e0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80060e2:	8afa      	ldrh	r2, [r7, #22]
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d90a      	bls.n	8006108 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80060fe:	e003      	b.n	8006108 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006100:	bf00      	nop
 8006102:	e002      	b.n	800610a <USB_HC_StartXfer+0x25e>
        break;
 8006104:	bf00      	nop
 8006106:	e000      	b.n	800610a <USB_HC_StartXfer+0x25e>
        break;
 8006108:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	68d9      	ldr	r1, [r3, #12]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	785a      	ldrb	r2, [r3, #1]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	b29b      	uxth	r3, r3
 8006118:	2000      	movs	r0, #0
 800611a:	9000      	str	r0, [sp, #0]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f7ff fb31 	bl	8005784 <USB_WritePacket>
  }

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3728      	adds	r7, #40	; 0x28
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	1ff80000 	.word	0x1ff80000

08006130 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	b29b      	uxth	r3, r3
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006152:	b480      	push	{r7}
 8006154:	b089      	sub	sp, #36	; 0x24
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	460b      	mov	r3, r1
 800615c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006162:	78fb      	ldrb	r3, [r7, #3]
 8006164:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	0c9b      	lsrs	r3, r3, #18
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	4413      	add	r3, r2
 8006188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	0fdb      	lsrs	r3, r3, #31
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d104      	bne.n	80061ac <USB_HC_Halt+0x5a>
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	e0c8      	b.n	800633e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <USB_HC_Halt+0x66>
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d163      	bne.n	8006280 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061d6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f040 80ab 	bne.w	800633c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d133      	bne.n	800625a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	440a      	add	r2, r1
 8006208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800620c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006210:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	440a      	add	r2, r1
 8006228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800622c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006230:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3301      	adds	r3, #1
 8006236:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800623e:	d81d      	bhi.n	800627c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	4413      	add	r3, r2
 8006248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006256:	d0ec      	beq.n	8006232 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006258:	e070      	b.n	800633c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	69fa      	ldr	r2, [r7, #28]
 800626e:	440a      	add	r2, r1
 8006270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006274:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006278:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800627a:	e05f      	b.n	800633c <USB_HC_Halt+0x1ea>
            break;
 800627c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800627e:	e05d      	b.n	800633c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	440a      	add	r2, r1
 8006296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800629a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800629e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d133      	bne.n	8006318 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062ee:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3301      	adds	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062fc:	d81d      	bhi.n	800633a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	4413      	add	r3, r2
 8006306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006314:	d0ec      	beq.n	80062f0 <USB_HC_Halt+0x19e>
 8006316:	e011      	b.n	800633c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	4413      	add	r3, r2
 8006320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	0151      	lsls	r1, r2, #5
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	440a      	add	r2, r1
 800632e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006332:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	e000      	b.n	800633c <USB_HC_Halt+0x1ea>
          break;
 800633a:	bf00      	nop
    }
  }

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3724      	adds	r7, #36	; 0x24
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
	...

0800634c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006360:	2301      	movs	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	04da      	lsls	r2, r3, #19
 8006368:	4b15      	ldr	r3, [pc, #84]	; (80063c0 <USB_DoPing+0x74>)
 800636a:	4013      	ands	r3, r2
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	440a      	add	r2, r1
 8006374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800637c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006394:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800639c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063aa:	461a      	mov	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	1ff80000 	.word	0x1ff80000

080063c4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff f911 	bl	8005600 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063de:	2110      	movs	r1, #16
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff f96b 	bl	80056bc <USB_FlushTxFifo>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff f997 	bl	8005724 <USB_FlushRxFifo>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006400:	2300      	movs	r3, #0
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	e01f      	b.n	8006446 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800641c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006424:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800642c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	4413      	add	r3, r2
 8006436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643a:	461a      	mov	r2, r3
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	3301      	adds	r3, #1
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b0f      	cmp	r3, #15
 800644a:	d9dc      	bls.n	8006406 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800644c:	2300      	movs	r3, #0
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	e034      	b.n	80064bc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006468:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006470:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006478:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	4413      	add	r3, r2
 8006482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006486:	461a      	mov	r2, r3
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3301      	adds	r3, #1
 8006490:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006498:	d80c      	bhi.n	80064b4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064b0:	d0ec      	beq.n	800648c <USB_StopHost+0xc8>
 80064b2:	e000      	b.n	80064b6 <USB_StopHost+0xf2>
        break;
 80064b4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	3301      	adds	r3, #1
 80064ba:	61bb      	str	r3, [r7, #24]
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2b0f      	cmp	r3, #15
 80064c0:	d9c7      	bls.n	8006452 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064c8:	461a      	mov	r2, r3
 80064ca:	f04f 33ff 	mov.w	r3, #4294967295
 80064ce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f04f 32ff 	mov.w	r2, #4294967295
 80064d6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff f880 	bl	80055de <USB_EnableGlobalInt>

  return ret;
 80064de:	7ffb      	ldrb	r3, [r7, #31]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3720      	adds	r7, #32
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80064e8:	b590      	push	{r4, r7, lr}
 80064ea:	b089      	sub	sp, #36	; 0x24
 80064ec:	af04      	add	r7, sp, #16
 80064ee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80064f0:	2301      	movs	r3, #1
 80064f2:	2202      	movs	r2, #2
 80064f4:	2102      	movs	r1, #2
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fc66 	bl	8006dc8 <USBH_FindInterface>
 80064fc:	4603      	mov	r3, r0
 80064fe:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	2bff      	cmp	r3, #255	; 0xff
 8006504:	d002      	beq.n	800650c <USBH_CDC_InterfaceInit+0x24>
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d901      	bls.n	8006510 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800650c:	2302      	movs	r3, #2
 800650e:	e13d      	b.n	800678c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fc3b 	bl	8006d90 <USBH_SelectInterface>
 800651a:	4603      	mov	r3, r0
 800651c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800651e:	7bbb      	ldrb	r3, [r7, #14]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006524:	2302      	movs	r3, #2
 8006526:	e131      	b.n	800678c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800652e:	2050      	movs	r0, #80	; 0x50
 8006530:	f002 fad2 	bl	8008ad8 <malloc>
 8006534:	4603      	mov	r3, r0
 8006536:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006548:	2302      	movs	r3, #2
 800654a:	e11f      	b.n	800678c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800654c:	2250      	movs	r2, #80	; 0x50
 800654e:	2100      	movs	r1, #0
 8006550:	68b8      	ldr	r0, [r7, #8]
 8006552:	f002 fb7d 	bl	8008c50 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006556:	7bfb      	ldrb	r3, [r7, #15]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	211a      	movs	r1, #26
 800655c:	fb01 f303 	mul.w	r3, r1, r3
 8006560:	4413      	add	r3, r2
 8006562:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	b25b      	sxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	da15      	bge.n	800659a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	211a      	movs	r1, #26
 8006574:	fb01 f303 	mul.w	r3, r1, r3
 8006578:	4413      	add	r3, r2
 800657a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800657e:	781a      	ldrb	r2, [r3, #0]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	211a      	movs	r1, #26
 800658a:	fb01 f303 	mul.w	r3, r1, r3
 800658e:	4413      	add	r3, r2
 8006590:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006594:	881a      	ldrh	r2, [r3, #0]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	785b      	ldrb	r3, [r3, #1]
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f001 ff2e 	bl	8008402 <USBH_AllocPipe>
 80065a6:	4603      	mov	r3, r0
 80065a8:	461a      	mov	r2, r3
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	7819      	ldrb	r1, [r3, #0]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	7858      	ldrb	r0, [r3, #1]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	8952      	ldrh	r2, [r2, #10]
 80065c6:	9202      	str	r2, [sp, #8]
 80065c8:	2203      	movs	r2, #3
 80065ca:	9201      	str	r2, [sp, #4]
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	4623      	mov	r3, r4
 80065d0:	4602      	mov	r2, r0
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fee6 	bl	80083a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2200      	movs	r2, #0
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f002 f9f5 	bl	80089d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80065e6:	2300      	movs	r3, #0
 80065e8:	2200      	movs	r2, #0
 80065ea:	210a      	movs	r1, #10
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fbeb 	bl	8006dc8 <USBH_FindInterface>
 80065f2:	4603      	mov	r3, r0
 80065f4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	2bff      	cmp	r3, #255	; 0xff
 80065fa:	d002      	beq.n	8006602 <USBH_CDC_InterfaceInit+0x11a>
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d901      	bls.n	8006606 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006602:	2302      	movs	r3, #2
 8006604:	e0c2      	b.n	800678c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	211a      	movs	r1, #26
 800660c:	fb01 f303 	mul.w	r3, r1, r3
 8006610:	4413      	add	r3, r2
 8006612:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	b25b      	sxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	da16      	bge.n	800664c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	211a      	movs	r1, #26
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	4413      	add	r3, r2
 800662a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800662e:	781a      	ldrb	r2, [r3, #0]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	211a      	movs	r1, #26
 800663a:	fb01 f303 	mul.w	r3, r1, r3
 800663e:	4413      	add	r3, r2
 8006640:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006644:	881a      	ldrh	r2, [r3, #0]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	835a      	strh	r2, [r3, #26]
 800664a:	e015      	b.n	8006678 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	211a      	movs	r1, #26
 8006652:	fb01 f303 	mul.w	r3, r1, r3
 8006656:	4413      	add	r3, r2
 8006658:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800665c:	781a      	ldrb	r2, [r3, #0]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	211a      	movs	r1, #26
 8006668:	fb01 f303 	mul.w	r3, r1, r3
 800666c:	4413      	add	r3, r2
 800666e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006672:	881a      	ldrh	r2, [r3, #0]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	211a      	movs	r1, #26
 800667e:	fb01 f303 	mul.w	r3, r1, r3
 8006682:	4413      	add	r3, r2
 8006684:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	b25b      	sxtb	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	da16      	bge.n	80066be <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	211a      	movs	r1, #26
 8006696:	fb01 f303 	mul.w	r3, r1, r3
 800669a:	4413      	add	r3, r2
 800669c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80066a0:	781a      	ldrb	r2, [r3, #0]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	211a      	movs	r1, #26
 80066ac:	fb01 f303 	mul.w	r3, r1, r3
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80066b6:	881a      	ldrh	r2, [r3, #0]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	835a      	strh	r2, [r3, #26]
 80066bc:	e015      	b.n	80066ea <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80066be:	7bfb      	ldrb	r3, [r7, #15]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	211a      	movs	r1, #26
 80066c4:	fb01 f303 	mul.w	r3, r1, r3
 80066c8:	4413      	add	r3, r2
 80066ca:	f203 3356 	addw	r3, r3, #854	; 0x356
 80066ce:	781a      	ldrb	r2, [r3, #0]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	211a      	movs	r1, #26
 80066da:	fb01 f303 	mul.w	r3, r1, r3
 80066de:	4413      	add	r3, r2
 80066e0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80066e4:	881a      	ldrh	r2, [r3, #0]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	7b9b      	ldrb	r3, [r3, #14]
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 fe86 	bl	8008402 <USBH_AllocPipe>
 80066f6:	4603      	mov	r3, r0
 80066f8:	461a      	mov	r2, r3
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	7bdb      	ldrb	r3, [r3, #15]
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 fe7c 	bl	8008402 <USBH_AllocPipe>
 800670a:	4603      	mov	r3, r0
 800670c:	461a      	mov	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	7b59      	ldrb	r1, [r3, #13]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	7b98      	ldrb	r0, [r3, #14]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	8b12      	ldrh	r2, [r2, #24]
 800672a:	9202      	str	r2, [sp, #8]
 800672c:	2202      	movs	r2, #2
 800672e:	9201      	str	r2, [sp, #4]
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	4623      	mov	r3, r4
 8006734:	4602      	mov	r2, r0
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 fe34 	bl	80083a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	7b19      	ldrb	r1, [r3, #12]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	7bd8      	ldrb	r0, [r3, #15]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	8b52      	ldrh	r2, [r2, #26]
 8006754:	9202      	str	r2, [sp, #8]
 8006756:	2202      	movs	r2, #2
 8006758:	9201      	str	r2, [sp, #4]
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	4623      	mov	r3, r4
 800675e:	4602      	mov	r2, r0
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 fe1f 	bl	80083a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	7b5b      	ldrb	r3, [r3, #13]
 8006772:	2200      	movs	r2, #0
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f002 f92a 	bl	80089d0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	7b1b      	ldrb	r3, [r3, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f002 f923 	bl	80089d0 <USBH_LL_SetToggle>

  return USBH_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	bd90      	pop	{r4, r7, pc}

08006794 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00e      	beq.n	80067cc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 fe14 	bl	80083e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 fe3f 	bl	8008444 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	7b1b      	ldrb	r3, [r3, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00e      	beq.n	80067f2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	7b1b      	ldrb	r3, [r3, #12]
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 fe01 	bl	80083e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	7b1b      	ldrb	r3, [r3, #12]
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 fe2c 	bl	8008444 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	7b5b      	ldrb	r3, [r3, #13]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00e      	beq.n	8006818 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	7b5b      	ldrb	r3, [r3, #13]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fdee 	bl	80083e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	7b5b      	ldrb	r3, [r3, #13]
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f001 fe19 	bl	8008444 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00b      	beq.n	800683c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	4618      	mov	r0, r3
 800682e:	f002 f95b 	bl	8008ae8 <free>
    phost->pActiveClass->pData = 0U;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006838:	2200      	movs	r2, #0
 800683a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3340      	adds	r3, #64	; 0x40
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f8b1 	bl	80069c6 <GetLineCoding>
 8006864:	4603      	mov	r3, r0
 8006866:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006868:	7afb      	ldrb	r3, [r7, #11]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d105      	bne.n	800687a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006874:	2102      	movs	r1, #2
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800687a:	7afb      	ldrb	r3, [r7, #11]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800688c:	2301      	movs	r3, #1
 800688e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d877      	bhi.n	8006998 <USBH_CDC_Process+0x114>
 80068a8:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <USBH_CDC_Process+0x2c>)
 80068aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ae:	bf00      	nop
 80068b0:	080068c5 	.word	0x080068c5
 80068b4:	080068cb 	.word	0x080068cb
 80068b8:	080068fb 	.word	0x080068fb
 80068bc:	0800696f 	.word	0x0800696f
 80068c0:	0800697d 	.word	0x0800697d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	73fb      	strb	r3, [r7, #15]
      break;
 80068c8:	e06d      	b.n	80069a6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f897 	bl	8006a04 <SetLineCoding>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d104      	bne.n	80068ea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068e8:	e058      	b.n	800699c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d055      	beq.n	800699c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2204      	movs	r2, #4
 80068f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80068f8:	e050      	b.n	800699c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	3340      	adds	r3, #64	; 0x40
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f860 	bl	80069c6 <GetLineCoding>
 8006906:	4603      	mov	r3, r0
 8006908:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800690a:	7bbb      	ldrb	r3, [r7, #14]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d126      	bne.n	800695e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006922:	791b      	ldrb	r3, [r3, #4]
 8006924:	429a      	cmp	r2, r3
 8006926:	d13b      	bne.n	80069a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006932:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006934:	429a      	cmp	r2, r3
 8006936:	d133      	bne.n	80069a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006942:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006944:	429a      	cmp	r2, r3
 8006946:	d12b      	bne.n	80069a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006950:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006952:	429a      	cmp	r2, r3
 8006954:	d124      	bne.n	80069a0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f958 	bl	8006c0c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800695c:	e020      	b.n	80069a0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d01d      	beq.n	80069a0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2204      	movs	r2, #4
 8006968:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800696c:	e018      	b.n	80069a0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f867 	bl	8006a42 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f8da 	bl	8006b2e <CDC_ProcessReception>
      break;
 800697a:	e014      	b.n	80069a6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800697c:	2100      	movs	r1, #0
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 ffef 	bl	8007962 <USBH_ClrFeature>
 8006984:	4603      	mov	r3, r0
 8006986:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006988:	7bbb      	ldrb	r3, [r7, #14]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10a      	bne.n	80069a4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006996:	e005      	b.n	80069a4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006998:	bf00      	nop
 800699a:	e004      	b.n	80069a6 <USBH_CDC_Process+0x122>
      break;
 800699c:	bf00      	nop
 800699e:	e002      	b.n	80069a6 <USBH_CDC_Process+0x122>
      break;
 80069a0:	bf00      	nop
 80069a2:	e000      	b.n	80069a6 <USBH_CDC_Process+0x122>
      break;
 80069a4:	bf00      	nop

  }

  return status;
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b082      	sub	sp, #8
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	22a1      	movs	r2, #161	; 0xa1
 80069d4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2221      	movs	r2, #33	; 0x21
 80069da:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2207      	movs	r2, #7
 80069ec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2207      	movs	r2, #7
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 fa83 	bl	8007f00 <USBH_CtlReq>
 80069fa:	4603      	mov	r3, r0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2221      	movs	r2, #33	; 0x21
 8006a12:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2207      	movs	r2, #7
 8006a2a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2207      	movs	r2, #7
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fa64 	bl	8007f00 <USBH_CtlReq>
 8006a38:	4603      	mov	r3, r0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b086      	sub	sp, #24
 8006a46:	af02      	add	r7, sp, #8
 8006a48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a54:	2300      	movs	r3, #0
 8006a56:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d002      	beq.n	8006a68 <CDC_ProcessTransmission+0x26>
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d023      	beq.n	8006aae <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006a66:	e05e      	b.n	8006b26 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	8b12      	ldrh	r2, [r2, #24]
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d90b      	bls.n	8006a8c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	69d9      	ldr	r1, [r3, #28]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8b1a      	ldrh	r2, [r3, #24]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	7b5b      	ldrb	r3, [r3, #13]
 8006a80:	2001      	movs	r0, #1
 8006a82:	9000      	str	r0, [sp, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 fc4a 	bl	800831e <USBH_BulkSendData>
 8006a8a:	e00b      	b.n	8006aa4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	7b5b      	ldrb	r3, [r3, #13]
 8006a9a:	2001      	movs	r0, #1
 8006a9c:	9000      	str	r0, [sp, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 fc3d 	bl	800831e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006aac:	e03b      	b.n	8006b26 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	7b5b      	ldrb	r3, [r3, #13]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 ff61 	bl	800897c <USBH_LL_GetURBState>
 8006aba:	4603      	mov	r3, r0
 8006abc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006abe:	7afb      	ldrb	r3, [r7, #11]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d128      	bne.n	8006b16 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	8b12      	ldrh	r2, [r2, #24]
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d90e      	bls.n	8006aee <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	8b12      	ldrh	r2, [r2, #24]
 8006ad8:	1a9a      	subs	r2, r3, r2
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	8b12      	ldrh	r2, [r2, #24]
 8006ae6:	441a      	add	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	61da      	str	r2, [r3, #28]
 8006aec:	e002      	b.n	8006af4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d004      	beq.n	8006b06 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b04:	e00e      	b.n	8006b24 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f868 	bl	8006be4 <USBH_CDC_TransmitCallback>
      break;
 8006b14:	e006      	b.n	8006b24 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006b16:	7afb      	ldrb	r3, [r7, #11]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d103      	bne.n	8006b24 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b24:	bf00      	nop
  }
}
 8006b26:	bf00      	nop
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b086      	sub	sp, #24
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b40:	2300      	movs	r3, #0
 8006b42:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d002      	beq.n	8006b54 <CDC_ProcessReception+0x26>
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d00e      	beq.n	8006b70 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006b52:	e043      	b.n	8006bdc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	6a19      	ldr	r1, [r3, #32]
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	8b5a      	ldrh	r2, [r3, #26]
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	7b1b      	ldrb	r3, [r3, #12]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 fc01 	bl	8008368 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2204      	movs	r2, #4
 8006b6a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b6e:	e035      	b.n	8006bdc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	7b1b      	ldrb	r3, [r3, #12]
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 ff00 	bl	800897c <USBH_LL_GetURBState>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006b80:	7cfb      	ldrb	r3, [r7, #19]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d129      	bne.n	8006bda <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	7b1b      	ldrb	r3, [r3, #12]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 fe63 	bl	8008858 <USBH_LL_GetLastXferSize>
 8006b92:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d016      	beq.n	8006bcc <CDC_ProcessReception+0x9e>
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	8b5b      	ldrh	r3, [r3, #26]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d910      	bls.n	8006bcc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	1ad2      	subs	r2, r2, r3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	6a1a      	ldr	r2, [r3, #32]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	441a      	add	r2, r3
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2203      	movs	r2, #3
 8006bc6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006bca:	e006      	b.n	8006bda <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f80f 	bl	8006bf8 <USBH_CDC_ReceiveCallback>
      break;
 8006bda:	bf00      	nop
  }
}
 8006bdc:	bf00      	nop
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c34:	2302      	movs	r3, #2
 8006c36:	e029      	b.n	8006c8c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	79fa      	ldrb	r2, [r7, #7]
 8006c3c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f81f 	bl	8006c94 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f001 fd33 	bl	80086f0 <USBH_LL_Init>

  return USBH_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e009      	b.n	8006cba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	33e0      	adds	r3, #224	; 0xe0
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b0f      	cmp	r3, #15
 8006cbe:	d9f2      	bls.n	8006ca6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e009      	b.n	8006cda <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce0:	d3f1      	bcc.n	8006cc6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2240      	movs	r2, #64	; 0x40
 8006d06:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d016      	beq.n	8006d7e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10e      	bne.n	8006d78 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d60:	1c59      	adds	r1, r3, #1
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	33de      	adds	r3, #222	; 0xde
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	73fb      	strb	r3, [r7, #15]
 8006d76:	e004      	b.n	8006d82 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	73fb      	strb	r3, [r7, #15]
 8006d7c:	e001      	b.n	8006d82 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006da6:	78fa      	ldrb	r2, [r7, #3]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d204      	bcs.n	8006db6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	78fa      	ldrb	r2, [r7, #3]
 8006db0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006db4:	e001      	b.n	8006dba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006db6:	2302      	movs	r3, #2
 8006db8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	70fb      	strb	r3, [r7, #3]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	70bb      	strb	r3, [r7, #2]
 8006dde:	4613      	mov	r3, r2
 8006de0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006df0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006df2:	e025      	b.n	8006e40 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006df4:	7dfb      	ldrb	r3, [r7, #23]
 8006df6:	221a      	movs	r2, #26
 8006df8:	fb02 f303 	mul.w	r3, r2, r3
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4413      	add	r3, r2
 8006e02:	3302      	adds	r3, #2
 8006e04:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	795b      	ldrb	r3, [r3, #5]
 8006e0a:	78fa      	ldrb	r2, [r7, #3]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d002      	beq.n	8006e16 <USBH_FindInterface+0x4e>
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	2bff      	cmp	r3, #255	; 0xff
 8006e14:	d111      	bne.n	8006e3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e1a:	78ba      	ldrb	r2, [r7, #2]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d002      	beq.n	8006e26 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e20:	78bb      	ldrb	r3, [r7, #2]
 8006e22:	2bff      	cmp	r3, #255	; 0xff
 8006e24:	d109      	bne.n	8006e3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e2a:	787a      	ldrb	r2, [r7, #1]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d002      	beq.n	8006e36 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e30:	787b      	ldrb	r3, [r7, #1]
 8006e32:	2bff      	cmp	r3, #255	; 0xff
 8006e34:	d101      	bne.n	8006e3a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
 8006e38:	e006      	b.n	8006e48 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d9d6      	bls.n	8006df4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006e46:	23ff      	movs	r3, #255	; 0xff
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	371c      	adds	r7, #28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 fc83 	bl	8008768 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006e62:	2101      	movs	r1, #1
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fd9c 	bl	80089a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af04      	add	r7, sp, #16
 8006e7a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d102      	bne.n	8006e96 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2203      	movs	r2, #3
 8006e94:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b0b      	cmp	r3, #11
 8006e9e:	f200 81be 	bhi.w	800721e <USBH_Process+0x3aa>
 8006ea2:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <USBH_Process+0x34>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006ed9 	.word	0x08006ed9
 8006eac:	08006f0b 	.word	0x08006f0b
 8006eb0:	08006f73 	.word	0x08006f73
 8006eb4:	080071b9 	.word	0x080071b9
 8006eb8:	0800721f 	.word	0x0800721f
 8006ebc:	08007017 	.word	0x08007017
 8006ec0:	0800715f 	.word	0x0800715f
 8006ec4:	0800704d 	.word	0x0800704d
 8006ec8:	0800706d 	.word	0x0800706d
 8006ecc:	0800708d 	.word	0x0800708d
 8006ed0:	080070d1 	.word	0x080070d1
 8006ed4:	080071a1 	.word	0x080071a1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 819e 	beq.w	8007222 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006eec:	20c8      	movs	r0, #200	; 0xc8
 8006eee:	f001 fd9f 	bl	8008a30 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 fc95 	bl	8008822 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f08:	e18b      	b.n	8007222 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d107      	bne.n	8006f24 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f22:	e18d      	b.n	8007240 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f2e:	d914      	bls.n	8006f5a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f36:	3301      	adds	r3, #1
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d903      	bls.n	8006f52 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	220d      	movs	r2, #13
 8006f4e:	701a      	strb	r2, [r3, #0]
      break;
 8006f50:	e176      	b.n	8007240 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	701a      	strb	r2, [r3, #0]
      break;
 8006f58:	e172      	b.n	8007240 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f60:	f103 020a 	add.w	r2, r3, #10
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006f6a:	200a      	movs	r0, #10
 8006f6c:	f001 fd60 	bl	8008a30 <USBH_Delay>
      break;
 8006f70:	e166      	b.n	8007240 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f82:	2104      	movs	r1, #4
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006f88:	2064      	movs	r0, #100	; 0x64
 8006f8a:	f001 fd51 	bl	8008a30 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 fc20 	bl	80087d4 <USBH_LL_GetSpeed>
 8006f94:	4603      	mov	r3, r0
 8006f96:	461a      	mov	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2205      	movs	r2, #5
 8006fa2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f001 fa2b 	bl	8008402 <USBH_AllocPipe>
 8006fac:	4603      	mov	r3, r0
 8006fae:	461a      	mov	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006fb4:	2180      	movs	r1, #128	; 0x80
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 fa23 	bl	8008402 <USBH_AllocPipe>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	7919      	ldrb	r1, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006fd8:	b292      	uxth	r2, r2
 8006fda:	9202      	str	r2, [sp, #8]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	9201      	str	r2, [sp, #4]
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2280      	movs	r2, #128	; 0x80
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 f9dc 	bl	80083a4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	7959      	ldrb	r1, [r3, #5]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007000:	b292      	uxth	r2, r2
 8007002:	9202      	str	r2, [sp, #8]
 8007004:	2200      	movs	r2, #0
 8007006:	9201      	str	r2, [sp, #4]
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	4603      	mov	r3, r0
 800700c:	2200      	movs	r2, #0
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 f9c8 	bl	80083a4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007014:	e114      	b.n	8007240 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f918 	bl	800724c <USBH_HandleEnum>
 800701c:	4603      	mov	r3, r0
 800701e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	f040 80fe 	bne.w	8007226 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007038:	2b01      	cmp	r3, #1
 800703a:	d103      	bne.n	8007044 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2208      	movs	r2, #8
 8007040:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007042:	e0f0      	b.n	8007226 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2207      	movs	r2, #7
 8007048:	701a      	strb	r2, [r3, #0]
      break;
 800704a:	e0ec      	b.n	8007226 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 80e9 	beq.w	800722a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800705e:	2101      	movs	r1, #1
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2208      	movs	r2, #8
 8007068:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800706a:	e0de      	b.n	800722a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007072:	b29b      	uxth	r3, r3
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fc2c 	bl	80078d4 <USBH_SetCfg>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	f040 80d5 	bne.w	800722e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2209      	movs	r2, #9
 8007088:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800708a:	e0d0      	b.n	800722e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	2b00      	cmp	r3, #0
 8007098:	d016      	beq.n	80070c8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800709a:	2101      	movs	r1, #1
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fc3c 	bl	800791a <USBH_SetFeature>
 80070a2:	4603      	mov	r3, r0
 80070a4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d103      	bne.n	80070b6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	220a      	movs	r2, #10
 80070b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070b4:	e0bd      	b.n	8007232 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	f040 80b9 	bne.w	8007232 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	220a      	movs	r2, #10
 80070c4:	701a      	strb	r2, [r3, #0]
      break;
 80070c6:	e0b4      	b.n	8007232 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	220a      	movs	r2, #10
 80070cc:	701a      	strb	r2, [r3, #0]
      break;
 80070ce:	e0b0      	b.n	8007232 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 80ad 	beq.w	8007236 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]
 80070e8:	e016      	b.n	8007118 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80070ea:	7bfa      	ldrb	r2, [r7, #15]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	32de      	adds	r2, #222	; 0xde
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	791a      	ldrb	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d108      	bne.n	8007112 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007100:	7bfa      	ldrb	r2, [r7, #15]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	32de      	adds	r2, #222	; 0xde
 8007106:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007110:	e005      	b.n	800711e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	3301      	adds	r3, #1
 8007116:	73fb      	strb	r3, [r7, #15]
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0e5      	beq.n	80070ea <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007124:	2b00      	cmp	r3, #0
 8007126:	d016      	beq.n	8007156 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	4798      	blx	r3
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d109      	bne.n	800714e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2206      	movs	r2, #6
 800713e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007146:	2103      	movs	r1, #3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800714c:	e073      	b.n	8007236 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	220d      	movs	r2, #13
 8007152:	701a      	strb	r2, [r3, #0]
      break;
 8007154:	e06f      	b.n	8007236 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	220d      	movs	r2, #13
 800715a:	701a      	strb	r2, [r3, #0]
      break;
 800715c:	e06b      	b.n	8007236 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007164:	2b00      	cmp	r3, #0
 8007166:	d017      	beq.n	8007198 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
 8007174:	4603      	mov	r3, r0
 8007176:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007178:	7bbb      	ldrb	r3, [r7, #14]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d103      	bne.n	8007188 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	220b      	movs	r2, #11
 8007184:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007186:	e058      	b.n	800723a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d154      	bne.n	800723a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	220d      	movs	r2, #13
 8007194:	701a      	strb	r2, [r3, #0]
      break;
 8007196:	e050      	b.n	800723a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	220d      	movs	r2, #13
 800719c:	701a      	strb	r2, [r3, #0]
      break;
 800719e:	e04c      	b.n	800723a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d049      	beq.n	800723e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
      }
      break;
 80071b6:	e042      	b.n	800723e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff fd67 	bl	8006c94 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d009      	beq.n	80071e4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d005      	beq.n	80071fa <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071f4:	2105      	movs	r1, #5
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b01      	cmp	r3, #1
 8007204:	d107      	bne.n	8007216 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff fe20 	bl	8006e54 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007214:	e014      	b.n	8007240 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 faa6 	bl	8008768 <USBH_LL_Start>
      break;
 800721c:	e010      	b.n	8007240 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800721e:	bf00      	nop
 8007220:	e00e      	b.n	8007240 <USBH_Process+0x3cc>
      break;
 8007222:	bf00      	nop
 8007224:	e00c      	b.n	8007240 <USBH_Process+0x3cc>
      break;
 8007226:	bf00      	nop
 8007228:	e00a      	b.n	8007240 <USBH_Process+0x3cc>
    break;
 800722a:	bf00      	nop
 800722c:	e008      	b.n	8007240 <USBH_Process+0x3cc>
      break;
 800722e:	bf00      	nop
 8007230:	e006      	b.n	8007240 <USBH_Process+0x3cc>
      break;
 8007232:	bf00      	nop
 8007234:	e004      	b.n	8007240 <USBH_Process+0x3cc>
      break;
 8007236:	bf00      	nop
 8007238:	e002      	b.n	8007240 <USBH_Process+0x3cc>
      break;
 800723a:	bf00      	nop
 800723c:	e000      	b.n	8007240 <USBH_Process+0x3cc>
      break;
 800723e:	bf00      	nop
  }
  return USBH_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop

0800724c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af04      	add	r7, sp, #16
 8007252:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007254:	2301      	movs	r3, #1
 8007256:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007258:	2301      	movs	r3, #1
 800725a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	2b07      	cmp	r3, #7
 8007262:	f200 81c1 	bhi.w	80075e8 <USBH_HandleEnum+0x39c>
 8007266:	a201      	add	r2, pc, #4	; (adr r2, 800726c <USBH_HandleEnum+0x20>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	0800728d 	.word	0x0800728d
 8007270:	0800734b 	.word	0x0800734b
 8007274:	080073b5 	.word	0x080073b5
 8007278:	08007443 	.word	0x08007443
 800727c:	080074ad 	.word	0x080074ad
 8007280:	0800751d 	.word	0x0800751d
 8007284:	08007563 	.word	0x08007563
 8007288:	080075a9 	.word	0x080075a9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800728c:	2108      	movs	r1, #8
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa50 	bl	8007734 <USBH_Get_DevDesc>
 8007294:	4603      	mov	r3, r0
 8007296:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d130      	bne.n	8007300 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7919      	ldrb	r1, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072c2:	b292      	uxth	r2, r2
 80072c4:	9202      	str	r2, [sp, #8]
 80072c6:	2200      	movs	r2, #0
 80072c8:	9201      	str	r2, [sp, #4]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	4603      	mov	r3, r0
 80072ce:	2280      	movs	r2, #128	; 0x80
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 f867 	bl	80083a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	7959      	ldrb	r1, [r3, #5]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072ea:	b292      	uxth	r2, r2
 80072ec:	9202      	str	r2, [sp, #8]
 80072ee:	2200      	movs	r2, #0
 80072f0:	9201      	str	r2, [sp, #4]
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	4603      	mov	r3, r0
 80072f6:	2200      	movs	r2, #0
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 f853 	bl	80083a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80072fe:	e175      	b.n	80075ec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	2b03      	cmp	r3, #3
 8007304:	f040 8172 	bne.w	80075ec <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800730e:	3301      	adds	r3, #1
 8007310:	b2da      	uxtb	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800731e:	2b03      	cmp	r3, #3
 8007320:	d903      	bls.n	800732a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	220d      	movs	r2, #13
 8007326:	701a      	strb	r2, [r3, #0]
      break;
 8007328:	e160      	b.n	80075ec <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	795b      	ldrb	r3, [r3, #5]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 f887 	bl	8008444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	791b      	ldrb	r3, [r3, #4]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 f881 	bl	8008444 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	701a      	strb	r2, [r3, #0]
      break;
 8007348:	e150      	b.n	80075ec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800734a:	2112      	movs	r1, #18
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f9f1 	bl	8007734 <USBH_Get_DevDesc>
 8007352:	4603      	mov	r3, r0
 8007354:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d103      	bne.n	8007364 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007362:	e145      	b.n	80075f0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b03      	cmp	r3, #3
 8007368:	f040 8142 	bne.w	80075f0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007372:	3301      	adds	r3, #1
 8007374:	b2da      	uxtb	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007382:	2b03      	cmp	r3, #3
 8007384:	d903      	bls.n	800738e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	220d      	movs	r2, #13
 800738a:	701a      	strb	r2, [r3, #0]
      break;
 800738c:	e130      	b.n	80075f0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	795b      	ldrb	r3, [r3, #5]
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 f855 	bl	8008444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	791b      	ldrb	r3, [r3, #4]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 f84f 	bl	8008444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	701a      	strb	r2, [r3, #0]
      break;
 80073b2:	e11d      	b.n	80075f0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80073b4:	2101      	movs	r1, #1
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa68 	bl	800788c <USBH_SetAddress>
 80073bc:	4603      	mov	r3, r0
 80073be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d132      	bne.n	800742c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80073c6:	2002      	movs	r0, #2
 80073c8:	f001 fb32 	bl	8008a30 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2203      	movs	r2, #3
 80073d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	7919      	ldrb	r1, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073ee:	b292      	uxth	r2, r2
 80073f0:	9202      	str	r2, [sp, #8]
 80073f2:	2200      	movs	r2, #0
 80073f4:	9201      	str	r2, [sp, #4]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	4603      	mov	r3, r0
 80073fa:	2280      	movs	r2, #128	; 0x80
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 ffd1 	bl	80083a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	7959      	ldrb	r1, [r3, #5]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007416:	b292      	uxth	r2, r2
 8007418:	9202      	str	r2, [sp, #8]
 800741a:	2200      	movs	r2, #0
 800741c:	9201      	str	r2, [sp, #4]
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	4603      	mov	r3, r0
 8007422:	2200      	movs	r2, #0
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 ffbd 	bl	80083a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800742a:	e0e3      	b.n	80075f4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	2b03      	cmp	r3, #3
 8007430:	f040 80e0 	bne.w	80075f4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	220d      	movs	r2, #13
 8007438:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	705a      	strb	r2, [r3, #1]
      break;
 8007440:	e0d8      	b.n	80075f4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007442:	2109      	movs	r1, #9
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f99d 	bl	8007784 <USBH_Get_CfgDesc>
 800744a:	4603      	mov	r3, r0
 800744c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d103      	bne.n	800745c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2204      	movs	r2, #4
 8007458:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800745a:	e0cd      	b.n	80075f8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800745c:	7bbb      	ldrb	r3, [r7, #14]
 800745e:	2b03      	cmp	r3, #3
 8007460:	f040 80ca 	bne.w	80075f8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800746a:	3301      	adds	r3, #1
 800746c:	b2da      	uxtb	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800747a:	2b03      	cmp	r3, #3
 800747c:	d903      	bls.n	8007486 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	220d      	movs	r2, #13
 8007482:	701a      	strb	r2, [r3, #0]
      break;
 8007484:	e0b8      	b.n	80075f8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	795b      	ldrb	r3, [r3, #5]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 ffd9 	bl	8008444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	791b      	ldrb	r3, [r3, #4]
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 ffd3 	bl	8008444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	701a      	strb	r2, [r3, #0]
      break;
 80074aa:	e0a5      	b.n	80075f8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f965 	bl	8007784 <USBH_Get_CfgDesc>
 80074ba:	4603      	mov	r3, r0
 80074bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d103      	bne.n	80074cc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2205      	movs	r2, #5
 80074c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80074ca:	e097      	b.n	80075fc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	f040 8094 	bne.w	80075fc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074da:	3301      	adds	r3, #1
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d903      	bls.n	80074f6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	220d      	movs	r2, #13
 80074f2:	701a      	strb	r2, [r3, #0]
      break;
 80074f4:	e082      	b.n	80075fc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	795b      	ldrb	r3, [r3, #5]
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 ffa1 	bl	8008444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	791b      	ldrb	r3, [r3, #4]
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 ff9b 	bl	8008444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	701a      	strb	r2, [r3, #0]
      break;
 800751a:	e06f      	b.n	80075fc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007522:	2b00      	cmp	r3, #0
 8007524:	d019      	beq.n	800755a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007532:	23ff      	movs	r3, #255	; 0xff
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f949 	bl	80077cc <USBH_Get_StringDesc>
 800753a:	4603      	mov	r3, r0
 800753c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d103      	bne.n	800754c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2206      	movs	r2, #6
 8007548:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800754a:	e059      	b.n	8007600 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	2b03      	cmp	r3, #3
 8007550:	d156      	bne.n	8007600 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2206      	movs	r2, #6
 8007556:	705a      	strb	r2, [r3, #1]
      break;
 8007558:	e052      	b.n	8007600 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2206      	movs	r2, #6
 800755e:	705a      	strb	r2, [r3, #1]
      break;
 8007560:	e04e      	b.n	8007600 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007568:	2b00      	cmp	r3, #0
 800756a:	d019      	beq.n	80075a0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007578:	23ff      	movs	r3, #255	; 0xff
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f926 	bl	80077cc <USBH_Get_StringDesc>
 8007580:	4603      	mov	r3, r0
 8007582:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d103      	bne.n	8007592 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2207      	movs	r2, #7
 800758e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007590:	e038      	b.n	8007604 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	2b03      	cmp	r3, #3
 8007596:	d135      	bne.n	8007604 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2207      	movs	r2, #7
 800759c:	705a      	strb	r2, [r3, #1]
      break;
 800759e:	e031      	b.n	8007604 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2207      	movs	r2, #7
 80075a4:	705a      	strb	r2, [r3, #1]
      break;
 80075a6:	e02d      	b.n	8007604 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d017      	beq.n	80075e2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80075be:	23ff      	movs	r3, #255	; 0xff
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f903 	bl	80077cc <USBH_Get_StringDesc>
 80075c6:	4603      	mov	r3, r0
 80075c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d102      	bne.n	80075d6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80075d4:	e018      	b.n	8007608 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d115      	bne.n	8007608 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
      break;
 80075e0:	e012      	b.n	8007608 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
      break;
 80075e6:	e00f      	b.n	8007608 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80075e8:	bf00      	nop
 80075ea:	e00e      	b.n	800760a <USBH_HandleEnum+0x3be>
      break;
 80075ec:	bf00      	nop
 80075ee:	e00c      	b.n	800760a <USBH_HandleEnum+0x3be>
      break;
 80075f0:	bf00      	nop
 80075f2:	e00a      	b.n	800760a <USBH_HandleEnum+0x3be>
      break;
 80075f4:	bf00      	nop
 80075f6:	e008      	b.n	800760a <USBH_HandleEnum+0x3be>
      break;
 80075f8:	bf00      	nop
 80075fa:	e006      	b.n	800760a <USBH_HandleEnum+0x3be>
      break;
 80075fc:	bf00      	nop
 80075fe:	e004      	b.n	800760a <USBH_HandleEnum+0x3be>
      break;
 8007600:	bf00      	nop
 8007602:	e002      	b.n	800760a <USBH_HandleEnum+0x3be>
      break;
 8007604:	bf00      	nop
 8007606:	e000      	b.n	800760a <USBH_HandleEnum+0x3be>
      break;
 8007608:	bf00      	nop
  }
  return Status;
 800760a:	7bfb      	ldrb	r3, [r7, #15]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f804 	bl	8007656 <USBH_HandleSof>
}
 800764e:	bf00      	nop
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b0b      	cmp	r3, #11
 8007666:	d10a      	bne.n	800767e <USBH_HandleSof+0x28>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d005      	beq.n	800767e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
  }
}
 800767e:	bf00      	nop
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007696:	bf00      	nop
}
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80076b2:	bf00      	nop
}
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 f846 	bl	800879e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	791b      	ldrb	r3, [r3, #4]
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fe93 	bl	8008444 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	795b      	ldrb	r3, [r3, #5]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fe8d 	bl	8008444 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af02      	add	r7, sp, #8
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007746:	78fb      	ldrb	r3, [r7, #3]
 8007748:	b29b      	uxth	r3, r3
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	4613      	mov	r3, r2
 800774e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007752:	2100      	movs	r1, #0
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f864 	bl	8007822 <USBH_GetDescriptor>
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f203 3026 	addw	r0, r3, #806	; 0x326
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007770:	78fa      	ldrb	r2, [r7, #3]
 8007772:	b292      	uxth	r2, r2
 8007774:	4619      	mov	r1, r3
 8007776:	f000 f919 	bl	80079ac <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800777a:	7bfb      	ldrb	r3, [r7, #15]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af02      	add	r7, sp, #8
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	331c      	adds	r3, #28
 8007794:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007796:	887b      	ldrh	r3, [r7, #2]
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077a0:	2100      	movs	r1, #0
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f83d 	bl	8007822 <USBH_GetDescriptor>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d107      	bne.n	80077c2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80077b2:	887b      	ldrh	r3, [r7, #2]
 80077b4:	461a      	mov	r2, r3
 80077b6:	68b9      	ldr	r1, [r7, #8]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f989 	bl	8007ad0 <USBH_ParseCfgDesc>
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af02      	add	r7, sp, #8
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	461a      	mov	r2, r3
 80077d8:	460b      	mov	r3, r1
 80077da:	72fb      	strb	r3, [r7, #11]
 80077dc:	4613      	mov	r3, r2
 80077de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80077e0:	7afb      	ldrb	r3, [r7, #11]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80077e8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80077f0:	893b      	ldrh	r3, [r7, #8]
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	460b      	mov	r3, r1
 80077f6:	2100      	movs	r1, #0
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f812 	bl	8007822 <USBH_GetDescriptor>
 80077fe:	4603      	mov	r3, r0
 8007800:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d107      	bne.n	8007818 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800780e:	893a      	ldrh	r2, [r7, #8]
 8007810:	6879      	ldr	r1, [r7, #4]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fb26 	bl	8007e64 <USBH_ParseStringDesc>
  }

  return status;
 8007818:	7dfb      	ldrb	r3, [r7, #23]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	607b      	str	r3, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	72fb      	strb	r3, [r7, #11]
 8007830:	4613      	mov	r3, r2
 8007832:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	789b      	ldrb	r3, [r3, #2]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d11c      	bne.n	8007876 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007842:	b2da      	uxtb	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2206      	movs	r2, #6
 800784c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	893a      	ldrh	r2, [r7, #8]
 8007852:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007854:	893b      	ldrh	r3, [r7, #8]
 8007856:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800785a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800785e:	d104      	bne.n	800786a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f240 4209 	movw	r2, #1033	; 0x409
 8007866:	829a      	strh	r2, [r3, #20]
 8007868:	e002      	b.n	8007870 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8b3a      	ldrh	r2, [r7, #24]
 8007874:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007876:	8b3b      	ldrh	r3, [r7, #24]
 8007878:	461a      	mov	r2, r3
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 fb3f 	bl	8007f00 <USBH_CtlReq>
 8007882:	4603      	mov	r3, r0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	789b      	ldrb	r3, [r3, #2]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d10f      	bne.n	80078c0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2205      	movs	r2, #5
 80078aa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80078c0:	2200      	movs	r2, #0
 80078c2:	2100      	movs	r1, #0
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fb1b 	bl	8007f00 <USBH_CtlReq>
 80078ca:	4603      	mov	r3, r0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	789b      	ldrb	r3, [r3, #2]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d10e      	bne.n	8007906 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2209      	movs	r2, #9
 80078f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	887a      	ldrh	r2, [r7, #2]
 80078f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007906:	2200      	movs	r2, #0
 8007908:	2100      	movs	r1, #0
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 faf8 	bl	8007f00 <USBH_CtlReq>
 8007910:	4603      	mov	r3, r0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b082      	sub	sp, #8
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	460b      	mov	r3, r1
 8007924:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	789b      	ldrb	r3, [r3, #2]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d10f      	bne.n	800794e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2203      	movs	r2, #3
 8007938:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	b29a      	uxth	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800794e:	2200      	movs	r2, #0
 8007950:	2100      	movs	r1, #0
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fad4 	bl	8007f00 <USBH_CtlReq>
 8007958:	4603      	mov	r3, r0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b082      	sub	sp, #8
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	460b      	mov	r3, r1
 800796c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	789b      	ldrb	r3, [r3, #2]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d10f      	bne.n	8007996 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2202      	movs	r2, #2
 800797a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	b29a      	uxth	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007996:	2200      	movs	r2, #0
 8007998:	2100      	movs	r1, #0
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fab0 	bl	8007f00 <USBH_CtlReq>
 80079a0:	4603      	mov	r3, r0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	4613      	mov	r3, r2
 80079b8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	781a      	ldrb	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	785a      	ldrb	r2, [r3, #1]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	3302      	adds	r3, #2
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	3303      	adds	r3, #3
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	021b      	lsls	r3, r3, #8
 80079dc:	b29b      	uxth	r3, r3
 80079de:	4313      	orrs	r3, r2
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	791a      	ldrb	r2, [r3, #4]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	795a      	ldrb	r2, [r3, #5]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	799a      	ldrb	r2, [r3, #6]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	79da      	ldrb	r2, [r3, #7]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	79db      	ldrb	r3, [r3, #7]
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	dc0f      	bgt.n	8007a2e <USBH_ParseDevDesc+0x82>
 8007a0e:	2b08      	cmp	r3, #8
 8007a10:	db14      	blt.n	8007a3c <USBH_ParseDevDesc+0x90>
 8007a12:	3b08      	subs	r3, #8
 8007a14:	4a2d      	ldr	r2, [pc, #180]	; (8007acc <USBH_ParseDevDesc+0x120>)
 8007a16:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bf14      	ite	ne
 8007a22:	2301      	movne	r3, #1
 8007a24:	2300      	moveq	r3, #0
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d102      	bne.n	8007a32 <USBH_ParseDevDesc+0x86>
 8007a2c:	e006      	b.n	8007a3c <USBH_ParseDevDesc+0x90>
 8007a2e:	2b40      	cmp	r3, #64	; 0x40
 8007a30:	d104      	bne.n	8007a3c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	79da      	ldrb	r2, [r3, #7]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	71da      	strb	r2, [r3, #7]
      break;
 8007a3a:	e003      	b.n	8007a44 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2240      	movs	r2, #64	; 0x40
 8007a40:	71da      	strb	r2, [r3, #7]
      break;
 8007a42:	bf00      	nop
  }

  if (length > 8U)
 8007a44:	88fb      	ldrh	r3, [r7, #6]
 8007a46:	2b08      	cmp	r3, #8
 8007a48:	d939      	bls.n	8007abe <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	3309      	adds	r3, #9
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	021b      	lsls	r3, r3, #8
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	330a      	adds	r3, #10
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	330b      	adds	r3, #11
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	330c      	adds	r3, #12
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	330d      	adds	r3, #13
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	021b      	lsls	r3, r3, #8
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	4313      	orrs	r3, r2
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	7b9a      	ldrb	r2, [r3, #14]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	7bda      	ldrb	r2, [r3, #15]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	7c1a      	ldrb	r2, [r3, #16]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	7c5a      	ldrb	r2, [r3, #17]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	745a      	strb	r2, [r3, #17]
  }
}
 8007abe:	bf00      	nop
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	01000101 	.word	0x01000101

08007ad0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08c      	sub	sp, #48	; 0x30
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	4613      	mov	r3, r2
 8007adc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ae4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	781a      	ldrb	r2, [r3, #0]
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	785a      	ldrb	r2, [r3, #1]
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	3302      	adds	r3, #2
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	3303      	adds	r3, #3
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	021b      	lsls	r3, r3, #8
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	4313      	orrs	r3, r2
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b2c:	bf28      	it	cs
 8007b2e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	791a      	ldrb	r2, [r3, #4]
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	795a      	ldrb	r2, [r3, #5]
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	799a      	ldrb	r2, [r3, #6]
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	79da      	ldrb	r2, [r3, #7]
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	7a1a      	ldrb	r2, [r3, #8]
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2b09      	cmp	r3, #9
 8007b66:	d002      	beq.n	8007b6e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	2209      	movs	r2, #9
 8007b6c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	2b09      	cmp	r3, #9
 8007b72:	f240 809d 	bls.w	8007cb0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007b76:	2309      	movs	r3, #9
 8007b78:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b7e:	e081      	b.n	8007c84 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007b80:	f107 0316 	add.w	r3, r7, #22
 8007b84:	4619      	mov	r1, r3
 8007b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b88:	f000 f99f 	bl	8007eca <USBH_GetNextDesc>
 8007b8c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	785b      	ldrb	r3, [r3, #1]
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d176      	bne.n	8007c84 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b09      	cmp	r3, #9
 8007b9c:	d002      	beq.n	8007ba4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	2209      	movs	r2, #9
 8007ba2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ba8:	221a      	movs	r2, #26
 8007baa:	fb02 f303 	mul.w	r3, r2, r3
 8007bae:	3308      	adds	r3, #8
 8007bb0:	6a3a      	ldr	r2, [r7, #32]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3302      	adds	r3, #2
 8007bb6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bba:	69f8      	ldr	r0, [r7, #28]
 8007bbc:	f000 f87e 	bl	8007cbc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007bca:	e043      	b.n	8007c54 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007bcc:	f107 0316 	add.w	r3, r7, #22
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bd4:	f000 f979 	bl	8007eca <USBH_GetNextDesc>
 8007bd8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	785b      	ldrb	r3, [r3, #1]
 8007bde:	2b05      	cmp	r3, #5
 8007be0:	d138      	bne.n	8007c54 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	795b      	ldrb	r3, [r3, #5]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d10f      	bne.n	8007c0a <USBH_ParseCfgDesc+0x13a>
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	799b      	ldrb	r3, [r3, #6]
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d10b      	bne.n	8007c0a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	79db      	ldrb	r3, [r3, #7]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10f      	bne.n	8007c1a <USBH_ParseCfgDesc+0x14a>
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b09      	cmp	r3, #9
 8007c00:	d00b      	beq.n	8007c1a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	2209      	movs	r2, #9
 8007c06:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c08:	e007      	b.n	8007c1a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b07      	cmp	r3, #7
 8007c10:	d004      	beq.n	8007c1c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	2207      	movs	r2, #7
 8007c16:	701a      	strb	r2, [r3, #0]
 8007c18:	e000      	b.n	8007c1c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c1a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c24:	3201      	adds	r2, #1
 8007c26:	00d2      	lsls	r2, r2, #3
 8007c28:	211a      	movs	r1, #26
 8007c2a:	fb01 f303 	mul.w	r3, r1, r3
 8007c2e:	4413      	add	r3, r2
 8007c30:	3308      	adds	r3, #8
 8007c32:	6a3a      	ldr	r2, [r7, #32]
 8007c34:	4413      	add	r3, r2
 8007c36:	3304      	adds	r3, #4
 8007c38:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c3c:	69b9      	ldr	r1, [r7, #24]
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 f86b 	bl	8007d1a <USBH_ParseEPDesc>
 8007c44:	4603      	mov	r3, r0
 8007c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007c4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c4e:	3301      	adds	r3, #1
 8007c50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	791b      	ldrb	r3, [r3, #4]
 8007c58:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d204      	bcs.n	8007c6a <USBH_ParseCfgDesc+0x19a>
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	885a      	ldrh	r2, [r3, #2]
 8007c64:	8afb      	ldrh	r3, [r7, #22]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d8b0      	bhi.n	8007bcc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	791b      	ldrb	r3, [r3, #4]
 8007c6e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d201      	bcs.n	8007c7a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e01c      	b.n	8007cb4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c7e:	3301      	adds	r3, #1
 8007c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d805      	bhi.n	8007c98 <USBH_ParseCfgDesc+0x1c8>
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	885a      	ldrh	r2, [r3, #2]
 8007c90:	8afb      	ldrh	r3, [r7, #22]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	f63f af74 	bhi.w	8007b80 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	791b      	ldrb	r3, [r3, #4]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	bf28      	it	cs
 8007ca0:	2302      	movcs	r3, #2
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d201      	bcs.n	8007cb0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e001      	b.n	8007cb4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3730      	adds	r7, #48	; 0x30
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781a      	ldrb	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	785a      	ldrb	r2, [r3, #1]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	789a      	ldrb	r2, [r3, #2]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	78da      	ldrb	r2, [r3, #3]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	791a      	ldrb	r2, [r3, #4]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	795a      	ldrb	r2, [r3, #5]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	799a      	ldrb	r2, [r3, #6]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	79da      	ldrb	r2, [r3, #7]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	7a1a      	ldrb	r2, [r3, #8]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	721a      	strb	r2, [r3, #8]
}
 8007d0e:	bf00      	nop
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b087      	sub	sp, #28
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	781a      	ldrb	r2, [r3, #0]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	785a      	ldrb	r2, [r3, #1]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	789a      	ldrb	r2, [r3, #2]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	78da      	ldrb	r2, [r3, #3]
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3305      	adds	r3, #5
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	799a      	ldrb	r2, [r3, #6]
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	889b      	ldrh	r3, [r3, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d102      	bne.n	8007d7c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007d76:	2303      	movs	r3, #3
 8007d78:	75fb      	strb	r3, [r7, #23]
 8007d7a:	e033      	b.n	8007de4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	889b      	ldrh	r3, [r3, #4]
 8007d80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d84:	f023 0307 	bic.w	r3, r3, #7
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	889b      	ldrh	r3, [r3, #4]
 8007d92:	b21a      	sxth	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	3304      	adds	r3, #4
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	b299      	uxth	r1, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3305      	adds	r3, #5
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	021b      	lsls	r3, r3, #8
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	430b      	orrs	r3, r1
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d110      	bne.n	8007dd6 <USBH_ParseEPDesc+0xbc>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3304      	adds	r3, #4
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	b299      	uxth	r1, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3305      	adds	r3, #5
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	021b      	lsls	r3, r3, #8
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	b21b      	sxth	r3, r3
 8007dce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007dd2:	b21b      	sxth	r3, r3
 8007dd4:	e001      	b.n	8007dda <USBH_ParseEPDesc+0xc0>
 8007dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	b21b      	sxth	r3, r3
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d116      	bne.n	8007e1c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	78db      	ldrb	r3, [r3, #3]
 8007df2:	f003 0303 	and.w	r3, r3, #3
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d005      	beq.n	8007e06 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	78db      	ldrb	r3, [r3, #3]
 8007dfe:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d127      	bne.n	8007e56 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	799b      	ldrb	r3, [r3, #6]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <USBH_ParseEPDesc+0xfc>
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	799b      	ldrb	r3, [r3, #6]
 8007e12:	2b10      	cmp	r3, #16
 8007e14:	d91f      	bls.n	8007e56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e16:	2303      	movs	r3, #3
 8007e18:	75fb      	strb	r3, [r7, #23]
 8007e1a:	e01c      	b.n	8007e56 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	78db      	ldrb	r3, [r3, #3]
 8007e20:	f003 0303 	and.w	r3, r3, #3
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d10a      	bne.n	8007e3e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	799b      	ldrb	r3, [r3, #6]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <USBH_ParseEPDesc+0x11e>
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	799b      	ldrb	r3, [r3, #6]
 8007e34:	2b10      	cmp	r3, #16
 8007e36:	d90e      	bls.n	8007e56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	75fb      	strb	r3, [r7, #23]
 8007e3c:	e00b      	b.n	8007e56 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	78db      	ldrb	r3, [r3, #3]
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d105      	bne.n	8007e56 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	799b      	ldrb	r3, [r3, #6]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e52:	2303      	movs	r3, #3
 8007e54:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	371c      	adds	r7, #28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3301      	adds	r3, #1
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d120      	bne.n	8007ebe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	1e9a      	subs	r2, r3, #2
 8007e82:	88fb      	ldrh	r3, [r7, #6]
 8007e84:	4293      	cmp	r3, r2
 8007e86:	bf28      	it	cs
 8007e88:	4613      	movcs	r3, r2
 8007e8a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3302      	adds	r3, #2
 8007e90:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007e92:	2300      	movs	r3, #0
 8007e94:	82fb      	strh	r3, [r7, #22]
 8007e96:	e00b      	b.n	8007eb0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007e98:	8afb      	ldrh	r3, [r7, #22]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007eaa:	8afb      	ldrh	r3, [r7, #22]
 8007eac:	3302      	adds	r3, #2
 8007eae:	82fb      	strh	r3, [r7, #22]
 8007eb0:	8afa      	ldrh	r2, [r7, #22]
 8007eb2:	8abb      	ldrh	r3, [r7, #20]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d3ef      	bcc.n	8007e98 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
  }
}
 8007ebe:	bf00      	nop
 8007ec0:	371c      	adds	r7, #28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b085      	sub	sp, #20
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	881a      	ldrh	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	4413      	add	r3, r2
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4413      	add	r3, r2
 8007ef0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	789b      	ldrb	r3, [r3, #2]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d002      	beq.n	8007f20 <USBH_CtlReq+0x20>
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d00f      	beq.n	8007f3e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007f1e:	e027      	b.n	8007f70 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	88fa      	ldrh	r2, [r7, #6]
 8007f2a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2202      	movs	r2, #2
 8007f36:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f3c:	e018      	b.n	8007f70 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f000 f81c 	bl	8007f7c <USBH_HandleControl>
 8007f44:	4603      	mov	r3, r0
 8007f46:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <USBH_CtlReq+0x54>
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d106      	bne.n	8007f62 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2201      	movs	r2, #1
 8007f58:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	761a      	strb	r2, [r3, #24]
      break;
 8007f60:	e005      	b.n	8007f6e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d102      	bne.n	8007f6e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	709a      	strb	r2, [r3, #2]
      break;
 8007f6e:	bf00      	nop
  }
  return status;
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af02      	add	r7, sp, #8
 8007f82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f84:	2301      	movs	r3, #1
 8007f86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	7e1b      	ldrb	r3, [r3, #24]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	2b0a      	cmp	r3, #10
 8007f94:	f200 8156 	bhi.w	8008244 <USBH_HandleControl+0x2c8>
 8007f98:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <USBH_HandleControl+0x24>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08007fcd 	.word	0x08007fcd
 8007fa4:	08007fe7 	.word	0x08007fe7
 8007fa8:	08008051 	.word	0x08008051
 8007fac:	08008077 	.word	0x08008077
 8007fb0:	080080af 	.word	0x080080af
 8007fb4:	080080d9 	.word	0x080080d9
 8007fb8:	0800812b 	.word	0x0800812b
 8007fbc:	0800814d 	.word	0x0800814d
 8007fc0:	08008189 	.word	0x08008189
 8007fc4:	080081af 	.word	0x080081af
 8007fc8:	080081ed 	.word	0x080081ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f103 0110 	add.w	r1, r3, #16
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	795b      	ldrb	r3, [r3, #5]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f943 	bl	8008264 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	761a      	strb	r2, [r3, #24]
      break;
 8007fe4:	e139      	b.n	800825a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	795b      	ldrb	r3, [r3, #5]
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fcc5 	bl	800897c <USBH_LL_GetURBState>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d11e      	bne.n	800803a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	7c1b      	ldrb	r3, [r3, #16]
 8008000:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008004:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	8adb      	ldrh	r3, [r3, #22]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800800e:	7b7b      	ldrb	r3, [r7, #13]
 8008010:	2b80      	cmp	r3, #128	; 0x80
 8008012:	d103      	bne.n	800801c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2203      	movs	r2, #3
 8008018:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800801a:	e115      	b.n	8008248 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2205      	movs	r2, #5
 8008020:	761a      	strb	r2, [r3, #24]
      break;
 8008022:	e111      	b.n	8008248 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008024:	7b7b      	ldrb	r3, [r7, #13]
 8008026:	2b80      	cmp	r3, #128	; 0x80
 8008028:	d103      	bne.n	8008032 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2209      	movs	r2, #9
 800802e:	761a      	strb	r2, [r3, #24]
      break;
 8008030:	e10a      	b.n	8008248 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2207      	movs	r2, #7
 8008036:	761a      	strb	r2, [r3, #24]
      break;
 8008038:	e106      	b.n	8008248 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	2b04      	cmp	r3, #4
 800803e:	d003      	beq.n	8008048 <USBH_HandleControl+0xcc>
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	2b02      	cmp	r3, #2
 8008044:	f040 8100 	bne.w	8008248 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	220b      	movs	r2, #11
 800804c:	761a      	strb	r2, [r3, #24]
      break;
 800804e:	e0fb      	b.n	8008248 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008056:	b29a      	uxth	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6899      	ldr	r1, [r3, #8]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	899a      	ldrh	r2, [r3, #12]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	791b      	ldrb	r3, [r3, #4]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f93a 	bl	80082e2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2204      	movs	r2, #4
 8008072:	761a      	strb	r2, [r3, #24]
      break;
 8008074:	e0f1      	b.n	800825a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	791b      	ldrb	r3, [r3, #4]
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fc7d 	bl	800897c <USBH_LL_GetURBState>
 8008082:	4603      	mov	r3, r0
 8008084:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d102      	bne.n	8008092 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2209      	movs	r2, #9
 8008090:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	2b05      	cmp	r3, #5
 8008096:	d102      	bne.n	800809e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008098:	2303      	movs	r3, #3
 800809a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800809c:	e0d6      	b.n	800824c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	f040 80d3 	bne.w	800824c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	220b      	movs	r2, #11
 80080aa:	761a      	strb	r2, [r3, #24]
      break;
 80080ac:	e0ce      	b.n	800824c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6899      	ldr	r1, [r3, #8]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	899a      	ldrh	r2, [r3, #12]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	795b      	ldrb	r3, [r3, #5]
 80080ba:	2001      	movs	r0, #1
 80080bc:	9000      	str	r0, [sp, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f8ea 	bl	8008298 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2206      	movs	r2, #6
 80080d4:	761a      	strb	r2, [r3, #24]
      break;
 80080d6:	e0c0      	b.n	800825a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	795b      	ldrb	r3, [r3, #5]
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fc4c 	bl	800897c <USBH_LL_GetURBState>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d103      	bne.n	80080f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2207      	movs	r2, #7
 80080f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080f4:	e0ac      	b.n	8008250 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b05      	cmp	r3, #5
 80080fa:	d105      	bne.n	8008108 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	220c      	movs	r2, #12
 8008100:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008102:	2303      	movs	r3, #3
 8008104:	73fb      	strb	r3, [r7, #15]
      break;
 8008106:	e0a3      	b.n	8008250 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d103      	bne.n	8008116 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2205      	movs	r2, #5
 8008112:	761a      	strb	r2, [r3, #24]
      break;
 8008114:	e09c      	b.n	8008250 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	2b04      	cmp	r3, #4
 800811a:	f040 8099 	bne.w	8008250 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	220b      	movs	r2, #11
 8008122:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008124:	2302      	movs	r3, #2
 8008126:	73fb      	strb	r3, [r7, #15]
      break;
 8008128:	e092      	b.n	8008250 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	791b      	ldrb	r3, [r3, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	2100      	movs	r1, #0
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f8d5 	bl	80082e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800813e:	b29a      	uxth	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2208      	movs	r2, #8
 8008148:	761a      	strb	r2, [r3, #24]

      break;
 800814a:	e086      	b.n	800825a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	791b      	ldrb	r3, [r3, #4]
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fc12 	bl	800897c <USBH_LL_GetURBState>
 8008158:	4603      	mov	r3, r0
 800815a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	2b01      	cmp	r3, #1
 8008160:	d105      	bne.n	800816e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	220d      	movs	r2, #13
 8008166:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800816c:	e072      	b.n	8008254 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	2b04      	cmp	r3, #4
 8008172:	d103      	bne.n	800817c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	220b      	movs	r2, #11
 8008178:	761a      	strb	r2, [r3, #24]
      break;
 800817a:	e06b      	b.n	8008254 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b05      	cmp	r3, #5
 8008180:	d168      	bne.n	8008254 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008182:	2303      	movs	r3, #3
 8008184:	73fb      	strb	r3, [r7, #15]
      break;
 8008186:	e065      	b.n	8008254 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	795b      	ldrb	r3, [r3, #5]
 800818c:	2201      	movs	r2, #1
 800818e:	9200      	str	r2, [sp, #0]
 8008190:	2200      	movs	r2, #0
 8008192:	2100      	movs	r1, #0
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f87f 	bl	8008298 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	220a      	movs	r2, #10
 80081aa:	761a      	strb	r2, [r3, #24]
      break;
 80081ac:	e055      	b.n	800825a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	795b      	ldrb	r3, [r3, #5]
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fbe1 	bl	800897c <USBH_LL_GetURBState>
 80081ba:	4603      	mov	r3, r0
 80081bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d105      	bne.n	80081d0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	220d      	movs	r2, #13
 80081cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081ce:	e043      	b.n	8008258 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d103      	bne.n	80081de <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2209      	movs	r2, #9
 80081da:	761a      	strb	r2, [r3, #24]
      break;
 80081dc:	e03c      	b.n	8008258 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	2b04      	cmp	r3, #4
 80081e2:	d139      	bne.n	8008258 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	220b      	movs	r2, #11
 80081e8:	761a      	strb	r2, [r3, #24]
      break;
 80081ea:	e035      	b.n	8008258 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	7e5b      	ldrb	r3, [r3, #25]
 80081f0:	3301      	adds	r3, #1
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	765a      	strb	r2, [r3, #25]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	7e5b      	ldrb	r3, [r3, #25]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d806      	bhi.n	800820e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800820c:	e025      	b.n	800825a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008214:	2106      	movs	r1, #6
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	795b      	ldrb	r3, [r3, #5]
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f90c 	bl	8008444 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	791b      	ldrb	r3, [r3, #4]
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f906 	bl	8008444 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800823e:	2302      	movs	r3, #2
 8008240:	73fb      	strb	r3, [r7, #15]
      break;
 8008242:	e00a      	b.n	800825a <USBH_HandleControl+0x2de>

    default:
      break;
 8008244:	bf00      	nop
 8008246:	e008      	b.n	800825a <USBH_HandleControl+0x2de>
      break;
 8008248:	bf00      	nop
 800824a:	e006      	b.n	800825a <USBH_HandleControl+0x2de>
      break;
 800824c:	bf00      	nop
 800824e:	e004      	b.n	800825a <USBH_HandleControl+0x2de>
      break;
 8008250:	bf00      	nop
 8008252:	e002      	b.n	800825a <USBH_HandleControl+0x2de>
      break;
 8008254:	bf00      	nop
 8008256:	e000      	b.n	800825a <USBH_HandleControl+0x2de>
      break;
 8008258:	bf00      	nop
  }

  return status;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af04      	add	r7, sp, #16
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	4613      	mov	r3, r2
 8008270:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008272:	79f9      	ldrb	r1, [r7, #7]
 8008274:	2300      	movs	r3, #0
 8008276:	9303      	str	r3, [sp, #12]
 8008278:	2308      	movs	r3, #8
 800827a:	9302      	str	r3, [sp, #8]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	9301      	str	r3, [sp, #4]
 8008280:	2300      	movs	r3, #0
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	2300      	movs	r3, #0
 8008286:	2200      	movs	r2, #0
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 fb46 	bl	800891a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af04      	add	r7, sp, #16
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	4611      	mov	r1, r2
 80082a4:	461a      	mov	r2, r3
 80082a6:	460b      	mov	r3, r1
 80082a8:	80fb      	strh	r3, [r7, #6]
 80082aa:	4613      	mov	r3, r2
 80082ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082bc:	7979      	ldrb	r1, [r7, #5]
 80082be:	7e3b      	ldrb	r3, [r7, #24]
 80082c0:	9303      	str	r3, [sp, #12]
 80082c2:	88fb      	ldrh	r3, [r7, #6]
 80082c4:	9302      	str	r3, [sp, #8]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	2301      	movs	r3, #1
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	2300      	movs	r3, #0
 80082d0:	2200      	movs	r2, #0
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 fb21 	bl	800891a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b088      	sub	sp, #32
 80082e6:	af04      	add	r7, sp, #16
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	4611      	mov	r1, r2
 80082ee:	461a      	mov	r2, r3
 80082f0:	460b      	mov	r3, r1
 80082f2:	80fb      	strh	r3, [r7, #6]
 80082f4:	4613      	mov	r3, r2
 80082f6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082f8:	7979      	ldrb	r1, [r7, #5]
 80082fa:	2300      	movs	r3, #0
 80082fc:	9303      	str	r3, [sp, #12]
 80082fe:	88fb      	ldrh	r3, [r7, #6]
 8008300:	9302      	str	r3, [sp, #8]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	2301      	movs	r3, #1
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	2300      	movs	r3, #0
 800830c:	2201      	movs	r2, #1
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 fb03 	bl	800891a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008314:	2300      	movs	r3, #0

}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b088      	sub	sp, #32
 8008322:	af04      	add	r7, sp, #16
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	4611      	mov	r1, r2
 800832a:	461a      	mov	r2, r3
 800832c:	460b      	mov	r3, r1
 800832e:	80fb      	strh	r3, [r7, #6]
 8008330:	4613      	mov	r3, r2
 8008332:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008342:	7979      	ldrb	r1, [r7, #5]
 8008344:	7e3b      	ldrb	r3, [r7, #24]
 8008346:	9303      	str	r3, [sp, #12]
 8008348:	88fb      	ldrh	r3, [r7, #6]
 800834a:	9302      	str	r3, [sp, #8]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	2301      	movs	r3, #1
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	2302      	movs	r3, #2
 8008356:	2200      	movs	r2, #0
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 fade 	bl	800891a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af04      	add	r7, sp, #16
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	4611      	mov	r1, r2
 8008374:	461a      	mov	r2, r3
 8008376:	460b      	mov	r3, r1
 8008378:	80fb      	strh	r3, [r7, #6]
 800837a:	4613      	mov	r3, r2
 800837c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800837e:	7979      	ldrb	r1, [r7, #5]
 8008380:	2300      	movs	r3, #0
 8008382:	9303      	str	r3, [sp, #12]
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	9302      	str	r3, [sp, #8]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	9301      	str	r3, [sp, #4]
 800838c:	2301      	movs	r3, #1
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	2302      	movs	r3, #2
 8008392:	2201      	movs	r2, #1
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 fac0 	bl	800891a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af04      	add	r7, sp, #16
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	4608      	mov	r0, r1
 80083ae:	4611      	mov	r1, r2
 80083b0:	461a      	mov	r2, r3
 80083b2:	4603      	mov	r3, r0
 80083b4:	70fb      	strb	r3, [r7, #3]
 80083b6:	460b      	mov	r3, r1
 80083b8:	70bb      	strb	r3, [r7, #2]
 80083ba:	4613      	mov	r3, r2
 80083bc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80083be:	7878      	ldrb	r0, [r7, #1]
 80083c0:	78ba      	ldrb	r2, [r7, #2]
 80083c2:	78f9      	ldrb	r1, [r7, #3]
 80083c4:	8b3b      	ldrh	r3, [r7, #24]
 80083c6:	9302      	str	r3, [sp, #8]
 80083c8:	7d3b      	ldrb	r3, [r7, #20]
 80083ca:	9301      	str	r3, [sp, #4]
 80083cc:	7c3b      	ldrb	r3, [r7, #16]
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	4603      	mov	r3, r0
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fa53 	bl	800887e <USBH_LL_OpenPipe>

  return USBH_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	460b      	mov	r3, r1
 80083ec:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80083ee:	78fb      	ldrb	r3, [r7, #3]
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa72 	bl	80088dc <USBH_LL_ClosePipe>

  return USBH_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	460b      	mov	r3, r1
 800840c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f836 	bl	8008480 <USBH_GetFreePipe>
 8008414:	4603      	mov	r3, r0
 8008416:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008418:	89fb      	ldrh	r3, [r7, #14]
 800841a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800841e:	4293      	cmp	r3, r2
 8008420:	d00a      	beq.n	8008438 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008422:	78fa      	ldrb	r2, [r7, #3]
 8008424:	89fb      	ldrh	r3, [r7, #14]
 8008426:	f003 030f 	and.w	r3, r3, #15
 800842a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	33e0      	adds	r3, #224	; 0xe0
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008438:	89fb      	ldrh	r3, [r7, #14]
 800843a:	b2db      	uxtb	r3, r3
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	2b0f      	cmp	r3, #15
 8008454:	d80d      	bhi.n	8008472 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008456:	78fb      	ldrb	r3, [r7, #3]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	33e0      	adds	r3, #224	; 0xe0
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008468:	6879      	ldr	r1, [r7, #4]
 800846a:	33e0      	adds	r3, #224	; 0xe0
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	440b      	add	r3, r1
 8008470:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]
 8008490:	e00f      	b.n	80084b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	33e0      	adds	r3, #224	; 0xe0
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	e007      	b.n	80084bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	3301      	adds	r3, #1
 80084b0:	73fb      	strb	r3, [r7, #15]
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	2b0f      	cmp	r3, #15
 80084b6:	d9ec      	bls.n	8008492 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80084b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80084cc:	2201      	movs	r2, #1
 80084ce:	490e      	ldr	r1, [pc, #56]	; (8008508 <MX_USB_HOST_Init+0x40>)
 80084d0:	480e      	ldr	r0, [pc, #56]	; (800850c <MX_USB_HOST_Init+0x44>)
 80084d2:	f7fe fba5 	bl	8006c20 <USBH_Init>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80084dc:	f7f8 fd58 	bl	8000f90 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80084e0:	490b      	ldr	r1, [pc, #44]	; (8008510 <MX_USB_HOST_Init+0x48>)
 80084e2:	480a      	ldr	r0, [pc, #40]	; (800850c <MX_USB_HOST_Init+0x44>)
 80084e4:	f7fe fc2a 	bl	8006d3c <USBH_RegisterClass>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80084ee:	f7f8 fd4f 	bl	8000f90 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80084f2:	4806      	ldr	r0, [pc, #24]	; (800850c <MX_USB_HOST_Init+0x44>)
 80084f4:	f7fe fcae 	bl	8006e54 <USBH_Start>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80084fe:	f7f8 fd47 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008502:	bf00      	nop
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	08008529 	.word	0x08008529
 800850c:	20000340 	.word	0x20000340
 8008510:	200000cc 	.word	0x200000cc

08008514 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008518:	4802      	ldr	r0, [pc, #8]	; (8008524 <MX_USB_HOST_Process+0x10>)
 800851a:	f7fe fcab 	bl	8006e74 <USBH_Process>
}
 800851e:	bf00      	nop
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20000340 	.word	0x20000340

08008528 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	3b01      	subs	r3, #1
 8008538:	2b04      	cmp	r3, #4
 800853a:	d819      	bhi.n	8008570 <USBH_UserProcess+0x48>
 800853c:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <USBH_UserProcess+0x1c>)
 800853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008542:	bf00      	nop
 8008544:	08008571 	.word	0x08008571
 8008548:	08008561 	.word	0x08008561
 800854c:	08008571 	.word	0x08008571
 8008550:	08008569 	.word	0x08008569
 8008554:	08008559 	.word	0x08008559
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008558:	4b09      	ldr	r3, [pc, #36]	; (8008580 <USBH_UserProcess+0x58>)
 800855a:	2203      	movs	r2, #3
 800855c:	701a      	strb	r2, [r3, #0]
  break;
 800855e:	e008      	b.n	8008572 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008560:	4b07      	ldr	r3, [pc, #28]	; (8008580 <USBH_UserProcess+0x58>)
 8008562:	2202      	movs	r2, #2
 8008564:	701a      	strb	r2, [r3, #0]
  break;
 8008566:	e004      	b.n	8008572 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008568:	4b05      	ldr	r3, [pc, #20]	; (8008580 <USBH_UserProcess+0x58>)
 800856a:	2201      	movs	r2, #1
 800856c:	701a      	strb	r2, [r3, #0]
  break;
 800856e:	e000      	b.n	8008572 <USBH_UserProcess+0x4a>

  default:
  break;
 8008570:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20000718 	.word	0x20000718

08008584 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08a      	sub	sp, #40	; 0x28
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800858c:	f107 0314 	add.w	r3, r7, #20
 8008590:	2200      	movs	r2, #0
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	605a      	str	r2, [r3, #4]
 8008596:	609a      	str	r2, [r3, #8]
 8008598:	60da      	str	r2, [r3, #12]
 800859a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085a4:	d147      	bne.n	8008636 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085a6:	2300      	movs	r3, #0
 80085a8:	613b      	str	r3, [r7, #16]
 80085aa:	4b25      	ldr	r3, [pc, #148]	; (8008640 <HAL_HCD_MspInit+0xbc>)
 80085ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ae:	4a24      	ldr	r2, [pc, #144]	; (8008640 <HAL_HCD_MspInit+0xbc>)
 80085b0:	f043 0301 	orr.w	r3, r3, #1
 80085b4:	6313      	str	r3, [r2, #48]	; 0x30
 80085b6:	4b22      	ldr	r3, [pc, #136]	; (8008640 <HAL_HCD_MspInit+0xbc>)
 80085b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	613b      	str	r3, [r7, #16]
 80085c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80085c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085cc:	2300      	movs	r3, #0
 80085ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80085d0:	f107 0314 	add.w	r3, r7, #20
 80085d4:	4619      	mov	r1, r3
 80085d6:	481b      	ldr	r0, [pc, #108]	; (8008644 <HAL_HCD_MspInit+0xc0>)
 80085d8:	f7f9 f8de 	bl	8001798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80085dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80085e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085e2:	2302      	movs	r3, #2
 80085e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085ea:	2303      	movs	r3, #3
 80085ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085ee:	230a      	movs	r3, #10
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085f2:	f107 0314 	add.w	r3, r7, #20
 80085f6:	4619      	mov	r1, r3
 80085f8:	4812      	ldr	r0, [pc, #72]	; (8008644 <HAL_HCD_MspInit+0xc0>)
 80085fa:	f7f9 f8cd 	bl	8001798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80085fe:	4b10      	ldr	r3, [pc, #64]	; (8008640 <HAL_HCD_MspInit+0xbc>)
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	4a0f      	ldr	r2, [pc, #60]	; (8008640 <HAL_HCD_MspInit+0xbc>)
 8008604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008608:	6353      	str	r3, [r2, #52]	; 0x34
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	4b0c      	ldr	r3, [pc, #48]	; (8008640 <HAL_HCD_MspInit+0xbc>)
 8008610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008612:	4a0b      	ldr	r2, [pc, #44]	; (8008640 <HAL_HCD_MspInit+0xbc>)
 8008614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008618:	6453      	str	r3, [r2, #68]	; 0x44
 800861a:	4b09      	ldr	r3, [pc, #36]	; (8008640 <HAL_HCD_MspInit+0xbc>)
 800861c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008626:	2200      	movs	r2, #0
 8008628:	2100      	movs	r1, #0
 800862a:	2043      	movs	r0, #67	; 0x43
 800862c:	f7f9 f87d 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008630:	2043      	movs	r0, #67	; 0x43
 8008632:	f7f9 f896 	bl	8001762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008636:	bf00      	nop
 8008638:	3728      	adds	r7, #40	; 0x28
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	40023800 	.word	0x40023800
 8008644:	40020000 	.word	0x40020000

08008648 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe ffeb 	bl	8007632 <USBH_LL_IncTimer>
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff f823 	bl	80076be <USBH_LL_Connect>
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff f82c 	bl	80076ec <USBH_LL_Disconnect>
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
 80086a8:	4613      	mov	r3, r2
 80086aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fe ffdd 	bl	8007686 <USBH_LL_PortEnabled>
}
 80086cc:	bf00      	nop
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe ffdd 	bl	80076a2 <USBH_LL_PortDisabled>
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d12a      	bne.n	8008758 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008702:	4a18      	ldr	r2, [pc, #96]	; (8008764 <USBH_LL_Init+0x74>)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a15      	ldr	r2, [pc, #84]	; (8008764 <USBH_LL_Init+0x74>)
 800870e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008712:	4b14      	ldr	r3, [pc, #80]	; (8008764 <USBH_LL_Init+0x74>)
 8008714:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008718:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800871a:	4b12      	ldr	r3, [pc, #72]	; (8008764 <USBH_LL_Init+0x74>)
 800871c:	2208      	movs	r2, #8
 800871e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008720:	4b10      	ldr	r3, [pc, #64]	; (8008764 <USBH_LL_Init+0x74>)
 8008722:	2201      	movs	r2, #1
 8008724:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008726:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <USBH_LL_Init+0x74>)
 8008728:	2200      	movs	r2, #0
 800872a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800872c:	4b0d      	ldr	r3, [pc, #52]	; (8008764 <USBH_LL_Init+0x74>)
 800872e:	2202      	movs	r2, #2
 8008730:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008732:	4b0c      	ldr	r3, [pc, #48]	; (8008764 <USBH_LL_Init+0x74>)
 8008734:	2200      	movs	r2, #0
 8008736:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008738:	480a      	ldr	r0, [pc, #40]	; (8008764 <USBH_LL_Init+0x74>)
 800873a:	f7f9 fa15 	bl	8001b68 <HAL_HCD_Init>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008744:	f7f8 fc24 	bl	8000f90 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008748:	4806      	ldr	r0, [pc, #24]	; (8008764 <USBH_LL_Init+0x74>)
 800874a:	f7f9 fdf8 	bl	800233e <HAL_HCD_GetCurrentFrame>
 800874e:	4603      	mov	r3, r0
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7fe ff5e 	bl	8007614 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	2000071c 	.word	0x2000071c

08008768 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800877e:	4618      	mov	r0, r3
 8008780:	f7f9 fd67 	bl	8002252 <HAL_HCD_Start>
 8008784:	4603      	mov	r3, r0
 8008786:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	4618      	mov	r0, r3
 800878c:	f000 f95c 	bl	8008a48 <USBH_Get_USB_Status>
 8008790:	4603      	mov	r3, r0
 8008792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008794:	7bbb      	ldrb	r3, [r7, #14]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7f9 fd6f 	bl	8002298 <HAL_HCD_Stop>
 80087ba:	4603      	mov	r3, r0
 80087bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 f941 	bl	8008a48 <USBH_Get_USB_Status>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80087dc:	2301      	movs	r3, #1
 80087de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7f9 fdb7 	bl	800235a <HAL_HCD_GetCurrentSpeed>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d00c      	beq.n	800880c <USBH_LL_GetSpeed+0x38>
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d80d      	bhi.n	8008812 <USBH_LL_GetSpeed+0x3e>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <USBH_LL_GetSpeed+0x2c>
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d003      	beq.n	8008806 <USBH_LL_GetSpeed+0x32>
 80087fe:	e008      	b.n	8008812 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
    break;
 8008804:	e008      	b.n	8008818 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008806:	2301      	movs	r3, #1
 8008808:	73fb      	strb	r3, [r7, #15]
    break;
 800880a:	e005      	b.n	8008818 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800880c:	2302      	movs	r3, #2
 800880e:	73fb      	strb	r3, [r7, #15]
    break;
 8008810:	e002      	b.n	8008818 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008812:	2301      	movs	r3, #1
 8008814:	73fb      	strb	r3, [r7, #15]
    break;
 8008816:	bf00      	nop
  }
  return  speed;
 8008818:	7bfb      	ldrb	r3, [r7, #15]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008838:	4618      	mov	r0, r3
 800883a:	f7f9 fd4a 	bl	80022d2 <HAL_HCD_ResetPort>
 800883e:	4603      	mov	r3, r0
 8008840:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	4618      	mov	r0, r3
 8008846:	f000 f8ff 	bl	8008a48 <USBH_Get_USB_Status>
 800884a:	4603      	mov	r3, r0
 800884c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800884e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800886a:	78fa      	ldrb	r2, [r7, #3]
 800886c:	4611      	mov	r1, r2
 800886e:	4618      	mov	r0, r3
 8008870:	f7f9 fd51 	bl	8002316 <HAL_HCD_HC_GetXferCount>
 8008874:	4603      	mov	r3, r0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800887e:	b590      	push	{r4, r7, lr}
 8008880:	b089      	sub	sp, #36	; 0x24
 8008882:	af04      	add	r7, sp, #16
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	4608      	mov	r0, r1
 8008888:	4611      	mov	r1, r2
 800888a:	461a      	mov	r2, r3
 800888c:	4603      	mov	r3, r0
 800888e:	70fb      	strb	r3, [r7, #3]
 8008890:	460b      	mov	r3, r1
 8008892:	70bb      	strb	r3, [r7, #2]
 8008894:	4613      	mov	r3, r2
 8008896:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80088a6:	787c      	ldrb	r4, [r7, #1]
 80088a8:	78ba      	ldrb	r2, [r7, #2]
 80088aa:	78f9      	ldrb	r1, [r7, #3]
 80088ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088ae:	9302      	str	r3, [sp, #8]
 80088b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80088b4:	9301      	str	r3, [sp, #4]
 80088b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	4623      	mov	r3, r4
 80088be:	f7f9 f9b5 	bl	8001c2c <HAL_HCD_HC_Init>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 f8bd 	bl	8008a48 <USBH_Get_USB_Status>
 80088ce:	4603      	mov	r3, r0
 80088d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd90      	pop	{r4, r7, pc}

080088dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088f6:	78fa      	ldrb	r2, [r7, #3]
 80088f8:	4611      	mov	r1, r2
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7f9 fa25 	bl	8001d4a <HAL_HCD_HC_Halt>
 8008900:	4603      	mov	r3, r0
 8008902:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 f89e 	bl	8008a48 <USBH_Get_USB_Status>
 800890c:	4603      	mov	r3, r0
 800890e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008910:	7bbb      	ldrb	r3, [r7, #14]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800891a:	b590      	push	{r4, r7, lr}
 800891c:	b089      	sub	sp, #36	; 0x24
 800891e:	af04      	add	r7, sp, #16
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	4608      	mov	r0, r1
 8008924:	4611      	mov	r1, r2
 8008926:	461a      	mov	r2, r3
 8008928:	4603      	mov	r3, r0
 800892a:	70fb      	strb	r3, [r7, #3]
 800892c:	460b      	mov	r3, r1
 800892e:	70bb      	strb	r3, [r7, #2]
 8008930:	4613      	mov	r3, r2
 8008932:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008942:	787c      	ldrb	r4, [r7, #1]
 8008944:	78ba      	ldrb	r2, [r7, #2]
 8008946:	78f9      	ldrb	r1, [r7, #3]
 8008948:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800894c:	9303      	str	r3, [sp, #12]
 800894e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008950:	9302      	str	r3, [sp, #8]
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	f897 3020 	ldrb.w	r3, [r7, #32]
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	4623      	mov	r3, r4
 800895e:	f7f9 fa17 	bl	8001d90 <HAL_HCD_HC_SubmitRequest>
 8008962:	4603      	mov	r3, r0
 8008964:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	4618      	mov	r0, r3
 800896a:	f000 f86d 	bl	8008a48 <USBH_Get_USB_Status>
 800896e:	4603      	mov	r3, r0
 8008970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008972:	7bbb      	ldrb	r3, [r7, #14]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	bd90      	pop	{r4, r7, pc}

0800897c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800898e:	78fa      	ldrb	r2, [r7, #3]
 8008990:	4611      	mov	r1, r2
 8008992:	4618      	mov	r0, r3
 8008994:	f7f9 fcab 	bl	80022ee <HAL_HCD_HC_GetURBState>
 8008998:	4603      	mov	r3, r0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d103      	bne.n	80089c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 f870 	bl	8008aa0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80089c0:	20c8      	movs	r0, #200	; 0xc8
 80089c2:	f7f8 fdb3 	bl	800152c <HAL_Delay>
  return USBH_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	70fb      	strb	r3, [r7, #3]
 80089dc:	4613      	mov	r3, r2
 80089de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	212c      	movs	r1, #44	; 0x2c
 80089ee:	fb01 f303 	mul.w	r3, r1, r3
 80089f2:	4413      	add	r3, r2
 80089f4:	333b      	adds	r3, #59	; 0x3b
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d009      	beq.n	8008a10 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80089fc:	78fb      	ldrb	r3, [r7, #3]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	212c      	movs	r1, #44	; 0x2c
 8008a02:	fb01 f303 	mul.w	r3, r1, r3
 8008a06:	4413      	add	r3, r2
 8008a08:	3354      	adds	r3, #84	; 0x54
 8008a0a:	78ba      	ldrb	r2, [r7, #2]
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	e008      	b.n	8008a22 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008a10:	78fb      	ldrb	r3, [r7, #3]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	212c      	movs	r1, #44	; 0x2c
 8008a16:	fb01 f303 	mul.w	r3, r1, r3
 8008a1a:	4413      	add	r3, r2
 8008a1c:	3355      	adds	r3, #85	; 0x55
 8008a1e:	78ba      	ldrb	r2, [r7, #2]
 8008a20:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7f8 fd77 	bl	800152c <HAL_Delay>
}
 8008a3e:	bf00      	nop
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a56:	79fb      	ldrb	r3, [r7, #7]
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d817      	bhi.n	8008a8c <USBH_Get_USB_Status+0x44>
 8008a5c:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <USBH_Get_USB_Status+0x1c>)
 8008a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a62:	bf00      	nop
 8008a64:	08008a75 	.word	0x08008a75
 8008a68:	08008a7b 	.word	0x08008a7b
 8008a6c:	08008a81 	.word	0x08008a81
 8008a70:	08008a87 	.word	0x08008a87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73fb      	strb	r3, [r7, #15]
    break;
 8008a78:	e00b      	b.n	8008a92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a7e:	e008      	b.n	8008a92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008a80:	2301      	movs	r3, #1
 8008a82:	73fb      	strb	r3, [r7, #15]
    break;
 8008a84:	e005      	b.n	8008a92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008a86:	2302      	movs	r3, #2
 8008a88:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8a:	e002      	b.n	8008a92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a90:	bf00      	nop
  }
  return usb_status;
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008aaa:	79fb      	ldrb	r3, [r7, #7]
 8008aac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008aae:	79fb      	ldrb	r3, [r7, #7]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d102      	bne.n	8008aba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73fb      	strb	r3, [r7, #15]
 8008ab8:	e001      	b.n	8008abe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008aba:	2301      	movs	r3, #1
 8008abc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	4803      	ldr	r0, [pc, #12]	; (8008ad4 <MX_DriverVbusFS+0x34>)
 8008ac6:	f7f9 f803 	bl	8001ad0 <HAL_GPIO_WritePin>
}
 8008aca:	bf00      	nop
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	40020800 	.word	0x40020800

08008ad8 <malloc>:
 8008ad8:	4b02      	ldr	r3, [pc, #8]	; (8008ae4 <malloc+0xc>)
 8008ada:	4601      	mov	r1, r0
 8008adc:	6818      	ldr	r0, [r3, #0]
 8008ade:	f000 b82b 	b.w	8008b38 <_malloc_r>
 8008ae2:	bf00      	nop
 8008ae4:	20000138 	.word	0x20000138

08008ae8 <free>:
 8008ae8:	4b02      	ldr	r3, [pc, #8]	; (8008af4 <free+0xc>)
 8008aea:	4601      	mov	r1, r0
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	f000 b8f3 	b.w	8008cd8 <_free_r>
 8008af2:	bf00      	nop
 8008af4:	20000138 	.word	0x20000138

08008af8 <sbrk_aligned>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	4e0e      	ldr	r6, [pc, #56]	; (8008b34 <sbrk_aligned+0x3c>)
 8008afc:	460c      	mov	r4, r1
 8008afe:	6831      	ldr	r1, [r6, #0]
 8008b00:	4605      	mov	r5, r0
 8008b02:	b911      	cbnz	r1, 8008b0a <sbrk_aligned+0x12>
 8008b04:	f000 f8ac 	bl	8008c60 <_sbrk_r>
 8008b08:	6030      	str	r0, [r6, #0]
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f000 f8a7 	bl	8008c60 <_sbrk_r>
 8008b12:	1c43      	adds	r3, r0, #1
 8008b14:	d00a      	beq.n	8008b2c <sbrk_aligned+0x34>
 8008b16:	1cc4      	adds	r4, r0, #3
 8008b18:	f024 0403 	bic.w	r4, r4, #3
 8008b1c:	42a0      	cmp	r0, r4
 8008b1e:	d007      	beq.n	8008b30 <sbrk_aligned+0x38>
 8008b20:	1a21      	subs	r1, r4, r0
 8008b22:	4628      	mov	r0, r5
 8008b24:	f000 f89c 	bl	8008c60 <_sbrk_r>
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d101      	bne.n	8008b30 <sbrk_aligned+0x38>
 8008b2c:	f04f 34ff 	mov.w	r4, #4294967295
 8008b30:	4620      	mov	r0, r4
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	20000a24 	.word	0x20000a24

08008b38 <_malloc_r>:
 8008b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b3c:	1ccd      	adds	r5, r1, #3
 8008b3e:	f025 0503 	bic.w	r5, r5, #3
 8008b42:	3508      	adds	r5, #8
 8008b44:	2d0c      	cmp	r5, #12
 8008b46:	bf38      	it	cc
 8008b48:	250c      	movcc	r5, #12
 8008b4a:	2d00      	cmp	r5, #0
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	db01      	blt.n	8008b54 <_malloc_r+0x1c>
 8008b50:	42a9      	cmp	r1, r5
 8008b52:	d905      	bls.n	8008b60 <_malloc_r+0x28>
 8008b54:	230c      	movs	r3, #12
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	2600      	movs	r6, #0
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c34 <_malloc_r+0xfc>
 8008b64:	f000 f868 	bl	8008c38 <__malloc_lock>
 8008b68:	f8d8 3000 	ldr.w	r3, [r8]
 8008b6c:	461c      	mov	r4, r3
 8008b6e:	bb5c      	cbnz	r4, 8008bc8 <_malloc_r+0x90>
 8008b70:	4629      	mov	r1, r5
 8008b72:	4638      	mov	r0, r7
 8008b74:	f7ff ffc0 	bl	8008af8 <sbrk_aligned>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	d155      	bne.n	8008c2a <_malloc_r+0xf2>
 8008b7e:	f8d8 4000 	ldr.w	r4, [r8]
 8008b82:	4626      	mov	r6, r4
 8008b84:	2e00      	cmp	r6, #0
 8008b86:	d145      	bne.n	8008c14 <_malloc_r+0xdc>
 8008b88:	2c00      	cmp	r4, #0
 8008b8a:	d048      	beq.n	8008c1e <_malloc_r+0xe6>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4638      	mov	r0, r7
 8008b92:	eb04 0903 	add.w	r9, r4, r3
 8008b96:	f000 f863 	bl	8008c60 <_sbrk_r>
 8008b9a:	4581      	cmp	r9, r0
 8008b9c:	d13f      	bne.n	8008c1e <_malloc_r+0xe6>
 8008b9e:	6821      	ldr	r1, [r4, #0]
 8008ba0:	1a6d      	subs	r5, r5, r1
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	f7ff ffa7 	bl	8008af8 <sbrk_aligned>
 8008baa:	3001      	adds	r0, #1
 8008bac:	d037      	beq.n	8008c1e <_malloc_r+0xe6>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	442b      	add	r3, r5
 8008bb2:	6023      	str	r3, [r4, #0]
 8008bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d038      	beq.n	8008c2e <_malloc_r+0xf6>
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	42a2      	cmp	r2, r4
 8008bc0:	d12b      	bne.n	8008c1a <_malloc_r+0xe2>
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	605a      	str	r2, [r3, #4]
 8008bc6:	e00f      	b.n	8008be8 <_malloc_r+0xb0>
 8008bc8:	6822      	ldr	r2, [r4, #0]
 8008bca:	1b52      	subs	r2, r2, r5
 8008bcc:	d41f      	bmi.n	8008c0e <_malloc_r+0xd6>
 8008bce:	2a0b      	cmp	r2, #11
 8008bd0:	d917      	bls.n	8008c02 <_malloc_r+0xca>
 8008bd2:	1961      	adds	r1, r4, r5
 8008bd4:	42a3      	cmp	r3, r4
 8008bd6:	6025      	str	r5, [r4, #0]
 8008bd8:	bf18      	it	ne
 8008bda:	6059      	strne	r1, [r3, #4]
 8008bdc:	6863      	ldr	r3, [r4, #4]
 8008bde:	bf08      	it	eq
 8008be0:	f8c8 1000 	streq.w	r1, [r8]
 8008be4:	5162      	str	r2, [r4, r5]
 8008be6:	604b      	str	r3, [r1, #4]
 8008be8:	4638      	mov	r0, r7
 8008bea:	f104 060b 	add.w	r6, r4, #11
 8008bee:	f000 f829 	bl	8008c44 <__malloc_unlock>
 8008bf2:	f026 0607 	bic.w	r6, r6, #7
 8008bf6:	1d23      	adds	r3, r4, #4
 8008bf8:	1af2      	subs	r2, r6, r3
 8008bfa:	d0ae      	beq.n	8008b5a <_malloc_r+0x22>
 8008bfc:	1b9b      	subs	r3, r3, r6
 8008bfe:	50a3      	str	r3, [r4, r2]
 8008c00:	e7ab      	b.n	8008b5a <_malloc_r+0x22>
 8008c02:	42a3      	cmp	r3, r4
 8008c04:	6862      	ldr	r2, [r4, #4]
 8008c06:	d1dd      	bne.n	8008bc4 <_malloc_r+0x8c>
 8008c08:	f8c8 2000 	str.w	r2, [r8]
 8008c0c:	e7ec      	b.n	8008be8 <_malloc_r+0xb0>
 8008c0e:	4623      	mov	r3, r4
 8008c10:	6864      	ldr	r4, [r4, #4]
 8008c12:	e7ac      	b.n	8008b6e <_malloc_r+0x36>
 8008c14:	4634      	mov	r4, r6
 8008c16:	6876      	ldr	r6, [r6, #4]
 8008c18:	e7b4      	b.n	8008b84 <_malloc_r+0x4c>
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	e7cc      	b.n	8008bb8 <_malloc_r+0x80>
 8008c1e:	230c      	movs	r3, #12
 8008c20:	603b      	str	r3, [r7, #0]
 8008c22:	4638      	mov	r0, r7
 8008c24:	f000 f80e 	bl	8008c44 <__malloc_unlock>
 8008c28:	e797      	b.n	8008b5a <_malloc_r+0x22>
 8008c2a:	6025      	str	r5, [r4, #0]
 8008c2c:	e7dc      	b.n	8008be8 <_malloc_r+0xb0>
 8008c2e:	605b      	str	r3, [r3, #4]
 8008c30:	deff      	udf	#255	; 0xff
 8008c32:	bf00      	nop
 8008c34:	20000a20 	.word	0x20000a20

08008c38 <__malloc_lock>:
 8008c38:	4801      	ldr	r0, [pc, #4]	; (8008c40 <__malloc_lock+0x8>)
 8008c3a:	f000 b84b 	b.w	8008cd4 <__retarget_lock_acquire_recursive>
 8008c3e:	bf00      	nop
 8008c40:	20000b64 	.word	0x20000b64

08008c44 <__malloc_unlock>:
 8008c44:	4801      	ldr	r0, [pc, #4]	; (8008c4c <__malloc_unlock+0x8>)
 8008c46:	f000 b846 	b.w	8008cd6 <__retarget_lock_release_recursive>
 8008c4a:	bf00      	nop
 8008c4c:	20000b64 	.word	0x20000b64

08008c50 <memset>:
 8008c50:	4402      	add	r2, r0
 8008c52:	4603      	mov	r3, r0
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d100      	bne.n	8008c5a <memset+0xa>
 8008c58:	4770      	bx	lr
 8008c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c5e:	e7f9      	b.n	8008c54 <memset+0x4>

08008c60 <_sbrk_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	4d06      	ldr	r5, [pc, #24]	; (8008c7c <_sbrk_r+0x1c>)
 8008c64:	2300      	movs	r3, #0
 8008c66:	4604      	mov	r4, r0
 8008c68:	4608      	mov	r0, r1
 8008c6a:	602b      	str	r3, [r5, #0]
 8008c6c:	f7f8 fa9a 	bl	80011a4 <_sbrk>
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d102      	bne.n	8008c7a <_sbrk_r+0x1a>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	b103      	cbz	r3, 8008c7a <_sbrk_r+0x1a>
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	20000b60 	.word	0x20000b60

08008c80 <__errno>:
 8008c80:	4b01      	ldr	r3, [pc, #4]	; (8008c88 <__errno+0x8>)
 8008c82:	6818      	ldr	r0, [r3, #0]
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	20000138 	.word	0x20000138

08008c8c <__libc_init_array>:
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	4d0d      	ldr	r5, [pc, #52]	; (8008cc4 <__libc_init_array+0x38>)
 8008c90:	4c0d      	ldr	r4, [pc, #52]	; (8008cc8 <__libc_init_array+0x3c>)
 8008c92:	1b64      	subs	r4, r4, r5
 8008c94:	10a4      	asrs	r4, r4, #2
 8008c96:	2600      	movs	r6, #0
 8008c98:	42a6      	cmp	r6, r4
 8008c9a:	d109      	bne.n	8008cb0 <__libc_init_array+0x24>
 8008c9c:	4d0b      	ldr	r5, [pc, #44]	; (8008ccc <__libc_init_array+0x40>)
 8008c9e:	4c0c      	ldr	r4, [pc, #48]	; (8008cd0 <__libc_init_array+0x44>)
 8008ca0:	f000 f866 	bl	8008d70 <_init>
 8008ca4:	1b64      	subs	r4, r4, r5
 8008ca6:	10a4      	asrs	r4, r4, #2
 8008ca8:	2600      	movs	r6, #0
 8008caa:	42a6      	cmp	r6, r4
 8008cac:	d105      	bne.n	8008cba <__libc_init_array+0x2e>
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cb4:	4798      	blx	r3
 8008cb6:	3601      	adds	r6, #1
 8008cb8:	e7ee      	b.n	8008c98 <__libc_init_array+0xc>
 8008cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cbe:	4798      	blx	r3
 8008cc0:	3601      	adds	r6, #1
 8008cc2:	e7f2      	b.n	8008caa <__libc_init_array+0x1e>
 8008cc4:	08008dac 	.word	0x08008dac
 8008cc8:	08008dac 	.word	0x08008dac
 8008ccc:	08008dac 	.word	0x08008dac
 8008cd0:	08008db0 	.word	0x08008db0

08008cd4 <__retarget_lock_acquire_recursive>:
 8008cd4:	4770      	bx	lr

08008cd6 <__retarget_lock_release_recursive>:
 8008cd6:	4770      	bx	lr

08008cd8 <_free_r>:
 8008cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cda:	2900      	cmp	r1, #0
 8008cdc:	d044      	beq.n	8008d68 <_free_r+0x90>
 8008cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ce2:	9001      	str	r0, [sp, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8008cea:	bfb8      	it	lt
 8008cec:	18e4      	addlt	r4, r4, r3
 8008cee:	f7ff ffa3 	bl	8008c38 <__malloc_lock>
 8008cf2:	4a1e      	ldr	r2, [pc, #120]	; (8008d6c <_free_r+0x94>)
 8008cf4:	9801      	ldr	r0, [sp, #4]
 8008cf6:	6813      	ldr	r3, [r2, #0]
 8008cf8:	b933      	cbnz	r3, 8008d08 <_free_r+0x30>
 8008cfa:	6063      	str	r3, [r4, #4]
 8008cfc:	6014      	str	r4, [r2, #0]
 8008cfe:	b003      	add	sp, #12
 8008d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d04:	f7ff bf9e 	b.w	8008c44 <__malloc_unlock>
 8008d08:	42a3      	cmp	r3, r4
 8008d0a:	d908      	bls.n	8008d1e <_free_r+0x46>
 8008d0c:	6825      	ldr	r5, [r4, #0]
 8008d0e:	1961      	adds	r1, r4, r5
 8008d10:	428b      	cmp	r3, r1
 8008d12:	bf01      	itttt	eq
 8008d14:	6819      	ldreq	r1, [r3, #0]
 8008d16:	685b      	ldreq	r3, [r3, #4]
 8008d18:	1949      	addeq	r1, r1, r5
 8008d1a:	6021      	streq	r1, [r4, #0]
 8008d1c:	e7ed      	b.n	8008cfa <_free_r+0x22>
 8008d1e:	461a      	mov	r2, r3
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	b10b      	cbz	r3, 8008d28 <_free_r+0x50>
 8008d24:	42a3      	cmp	r3, r4
 8008d26:	d9fa      	bls.n	8008d1e <_free_r+0x46>
 8008d28:	6811      	ldr	r1, [r2, #0]
 8008d2a:	1855      	adds	r5, r2, r1
 8008d2c:	42a5      	cmp	r5, r4
 8008d2e:	d10b      	bne.n	8008d48 <_free_r+0x70>
 8008d30:	6824      	ldr	r4, [r4, #0]
 8008d32:	4421      	add	r1, r4
 8008d34:	1854      	adds	r4, r2, r1
 8008d36:	42a3      	cmp	r3, r4
 8008d38:	6011      	str	r1, [r2, #0]
 8008d3a:	d1e0      	bne.n	8008cfe <_free_r+0x26>
 8008d3c:	681c      	ldr	r4, [r3, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	6053      	str	r3, [r2, #4]
 8008d42:	440c      	add	r4, r1
 8008d44:	6014      	str	r4, [r2, #0]
 8008d46:	e7da      	b.n	8008cfe <_free_r+0x26>
 8008d48:	d902      	bls.n	8008d50 <_free_r+0x78>
 8008d4a:	230c      	movs	r3, #12
 8008d4c:	6003      	str	r3, [r0, #0]
 8008d4e:	e7d6      	b.n	8008cfe <_free_r+0x26>
 8008d50:	6825      	ldr	r5, [r4, #0]
 8008d52:	1961      	adds	r1, r4, r5
 8008d54:	428b      	cmp	r3, r1
 8008d56:	bf04      	itt	eq
 8008d58:	6819      	ldreq	r1, [r3, #0]
 8008d5a:	685b      	ldreq	r3, [r3, #4]
 8008d5c:	6063      	str	r3, [r4, #4]
 8008d5e:	bf04      	itt	eq
 8008d60:	1949      	addeq	r1, r1, r5
 8008d62:	6021      	streq	r1, [r4, #0]
 8008d64:	6054      	str	r4, [r2, #4]
 8008d66:	e7ca      	b.n	8008cfe <_free_r+0x26>
 8008d68:	b003      	add	sp, #12
 8008d6a:	bd30      	pop	{r4, r5, pc}
 8008d6c:	20000a20 	.word	0x20000a20

08008d70 <_init>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr

08008d7c <_fini>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	bf00      	nop
 8008d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d82:	bc08      	pop	{r3}
 8008d84:	469e      	mov	lr, r3
 8008d86:	4770      	bx	lr
