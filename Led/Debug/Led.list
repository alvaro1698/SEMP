
Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c94  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007e2c  08007e2c  00017e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e48  08007e48  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e48  08007e48  00017e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e50  08007e50  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e50  08007e50  00017e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e54  08007e54  00017e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000988  2000007c  08007ed4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a04  08007ed4  00020a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001513d  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e36  00000000  00000000  0003522c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00039068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d42  00000000  00000000  0003a1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191bf  00000000  00000000  0003af32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018de1  00000000  00000000  000540f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e2b0  00000000  00000000  0006ced2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a90  00000000  00000000  000fb184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000ffc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007e14 	.word	0x08007e14

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08007e14 	.word	0x08007e14

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	; 0x30
 80004d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
 80004ee:	4b61      	ldr	r3, [pc, #388]	; (8000674 <MX_GPIO_Init+0x1a0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a60      	ldr	r2, [pc, #384]	; (8000674 <MX_GPIO_Init+0x1a0>)
 80004f4:	f043 0310 	orr.w	r3, r3, #16
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b5e      	ldr	r3, [pc, #376]	; (8000674 <MX_GPIO_Init+0x1a0>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f003 0310 	and.w	r3, r3, #16
 8000502:	61bb      	str	r3, [r7, #24]
 8000504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	4b5a      	ldr	r3, [pc, #360]	; (8000674 <MX_GPIO_Init+0x1a0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a59      	ldr	r2, [pc, #356]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b57      	ldr	r3, [pc, #348]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	4b53      	ldr	r3, [pc, #332]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a52      	ldr	r2, [pc, #328]	; (8000674 <MX_GPIO_Init+0x1a0>)
 800052c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b50      	ldr	r3, [pc, #320]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	4b4c      	ldr	r3, [pc, #304]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a4b      	ldr	r2, [pc, #300]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b49      	ldr	r3, [pc, #292]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	4b45      	ldr	r3, [pc, #276]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a44      	ldr	r2, [pc, #272]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b42      	ldr	r3, [pc, #264]	; (8000674 <MX_GPIO_Init+0x1a0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b3e      	ldr	r3, [pc, #248]	; (8000674 <MX_GPIO_Init+0x1a0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a3d      	ldr	r2, [pc, #244]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000580:	f043 0308 	orr.w	r3, r3, #8
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <MX_GPIO_Init+0x1a0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2108      	movs	r1, #8
 8000596:	4838      	ldr	r0, [pc, #224]	; (8000678 <MX_GPIO_Init+0x1a4>)
 8000598:	f000 ff94 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2101      	movs	r1, #1
 80005a0:	4836      	ldr	r0, [pc, #216]	; (800067c <MX_GPIO_Init+0x1a8>)
 80005a2:	f000 ff8f 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005a6:	2200      	movs	r2, #0
 80005a8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005ac:	4834      	ldr	r0, [pc, #208]	; (8000680 <MX_GPIO_Init+0x1ac>)
 80005ae:	f000 ff89 	bl	80014c4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005b2:	2304      	movs	r3, #4
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	4619      	mov	r1, r3
 80005c4:	482c      	ldr	r0, [pc, #176]	; (8000678 <MX_GPIO_Init+0x1a4>)
 80005c6:	f000 fde1 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005ca:	2308      	movs	r3, #8
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	4619      	mov	r1, r3
 80005e0:	4825      	ldr	r0, [pc, #148]	; (8000678 <MX_GPIO_Init+0x1a4>)
 80005e2:	f000 fdd3 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80005e6:	2332      	movs	r3, #50	; 0x32
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4619      	mov	r1, r3
 80005fa:	481f      	ldr	r0, [pc, #124]	; (8000678 <MX_GPIO_Init+0x1a4>)
 80005fc:	f000 fdc6 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	4819      	ldr	r0, [pc, #100]	; (800067c <MX_GPIO_Init+0x1a8>)
 8000618:	f000 fdb8 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800061c:	2301      	movs	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000620:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4814      	ldr	r0, [pc, #80]	; (8000684 <MX_GPIO_Init+0x1b0>)
 8000632:	f000 fdab 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000636:	f24f 0310 	movw	r3, #61456	; 0xf010
 800063a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	480c      	ldr	r0, [pc, #48]	; (8000680 <MX_GPIO_Init+0x1ac>)
 8000650:	f000 fd9c 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000654:	2320      	movs	r3, #32
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <MX_GPIO_Init+0x1ac>)
 8000668:	f000 fd90 	bl	800118c <HAL_GPIO_Init>

}
 800066c:	bf00      	nop
 800066e:	3730      	adds	r7, #48	; 0x30
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40021000 	.word	0x40021000
 800067c:	40020800 	.word	0x40020800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	40020000 	.word	0x40020000

08000688 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2C1_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c6:	f002 fb3b 	bl	8002d40 <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 fa62 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000098 	.word	0x20000098
 80006dc:	40005400 	.word	0x40005400
 80006e0:	000186a0 	.word	0x000186a0

080006e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <HAL_I2C_MspInit+0x84>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d12c      	bne.n	8000760 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_I2C_MspInit+0x88>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000722:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000728:	2312      	movs	r3, #18
 800072a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072c:	2301      	movs	r3, #1
 800072e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000734:	2304      	movs	r3, #4
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <HAL_I2C_MspInit+0x8c>)
 8000740:	f000 fd24 	bl	800118c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_I2C_MspInit+0x88>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_I2C_MspInit+0x88>)
 800074e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40005400 	.word	0x40005400
 800076c:	40023800 	.word	0x40023800
 8000770:	40020400 	.word	0x40020400

08000774 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2S2_Init+0x50>)
 800077a:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <MX_I2S2_Init+0x54>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2S2_Init+0x50>)
 8000780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000784:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2S2_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_I2S2_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_I2S2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2S2_Init+0x50>)
 800079a:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <MX_I2S2_Init+0x58>)
 800079c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_I2S2_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_I2S2_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_I2S2_Init+0x50>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_I2S2_Init+0x50>)
 80007b2:	f002 fc09 	bl	8002fc8 <HAL_I2S_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 f9ec 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000ec 	.word	0x200000ec
 80007c8:	40003800 	.word	0x40003800
 80007cc:	00017700 	.word	0x00017700

080007d0 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_I2S3_Init+0x54>)
 80007d6:	4a14      	ldr	r2, [pc, #80]	; (8000828 <MX_I2S3_Init+0x58>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_I2S3_Init+0x54>)
 80007dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_I2S3_Init+0x54>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_I2S3_Init+0x54>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_I2S3_Init+0x54>)
 80007f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_I2S3_Init+0x54>)
 80007f8:	4a0c      	ldr	r2, [pc, #48]	; (800082c <MX_I2S3_Init+0x5c>)
 80007fa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_I2S3_Init+0x54>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_I2S3_Init+0x54>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_I2S3_Init+0x54>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_I2S3_Init+0x54>)
 8000810:	f002 fbda 	bl	8002fc8 <HAL_I2S_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800081a:	f000 f9bd 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000134 	.word	0x20000134
 8000828:	40003c00 	.word	0x40003c00
 800082c:	00017700 	.word	0x00017700

08000830 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a59      	ldr	r2, [pc, #356]	; (80009b4 <HAL_I2S_MspInit+0x184>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d15b      	bne.n	800090a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
 8000856:	4b58      	ldr	r3, [pc, #352]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a57      	ldr	r2, [pc, #348]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b55      	ldr	r3, [pc, #340]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086a:	623b      	str	r3, [r7, #32]
 800086c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	4b51      	ldr	r3, [pc, #324]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a50      	ldr	r2, [pc, #320]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b4e      	ldr	r3, [pc, #312]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	61fb      	str	r3, [r7, #28]
 8000888:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	4b4a      	ldr	r3, [pc, #296]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a49      	ldr	r2, [pc, #292]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b47      	ldr	r3, [pc, #284]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008a6:	2304      	movs	r3, #4
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80008b6:	2306      	movs	r3, #6
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	4619      	mov	r1, r3
 80008c0:	483e      	ldr	r0, [pc, #248]	; (80009bc <HAL_I2S_MspInit+0x18c>)
 80008c2:	f000 fc63 	bl	800118c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008c6:	2308      	movs	r3, #8
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4836      	ldr	r0, [pc, #216]	; (80009bc <HAL_I2S_MspInit+0x18c>)
 80008e2:	f000 fc53 	bl	800118c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f8:	2305      	movs	r3, #5
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000900:	4619      	mov	r1, r3
 8000902:	482f      	ldr	r0, [pc, #188]	; (80009c0 <HAL_I2S_MspInit+0x190>)
 8000904:	f000 fc42 	bl	800118c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000908:	e04f      	b.n	80009aa <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a2d      	ldr	r2, [pc, #180]	; (80009c4 <HAL_I2S_MspInit+0x194>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d14a      	bne.n	80009aa <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a26      	ldr	r2, [pc, #152]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 800091e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	4a1f      	ldr	r2, [pc, #124]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6313      	str	r3, [r2, #48]	; 0x30
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	6313      	str	r3, [r2, #48]	; 0x30
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <HAL_I2S_MspInit+0x188>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000968:	2310      	movs	r3, #16
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000978:	2306      	movs	r3, #6
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4619      	mov	r1, r3
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <HAL_I2S_MspInit+0x198>)
 8000984:	f000 fc02 	bl	800118c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000988:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800099a:	2306      	movs	r3, #6
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <HAL_I2S_MspInit+0x18c>)
 80009a6:	f000 fbf1 	bl	800118c <HAL_GPIO_Init>
}
 80009aa:	bf00      	nop
 80009ac:	3738      	adds	r7, #56	; 0x38
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40003800 	.word	0x40003800
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40003c00 	.word	0x40003c00
 80009c8:	40020000 	.word	0x40020000

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f000 fa33 	bl	8000e3c <HAL_Init>

  /* USER CODE BEGIN Init */
  int state = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f855 	bl	8000a88 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009de:	f000 f8bb 	bl	8000b58 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e2:	f7ff fd77 	bl	80004d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009e6:	f7ff fe4f 	bl	8000688 <MX_I2C1_Init>
  MX_I2S2_Init();
 80009ea:	f7ff fec3 	bl	8000774 <MX_I2S2_Init>
  MX_I2S3_Init();
 80009ee:	f7ff feef 	bl	80007d0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009f2:	f000 f8d7 	bl	8000ba4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009f6:	f006 fdb9 	bl	800756c <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009fa:	f006 fddd 	bl	80075b8 <MX_USB_HOST_Process>
    HAL_Delay(100);
    HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
    HAL_Delay(100);*/

      //Ejercicio 3
   if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET && state == 0){
 80009fe:	2101      	movs	r1, #1
 8000a00:	481f      	ldr	r0, [pc, #124]	; (8000a80 <main+0xb4>)
 8000a02:	f000 fd47 	bl	8001494 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d105      	bne.n	8000a18 <main+0x4c>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d102      	bne.n	8000a18 <main+0x4c>
	  state = 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	e00b      	b.n	8000a30 <main+0x64>
   } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET && state == 1){
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4819      	ldr	r0, [pc, #100]	; (8000a80 <main+0xb4>)
 8000a1c:	f000 fd3a 	bl	8001494 <HAL_GPIO_ReadPin>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d104      	bne.n	8000a30 <main+0x64>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d101      	bne.n	8000a30 <main+0x64>
	  state = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]

   }

   if(state == 0){
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d110      	bne.n	8000a58 <main+0x8c>
	  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3a:	4812      	ldr	r0, [pc, #72]	; (8000a84 <main+0xb8>)
 8000a3c:	f000 fd5b 	bl	80014f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000a40:	20c8      	movs	r0, #200	; 0xc8
 8000a42:	f000 fa6d 	bl	8000f20 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4a:	480e      	ldr	r0, [pc, #56]	; (8000a84 <main+0xb8>)
 8000a4c:	f000 fd53 	bl	80014f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000a50:	20c8      	movs	r0, #200	; 0xc8
 8000a52:	f000 fa65 	bl	8000f20 <HAL_Delay>
 8000a56:	e7d0      	b.n	80009fa <main+0x2e>
   } else if (state == 1){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d1cd      	bne.n	80009fa <main+0x2e>
	  HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000a5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a62:	4808      	ldr	r0, [pc, #32]	; (8000a84 <main+0xb8>)
 8000a64:	f000 fd47 	bl	80014f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000a68:	20c8      	movs	r0, #200	; 0xc8
 8000a6a:	f000 fa59 	bl	8000f20 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000a6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a72:	4804      	ldr	r0, [pc, #16]	; (8000a84 <main+0xb8>)
 8000a74:	f000 fd3f 	bl	80014f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000a78:	20c8      	movs	r0, #200	; 0xc8
 8000a7a:	f000 fa51 	bl	8000f20 <HAL_Delay>
    MX_USB_HOST_Process();
 8000a7e:	e7bc      	b.n	80009fa <main+0x2e>
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40020c00 	.word	0x40020c00

08000a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b094      	sub	sp, #80	; 0x50
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	f107 0320 	add.w	r3, r7, #32
 8000a92:	2230      	movs	r2, #48	; 0x30
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f007 f92c 	bl	8007cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <SystemClock_Config+0xc8>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a26      	ldr	r2, [pc, #152]	; (8000b50 <SystemClock_Config+0xc8>)
 8000ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <SystemClock_Config+0xc8>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <SystemClock_Config+0xcc>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <SystemClock_Config+0xcc>)
 8000ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <SystemClock_Config+0xcc>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aee:	2302      	movs	r3, #2
 8000af0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000af8:	2304      	movs	r3, #4
 8000afa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000afc:	23c0      	movs	r3, #192	; 0xc0
 8000afe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b00:	2304      	movs	r3, #4
 8000b02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b04:	2308      	movs	r3, #8
 8000b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 fefb 	bl	8003908 <HAL_RCC_OscConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b18:	f000 f83e 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b20:	2302      	movs	r3, #2
 8000b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	2103      	movs	r1, #3
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 f95d 	bl	8003df8 <HAL_RCC_ClockConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b44:	f000 f828 	bl	8000b98 <Error_Handler>
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3750      	adds	r7, #80	; 0x50
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40007000 	.word	0x40007000

08000b58 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000b72:	23c8      	movs	r3, #200	; 0xc8
 8000b74:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000b76:	2305      	movs	r3, #5
 8000b78:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 fb45 	bl	8004210 <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000b8c:	f000 f804 	bl	8000b98 <Error_Handler>
  }
}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000baa:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <MX_SPI1_Init+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bf0:	220a      	movs	r2, #10
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_SPI1_Init+0x64>)
 8000bf6:	f003 fc5b 	bl	80044b0 <HAL_SPI_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c00:	f7ff ffca 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000017c 	.word	0x2000017c
 8000c0c:	40013000 	.word	0x40013000

08000c10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_SPI_MspInit+0x84>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12b      	bne.n	8000c8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c6a:	23e0      	movs	r3, #224	; 0xe0
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_SPI_MspInit+0x8c>)
 8000c86:	f000 fa81 	bl	800118c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40013000 	.word	0x40013000
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x4c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cde:	2007      	movs	r0, #7
 8000ce0:	f000 fa12 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler+0x4>

08000d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3c:	f000 f8d0 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <OTG_FS_IRQHandler+0x10>)
 8000d4a:	f000 fe59 	bl	8001a00 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200005b8 	.word	0x200005b8

08000d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <_sbrk+0x5c>)
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <_sbrk+0x60>)
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <_sbrk+0x64>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <_sbrk+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d207      	bcs.n	8000d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d88:	f006 ffcc 	bl	8007d24 <__errno>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	220c      	movs	r2, #12
 8000d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d96:	e009      	b.n	8000dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <_sbrk+0x64>)
 8000da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20020000 	.word	0x20020000
 8000db8:	00000400 	.word	0x00000400
 8000dbc:	200001d4 	.word	0x200001d4
 8000dc0:	20000a08 	.word	0x20000a08

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ffd7 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f006 ff8b 	bl	8007d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fdd7 	bl	80009cc <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e2c:	08007e58 	.word	0x08007e58
  ldr r2, =_sbss
 8000e30:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e34:	20000a04 	.word	0x20000a04

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f94f 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f808 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff ff16 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f967 	bl	8001172 <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ebc:	f000 f92f 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	200001d8 	.word	0x200001d8

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	200001d8 	.word	0x200001d8

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_Delay+0x44>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffde 	bl	8000f08 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff29 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff3e 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff31 	bl	8000fcc <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e159      	b.n	800145c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8148 	bne.w	8001456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80a2 	beq.w	8001456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b57      	ldr	r3, [pc, #348]	; (8001474 <HAL_GPIO_Init+0x2e8>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a56      	ldr	r2, [pc, #344]	; (8001474 <HAL_GPIO_Init+0x2e8>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b54      	ldr	r3, [pc, #336]	; (8001474 <HAL_GPIO_Init+0x2e8>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a52      	ldr	r2, [pc, #328]	; (8001478 <HAL_GPIO_Init+0x2ec>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a49      	ldr	r2, [pc, #292]	; (800147c <HAL_GPIO_Init+0x2f0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d019      	beq.n	800138e <HAL_GPIO_Init+0x202>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a48      	ldr	r2, [pc, #288]	; (8001480 <HAL_GPIO_Init+0x2f4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x1fe>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a47      	ldr	r2, [pc, #284]	; (8001484 <HAL_GPIO_Init+0x2f8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x1fa>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a46      	ldr	r2, [pc, #280]	; (8001488 <HAL_GPIO_Init+0x2fc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x1f6>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a45      	ldr	r2, [pc, #276]	; (800148c <HAL_GPIO_Init+0x300>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x1f2>
 800137a:	2304      	movs	r3, #4
 800137c:	e008      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800137e:	2307      	movs	r3, #7
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001382:	2303      	movs	r3, #3
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138e:	2300      	movs	r3, #0
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a0:	4935      	ldr	r1, [pc, #212]	; (8001478 <HAL_GPIO_Init+0x2ec>)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ae:	4b38      	ldr	r3, [pc, #224]	; (8001490 <HAL_GPIO_Init+0x304>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d2:	4a2f      	ldr	r2, [pc, #188]	; (8001490 <HAL_GPIO_Init+0x304>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HAL_GPIO_Init+0x304>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013fc:	4a24      	ldr	r2, [pc, #144]	; (8001490 <HAL_GPIO_Init+0x304>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <HAL_GPIO_Init+0x304>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001426:	4a1a      	ldr	r2, [pc, #104]	; (8001490 <HAL_GPIO_Init+0x304>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_GPIO_Init+0x304>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001450:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <HAL_GPIO_Init+0x304>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	f67f aea2 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014ac:	2301      	movs	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	e001      	b.n	80014b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
 80014d0:	4613      	mov	r3, r2
 80014d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e0:	e003      	b.n	80014ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	041a      	lsls	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b085      	sub	sp, #20
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001508:	887a      	ldrh	r2, [r7, #2]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4013      	ands	r3, r2
 800150e:	041a      	lsls	r2, r3, #16
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43d9      	mvns	r1, r3
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	400b      	ands	r3, r1
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	619a      	str	r2, [r3, #24]
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800152a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152c:	b08f      	sub	sp, #60	; 0x3c
 800152e:	af0a      	add	r7, sp, #40	; 0x28
 8001530:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e054      	b.n	80015e6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d106      	bne.n	800155c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f006 f866 	bl	8007628 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2203      	movs	r2, #3
 8001560:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f003 f893 	bl	80046a6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	687e      	ldr	r6, [r7, #4]
 8001588:	466d      	mov	r5, sp
 800158a:	f106 0410 	add.w	r4, r6, #16
 800158e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001596:	e894 0003 	ldmia.w	r4, {r0, r1}
 800159a:	e885 0003 	stmia.w	r5, {r0, r1}
 800159e:	1d33      	adds	r3, r6, #4
 80015a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a2:	6838      	ldr	r0, [r7, #0]
 80015a4:	f003 f80d 	bl	80045c2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 f88a 	bl	80046c8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	687e      	ldr	r6, [r7, #4]
 80015bc:	466d      	mov	r5, sp
 80015be:	f106 0410 	add.w	r4, r6, #16
 80015c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80015d2:	1d33      	adds	r3, r6, #4
 80015d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	f003 fa12 	bl	8004a00 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015ee <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015ee:	b590      	push	{r4, r7, lr}
 80015f0:	b089      	sub	sp, #36	; 0x24
 80015f2:	af04      	add	r7, sp, #16
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	4608      	mov	r0, r1
 80015f8:	4611      	mov	r1, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	70fb      	strb	r3, [r7, #3]
 8001600:	460b      	mov	r3, r1
 8001602:	70bb      	strb	r3, [r7, #2]
 8001604:	4613      	mov	r3, r2
 8001606:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_HCD_HC_Init+0x28>
 8001612:	2302      	movs	r3, #2
 8001614:	e076      	b.n	8001704 <HAL_HCD_HC_Init+0x116>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	212c      	movs	r1, #44	; 0x2c
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	4413      	add	r3, r2
 800162a:	333d      	adds	r3, #61	; 0x3d
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	212c      	movs	r1, #44	; 0x2c
 8001636:	fb01 f303 	mul.w	r3, r1, r3
 800163a:	4413      	add	r3, r2
 800163c:	3338      	adds	r3, #56	; 0x38
 800163e:	787a      	ldrb	r2, [r7, #1]
 8001640:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	212c      	movs	r1, #44	; 0x2c
 8001648:	fb01 f303 	mul.w	r3, r1, r3
 800164c:	4413      	add	r3, r2
 800164e:	3340      	adds	r3, #64	; 0x40
 8001650:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001652:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	212c      	movs	r1, #44	; 0x2c
 800165a:	fb01 f303 	mul.w	r3, r1, r3
 800165e:	4413      	add	r3, r2
 8001660:	3339      	adds	r3, #57	; 0x39
 8001662:	78fa      	ldrb	r2, [r7, #3]
 8001664:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	212c      	movs	r1, #44	; 0x2c
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	4413      	add	r3, r2
 8001672:	333f      	adds	r3, #63	; 0x3f
 8001674:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001678:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	78ba      	ldrb	r2, [r7, #2]
 800167e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001682:	b2d0      	uxtb	r0, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	212c      	movs	r1, #44	; 0x2c
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	4413      	add	r3, r2
 800168e:	333a      	adds	r3, #58	; 0x3a
 8001690:	4602      	mov	r2, r0
 8001692:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001694:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001698:	2b00      	cmp	r3, #0
 800169a:	da09      	bge.n	80016b0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	212c      	movs	r1, #44	; 0x2c
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	333b      	adds	r3, #59	; 0x3b
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	e008      	b.n	80016c2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	212c      	movs	r1, #44	; 0x2c
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	333b      	adds	r3, #59	; 0x3b
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	212c      	movs	r1, #44	; 0x2c
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	333c      	adds	r3, #60	; 0x3c
 80016d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016d4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	787c      	ldrb	r4, [r7, #1]
 80016dc:	78ba      	ldrb	r2, [r7, #2]
 80016de:	78f9      	ldrb	r1, [r7, #3]
 80016e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	4623      	mov	r3, r4
 80016f2:	f003 fb0b 	bl	8004d0c <USB_HC_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bd90      	pop	{r4, r7, pc}

0800170c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_HCD_HC_Halt+0x1e>
 8001726:	2302      	movs	r3, #2
 8001728:	e00f      	b.n	800174a <HAL_HCD_HC_Halt+0x3e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fd5b 	bl	80051f6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4603      	mov	r3, r0
 8001764:	70fb      	strb	r3, [r7, #3]
 8001766:	460b      	mov	r3, r1
 8001768:	70bb      	strb	r3, [r7, #2]
 800176a:	4613      	mov	r3, r2
 800176c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	212c      	movs	r1, #44	; 0x2c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	333b      	adds	r3, #59	; 0x3b
 800177c:	78ba      	ldrb	r2, [r7, #2]
 800177e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	212c      	movs	r1, #44	; 0x2c
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	333f      	adds	r3, #63	; 0x3f
 800178e:	787a      	ldrb	r2, [r7, #1]
 8001790:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001792:	7c3b      	ldrb	r3, [r7, #16]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d112      	bne.n	80017be <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	212c      	movs	r1, #44	; 0x2c
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	3342      	adds	r3, #66	; 0x42
 80017a6:	2203      	movs	r2, #3
 80017a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	212c      	movs	r1, #44	; 0x2c
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	333d      	adds	r3, #61	; 0x3d
 80017b8:	7f3a      	ldrb	r2, [r7, #28]
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e008      	b.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	3342      	adds	r3, #66	; 0x42
 80017cc:	2202      	movs	r2, #2
 80017ce:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	f200 80c6 	bhi.w	8001964 <HAL_HCD_HC_SubmitRequest+0x210>
 80017d8:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017de:	bf00      	nop
 80017e0:	080017f1 	.word	0x080017f1
 80017e4:	08001951 	.word	0x08001951
 80017e8:	08001855 	.word	0x08001855
 80017ec:	080018d3 	.word	0x080018d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017f0:	7c3b      	ldrb	r3, [r7, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	f040 80b8 	bne.w	8001968 <HAL_HCD_HC_SubmitRequest+0x214>
 80017f8:	78bb      	ldrb	r3, [r7, #2]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 80b4 	bne.w	8001968 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001800:	8b3b      	ldrh	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d108      	bne.n	8001818 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	212c      	movs	r1, #44	; 0x2c
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	4413      	add	r3, r2
 8001812:	3355      	adds	r3, #85	; 0x55
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	212c      	movs	r1, #44	; 0x2c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	3355      	adds	r3, #85	; 0x55
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3342      	adds	r3, #66	; 0x42
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800183e:	e093      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3342      	adds	r3, #66	; 0x42
 800184e:	2202      	movs	r2, #2
 8001850:	701a      	strb	r2, [r3, #0]
      break;
 8001852:	e089      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001854:	78bb      	ldrb	r3, [r7, #2]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d11d      	bne.n	8001896 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3355      	adds	r3, #85	; 0x55
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	212c      	movs	r1, #44	; 0x2c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	3342      	adds	r3, #66	; 0x42
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001880:	e073      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	212c      	movs	r1, #44	; 0x2c
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	3342      	adds	r3, #66	; 0x42
 8001890:	2202      	movs	r2, #2
 8001892:	701a      	strb	r2, [r3, #0]
      break;
 8001894:	e069      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	212c      	movs	r1, #44	; 0x2c
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	3354      	adds	r3, #84	; 0x54
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	3342      	adds	r3, #66	; 0x42
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
      break;
 80018bc:	e055      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	; 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	3342      	adds	r3, #66	; 0x42
 80018cc:	2202      	movs	r2, #2
 80018ce:	701a      	strb	r2, [r3, #0]
      break;
 80018d0:	e04b      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018d2:	78bb      	ldrb	r3, [r7, #2]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d11d      	bne.n	8001914 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3355      	adds	r3, #85	; 0x55
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	3342      	adds	r3, #66	; 0x42
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018fe:	e034      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	3342      	adds	r3, #66	; 0x42
 800190e:	2202      	movs	r2, #2
 8001910:	701a      	strb	r2, [r3, #0]
      break;
 8001912:	e02a      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	212c      	movs	r1, #44	; 0x2c
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	3354      	adds	r3, #84	; 0x54
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3342      	adds	r3, #66	; 0x42
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
      break;
 800193a:	e016      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3342      	adds	r3, #66	; 0x42
 800194a:	2202      	movs	r2, #2
 800194c:	701a      	strb	r2, [r3, #0]
      break;
 800194e:	e00c      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3342      	adds	r3, #66	; 0x42
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
      break;
 8001962:	e002      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001964:	bf00      	nop
 8001966:	e000      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001968:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	212c      	movs	r1, #44	; 0x2c
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	3344      	adds	r3, #68	; 0x44
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	8b3a      	ldrh	r2, [r7, #24]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	202c      	movs	r0, #44	; 0x2c
 8001984:	fb00 f303 	mul.w	r3, r0, r3
 8001988:	440b      	add	r3, r1
 800198a:	334c      	adds	r3, #76	; 0x4c
 800198c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	3360      	adds	r3, #96	; 0x60
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3350      	adds	r3, #80	; 0x50
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	3339      	adds	r3, #57	; 0x39
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	212c      	movs	r1, #44	; 0x2c
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	3361      	adds	r3, #97	; 0x61
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	222c      	movs	r2, #44	; 0x2c
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	3338      	adds	r3, #56	; 0x38
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	18d1      	adds	r1, r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	f003 faae 	bl	8004f50 <USB_HC_StartXfer>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop

08001a00 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 ffaf 	bl	800497a <USB_GetMode>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	f040 80f6 	bne.w	8001c10 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 ff93 	bl	8004954 <USB_ReadInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80ec 	beq.w	8001c0e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 ff8a 	bl	8004954 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a4a:	d104      	bne.n	8001a56 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 ff7a 	bl	8004954 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a6a:	d104      	bne.n	8001a76 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 ff6a 	bl	8004954 <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a8a:	d104      	bne.n	8001a96 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 ff5a 	bl	8004954 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d103      	bne.n	8001ab2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 ff4c 	bl	8004954 <USB_ReadInterrupts>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ac6:	d11c      	bne.n	8001b02 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ad0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10f      	bne.n	8001b02 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ae2:	2110      	movs	r1, #16
 8001ae4:	6938      	ldr	r0, [r7, #16]
 8001ae6:	f002 fe3b 	bl	8004760 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001aea:	6938      	ldr	r0, [r7, #16]
 8001aec:	f002 fe6c 	bl	80047c8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2101      	movs	r1, #1
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 f842 	bl	8004b80 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f005 fe11 	bl	8007724 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 ff24 	bl	8004954 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b16:	d102      	bne.n	8001b1e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f001 f89e 	bl	8002c5a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 ff16 	bl	8004954 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d106      	bne.n	8001b40 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f005 fdda 	bl	80076ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f002 ff05 	bl	8004954 <USB_ReadInterrupts>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d101      	bne.n	8001b58 <HAL_HCD_IRQHandler+0x158>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_HCD_IRQHandler+0x15a>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d012      	beq.n	8001b84 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0210 	bic.w	r2, r2, #16
 8001b6c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 ffa1 	bl	8002ab6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0210 	orr.w	r2, r2, #16
 8001b82:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f002 fee3 	bl	8004954 <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b98:	d13a      	bne.n	8001c10 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fb18 	bl	80051d4 <USB_HC_ReadInterrupt>
 8001ba4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e025      	b.n	8001bf8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d018      	beq.n	8001bf2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	015a      	lsls	r2, r3, #5
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd6:	d106      	bne.n	8001be6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8ab 	bl	8001d3a <HCD_HC_IN_IRQHandler>
 8001be4:	e005      	b.n	8001bf2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	4619      	mov	r1, r3
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fbf9 	bl	80023e4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d3d4      	bcc.n	8001bac <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0a:	615a      	str	r2, [r3, #20]
 8001c0c:	e000      	b.n	8001c10 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c0e:	bf00      	nop
    }
  }
}
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_HCD_Start+0x16>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e013      	b.n	8001c54 <HAL_HCD_Start+0x3e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 f804 	bl	8004c48 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 fd1d 	bl	8004684 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_HCD_Stop+0x16>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e00d      	b.n	8001c8e <HAL_HCD_Stop+0x32>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 fbf2 	bl	8005468 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f002 ffa6 	bl	8004bf4 <USB_ResetPort>
 8001ca8:	4603      	mov	r3, r0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	212c      	movs	r1, #44	; 0x2c
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3360      	adds	r3, #96	; 0x60
 8001ccc:	781b      	ldrb	r3, [r3, #0]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	212c      	movs	r1, #44	; 0x2c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3350      	adds	r3, #80	; 0x50
 8001cf4:	681b      	ldr	r3, [r3, #0]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 ffea 	bl	8004ce8 <USB_GetCurrentFrame>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 ffc5 	bl	8004cba <USB_GetHostSpeed>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d11a      	bne.n	8001da0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	461a      	mov	r2, r3
 8001d78:	2304      	movs	r3, #4
 8001d7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	212c      	movs	r1, #44	; 0x2c
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	3361      	adds	r3, #97	; 0x61
 8001d8a:	2206      	movs	r2, #6
 8001d8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 fa2c 	bl	80051f6 <USB_HC_Halt>
 8001d9e:	e0af      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db6:	d11b      	bne.n	8001df0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	212c      	movs	r1, #44	; 0x2c
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3361      	adds	r3, #97	; 0x61
 8001dda:	2207      	movs	r2, #7
 8001ddc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fa04 	bl	80051f6 <USB_HC_Halt>
 8001dee:	e087      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	d109      	bne.n	8001e1a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	461a      	mov	r2, r3
 8001e14:	2320      	movs	r3, #32
 8001e16:	6093      	str	r3, [r2, #8]
 8001e18:	e072      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d11a      	bne.n	8001e66 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2308      	movs	r3, #8
 8001e40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	212c      	movs	r1, #44	; 0x2c
 8001e48:	fb01 f303 	mul.w	r3, r1, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3361      	adds	r3, #97	; 0x61
 8001e50:	2205      	movs	r2, #5
 8001e52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 f9c9 	bl	80051f6 <USB_HC_Halt>
 8001e64:	e04c      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7c:	d11b      	bne.n	8001eb6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	212c      	movs	r1, #44	; 0x2c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3361      	adds	r3, #97	; 0x61
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 f9a1 	bl	80051f6 <USB_HC_Halt>
 8001eb4:	e024      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b80      	cmp	r3, #128	; 0x80
 8001eca:	d119      	bne.n	8001f00 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	015a      	lsls	r2, r3, #5
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	212c      	movs	r1, #44	; 0x2c
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	3361      	adds	r3, #97	; 0x61
 8001eec:	2206      	movs	r2, #6
 8001eee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 f97b 	bl	80051f6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f16:	d112      	bne.n	8001f3e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 f967 	bl	80051f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	461a      	mov	r2, r3
 8001f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f3a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f3c:	e24e      	b.n	80023dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	f040 80df 	bne.w	8002114 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d019      	beq.n	8001f92 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	212c      	movs	r1, #44	; 0x2c
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	3348      	adds	r3, #72	; 0x48
 8001f6c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	0159      	lsls	r1, r3, #5
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	440b      	add	r3, r1
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f80:	1ad2      	subs	r2, r2, r3
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	202c      	movs	r0, #44	; 0x2c
 8001f88:	fb00 f303 	mul.w	r3, r0, r3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3350      	adds	r3, #80	; 0x50
 8001f90:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3361      	adds	r3, #97	; 0x61
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	212c      	movs	r1, #44	; 0x2c
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	335c      	adds	r3, #92	; 0x5c
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	333f      	adds	r3, #63	; 0x3f
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	333f      	adds	r3, #63	; 0x3f
 8001fea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d111      	bne.n	8002014 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 f8fb 	bl	80051f6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	461a      	mov	r2, r3
 800200e:	2310      	movs	r3, #16
 8002010:	6093      	str	r3, [r2, #8]
 8002012:	e03a      	b.n	800208a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	333f      	adds	r3, #63	; 0x3f
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d009      	beq.n	800203c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	333f      	adds	r3, #63	; 0x3f
 8002036:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002038:	2b01      	cmp	r3, #1
 800203a:	d126      	bne.n	800208a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	0151      	lsls	r1, r2, #5
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	440a      	add	r2, r1
 8002052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002056:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800205a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	3360      	adds	r3, #96	; 0x60
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	b2d9      	uxtb	r1, r3
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	202c      	movs	r0, #44	; 0x2c
 8002078:	fb00 f303 	mul.w	r3, r0, r3
 800207c:	4413      	add	r3, r2
 800207e:	3360      	adds	r3, #96	; 0x60
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f005 fb5b 	bl	8007740 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d12b      	bne.n	80020ea <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3348      	adds	r3, #72	; 0x48
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	202c      	movs	r0, #44	; 0x2c
 80020a8:	fb00 f202 	mul.w	r2, r0, r2
 80020ac:	440a      	add	r2, r1
 80020ae:	3240      	adds	r2, #64	; 0x40
 80020b0:	8812      	ldrh	r2, [r2, #0]
 80020b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 818e 	beq.w	80023dc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3354      	adds	r3, #84	; 0x54
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	f083 0301 	eor.w	r3, r3, #1
 80020d4:	b2d8      	uxtb	r0, r3
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3354      	adds	r3, #84	; 0x54
 80020e4:	4602      	mov	r2, r0
 80020e6:	701a      	strb	r2, [r3, #0]
}
 80020e8:	e178      	b.n	80023dc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3354      	adds	r3, #84	; 0x54
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f083 0301 	eor.w	r3, r3, #1
 80020fe:	b2d8      	uxtb	r0, r3
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	212c      	movs	r1, #44	; 0x2c
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	3354      	adds	r3, #84	; 0x54
 800210e:	4602      	mov	r2, r0
 8002110:	701a      	strb	r2, [r3, #0]
}
 8002112:	e163      	b.n	80023dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b02      	cmp	r3, #2
 8002128:	f040 80f6 	bne.w	8002318 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	212c      	movs	r1, #44	; 0x2c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	3361      	adds	r3, #97	; 0x61
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d109      	bne.n	8002154 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3360      	adds	r3, #96	; 0x60
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e0c9      	b.n	80022e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	3361      	adds	r3, #97	; 0x61
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d109      	bne.n	800217c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	212c      	movs	r1, #44	; 0x2c
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	3360      	adds	r3, #96	; 0x60
 8002176:	2205      	movs	r2, #5
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e0b5      	b.n	80022e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3361      	adds	r3, #97	; 0x61
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b06      	cmp	r3, #6
 800218e:	d009      	beq.n	80021a4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	3361      	adds	r3, #97	; 0x61
 800219e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d150      	bne.n	8002246 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	335c      	adds	r3, #92	; 0x5c
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	202c      	movs	r0, #44	; 0x2c
 80021bc:	fb00 f303 	mul.w	r3, r0, r3
 80021c0:	440b      	add	r3, r1
 80021c2:	335c      	adds	r3, #92	; 0x5c
 80021c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	335c      	adds	r3, #92	; 0x5c
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d912      	bls.n	8002200 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	335c      	adds	r3, #92	; 0x5c
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3360      	adds	r3, #96	; 0x60
 80021fa:	2204      	movs	r2, #4
 80021fc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021fe:	e073      	b.n	80022e8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3360      	adds	r3, #96	; 0x60
 800220e:	2202      	movs	r2, #2
 8002210:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002228:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002230:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002244:	e050      	b.n	80022e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	3361      	adds	r3, #97	; 0x61
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d122      	bne.n	80022a0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	3360      	adds	r3, #96	; 0x60
 8002268:	2202      	movs	r2, #2
 800226a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	015a      	lsls	r2, r3, #5
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4413      	add	r3, r2
 8002274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002282:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800228a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e023      	b.n	80022e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3361      	adds	r3, #97	; 0x61
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b07      	cmp	r3, #7
 80022b2:	d119      	bne.n	80022e8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	212c      	movs	r1, #44	; 0x2c
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	4413      	add	r3, r2
 80022c0:	335c      	adds	r3, #92	; 0x5c
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	202c      	movs	r0, #44	; 0x2c
 80022cc:	fb00 f303 	mul.w	r3, r0, r3
 80022d0:	440b      	add	r3, r1
 80022d2:	335c      	adds	r3, #92	; 0x5c
 80022d4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	212c      	movs	r1, #44	; 0x2c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	3360      	adds	r3, #96	; 0x60
 80022e4:	2204      	movs	r2, #4
 80022e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f4:	461a      	mov	r2, r3
 80022f6:	2302      	movs	r3, #2
 80022f8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	b2d9      	uxtb	r1, r3
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	202c      	movs	r0, #44	; 0x2c
 8002304:	fb00 f303 	mul.w	r3, r0, r3
 8002308:	4413      	add	r3, r2
 800230a:	3360      	adds	r3, #96	; 0x60
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f005 fa15 	bl	8007740 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002316:	e061      	b.n	80023dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b10      	cmp	r3, #16
 800232c:	d156      	bne.n	80023dc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	333f      	adds	r3, #63	; 0x3f
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d111      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	335c      	adds	r3, #92	; 0x5c
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f002 ff49 	bl	80051f6 <USB_HC_Halt>
 8002364:	e031      	b.n	80023ca <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	333f      	adds	r3, #63	; 0x3f
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	333f      	adds	r3, #63	; 0x3f
 8002388:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800238a:	2b02      	cmp	r3, #2
 800238c:	d11d      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	335c      	adds	r3, #92	; 0x5c
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d110      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3361      	adds	r3, #97	; 0x61
 80023b6:	2203      	movs	r2, #3
 80023b8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f002 ff16 	bl	80051f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	461a      	mov	r2, r3
 80023d8:	2310      	movs	r3, #16
 80023da:	6093      	str	r3, [r2, #8]
}
 80023dc:	bf00      	nop
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b04      	cmp	r3, #4
 8002412:	d11a      	bne.n	800244a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002420:	461a      	mov	r2, r3
 8002422:	2304      	movs	r3, #4
 8002424:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	3361      	adds	r3, #97	; 0x61
 8002434:	2206      	movs	r2, #6
 8002436:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f002 fed7 	bl	80051f6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002448:	e331      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b20      	cmp	r3, #32
 800245e:	d12e      	bne.n	80024be <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	461a      	mov	r2, r3
 800246e:	2320      	movs	r3, #32
 8002470:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	333d      	adds	r3, #61	; 0x3d
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	f040 8313 	bne.w	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	333d      	adds	r3, #61	; 0x3d
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3360      	adds	r3, #96	; 0x60
 80024a8:	2202      	movs	r2, #2
 80024aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f002 fe9d 	bl	80051f6 <USB_HC_Halt>
}
 80024bc:	e2f7      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d4:	d112      	bne.n	80024fc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	461a      	mov	r2, r3
 80024e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 fe7e 	bl	80051f6 <USB_HC_Halt>
}
 80024fa:	e2d8      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d140      	bne.n	8002594 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	335c      	adds	r3, #92	; 0x5c
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b40      	cmp	r3, #64	; 0x40
 8002538:	d111      	bne.n	800255e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	333d      	adds	r3, #61	; 0x3d
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	461a      	mov	r2, r3
 800255a:	2340      	movs	r3, #64	; 0x40
 800255c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4413      	add	r3, r2
 8002566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256a:	461a      	mov	r2, r3
 800256c:	2301      	movs	r3, #1
 800256e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	3361      	adds	r3, #97	; 0x61
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f002 fe32 	bl	80051f6 <USB_HC_Halt>
}
 8002592:	e28c      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d12c      	bne.n	8002604 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	3361      	adds	r3, #97	; 0x61
 80025b8:	2204      	movs	r2, #4
 80025ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	333d      	adds	r3, #61	; 0x3d
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	335c      	adds	r3, #92	; 0x5c
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fe03 	bl	80051f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	461a      	mov	r2, r3
 80025fe:	2340      	movs	r3, #64	; 0x40
 8002600:	6093      	str	r3, [r2, #8]
}
 8002602:	e254      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b08      	cmp	r3, #8
 8002618:	d11a      	bne.n	8002650 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	461a      	mov	r2, r3
 8002628:	2308      	movs	r3, #8
 800262a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	2205      	movs	r2, #5
 800263c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f002 fdd4 	bl	80051f6 <USB_HC_Halt>
}
 800264e:	e22e      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b10      	cmp	r3, #16
 8002664:	d140      	bne.n	80026e8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	335c      	adds	r3, #92	; 0x5c
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3361      	adds	r3, #97	; 0x61
 8002686:	2203      	movs	r2, #3
 8002688:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	333d      	adds	r3, #61	; 0x3d
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d112      	bne.n	80026c4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	333c      	adds	r3, #60	; 0x3c
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d108      	bne.n	80026c4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	333d      	adds	r3, #61	; 0x3d
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 fd91 	bl	80051f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	461a      	mov	r2, r3
 80026e2:	2310      	movs	r3, #16
 80026e4:	6093      	str	r3, [r2, #8]
}
 80026e6:	e1e2      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fa:	2b80      	cmp	r3, #128	; 0x80
 80026fc:	d164      	bne.n	80027c8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d111      	bne.n	800272a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	3361      	adds	r3, #97	; 0x61
 8002714:	2206      	movs	r2, #6
 8002716:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fd67 	bl	80051f6 <USB_HC_Halt>
 8002728:	e044      	b.n	80027b4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	335c      	adds	r3, #92	; 0x5c
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	202c      	movs	r0, #44	; 0x2c
 8002742:	fb00 f303 	mul.w	r3, r0, r3
 8002746:	440b      	add	r3, r1
 8002748:	335c      	adds	r3, #92	; 0x5c
 800274a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	335c      	adds	r3, #92	; 0x5c
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d920      	bls.n	80027a2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	335c      	adds	r3, #92	; 0x5c
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	3360      	adds	r3, #96	; 0x60
 8002780:	2204      	movs	r2, #4
 8002782:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	b2d9      	uxtb	r1, r3
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	202c      	movs	r0, #44	; 0x2c
 800278e:	fb00 f303 	mul.w	r3, r0, r3
 8002792:	4413      	add	r3, r2
 8002794:	3360      	adds	r3, #96	; 0x60
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f004 ffd0 	bl	8007740 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027a0:	e008      	b.n	80027b4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3360      	adds	r3, #96	; 0x60
 80027b0:	2202      	movs	r2, #2
 80027b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	461a      	mov	r2, r3
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	6093      	str	r3, [r2, #8]
}
 80027c6:	e172      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027de:	d11b      	bne.n	8002818 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	3361      	adds	r3, #97	; 0x61
 80027ee:	2208      	movs	r2, #8
 80027f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f002 fcfa 	bl	80051f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4413      	add	r3, r2
 800280a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280e:	461a      	mov	r2, r3
 8002810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002814:	6093      	str	r3, [r2, #8]
}
 8002816:	e14a      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b02      	cmp	r3, #2
 800282c:	f040 813f 	bne.w	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	3361      	adds	r3, #97	; 0x61
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d17d      	bne.n	8002940 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3360      	adds	r3, #96	; 0x60
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	333f      	adds	r3, #63	; 0x3f
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d00a      	beq.n	8002880 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	333f      	adds	r3, #63	; 0x3f
 8002878:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800287a:	2b03      	cmp	r3, #3
 800287c:	f040 8100 	bne.w	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d113      	bne.n	80028b0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3355      	adds	r3, #85	; 0x55
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	f083 0301 	eor.w	r3, r3, #1
 800289c:	b2d8      	uxtb	r0, r3
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3355      	adds	r3, #85	; 0x55
 80028ac:	4602      	mov	r2, r0
 80028ae:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	f040 80e3 	bne.w	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	334c      	adds	r3, #76	; 0x4c
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80d8 	beq.w	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	334c      	adds	r3, #76	; 0x4c
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	202c      	movs	r0, #44	; 0x2c
 80028e6:	fb00 f202 	mul.w	r2, r0, r2
 80028ea:	440a      	add	r2, r1
 80028ec:	3240      	adds	r2, #64	; 0x40
 80028ee:	8812      	ldrh	r2, [r2, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	202c      	movs	r0, #44	; 0x2c
 80028fa:	fb00 f202 	mul.w	r2, r0, r2
 80028fe:	440a      	add	r2, r1
 8002900:	3240      	adds	r2, #64	; 0x40
 8002902:	8812      	ldrh	r2, [r2, #0]
 8002904:	fbb3 f3f2 	udiv	r3, r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80b5 	beq.w	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3355      	adds	r3, #85	; 0x55
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	f083 0301 	eor.w	r3, r3, #1
 800292a:	b2d8      	uxtb	r0, r3
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3355      	adds	r3, #85	; 0x55
 800293a:	4602      	mov	r2, r0
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e09f      	b.n	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3361      	adds	r3, #97	; 0x61
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d109      	bne.n	8002968 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3360      	adds	r3, #96	; 0x60
 8002962:	2202      	movs	r2, #2
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e08b      	b.n	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3361      	adds	r3, #97	; 0x61
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d109      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3360      	adds	r3, #96	; 0x60
 800298a:	2202      	movs	r2, #2
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e077      	b.n	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3361      	adds	r3, #97	; 0x61
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d109      	bne.n	80029b8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3360      	adds	r3, #96	; 0x60
 80029b2:	2205      	movs	r2, #5
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e063      	b.n	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3361      	adds	r3, #97	; 0x61
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b06      	cmp	r3, #6
 80029ca:	d009      	beq.n	80029e0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3361      	adds	r3, #97	; 0x61
 80029da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d14f      	bne.n	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	335c      	adds	r3, #92	; 0x5c
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	202c      	movs	r0, #44	; 0x2c
 80029f8:	fb00 f303 	mul.w	r3, r0, r3
 80029fc:	440b      	add	r3, r1
 80029fe:	335c      	adds	r3, #92	; 0x5c
 8002a00:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	335c      	adds	r3, #92	; 0x5c
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d912      	bls.n	8002a3c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	335c      	adds	r3, #92	; 0x5c
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3360      	adds	r3, #96	; 0x60
 8002a36:	2204      	movs	r2, #4
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e021      	b.n	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3360      	adds	r3, #96	; 0x60
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a64:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a6c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2302      	movs	r3, #2
 8002a90:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	b2d9      	uxtb	r1, r3
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	202c      	movs	r0, #44	; 0x2c
 8002a9c:	fb00 f303 	mul.w	r3, r0, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3360      	adds	r3, #96	; 0x60
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f004 fe49 	bl	8007740 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002aae:	bf00      	nop
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b08a      	sub	sp, #40	; 0x28
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	0c5b      	lsrs	r3, r3, #17
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d004      	beq.n	8002afc <HCD_RXQLVL_IRQHandler+0x46>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	f000 80a9 	beq.w	8002c4c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002afa:	e0aa      	b.n	8002c52 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80a6 	beq.w	8002c50 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3344      	adds	r3, #68	; 0x44
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 809b 	beq.w	8002c50 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3350      	adds	r3, #80	; 0x50
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	441a      	add	r2, r3
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	202c      	movs	r0, #44	; 0x2c
 8002b34:	fb00 f303 	mul.w	r3, r0, r3
 8002b38:	440b      	add	r3, r1
 8002b3a:	334c      	adds	r3, #76	; 0x4c
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d87a      	bhi.n	8002c38 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3344      	adds	r3, #68	; 0x44
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	b292      	uxth	r2, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f001 fea2 	bl	80048a4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3344      	adds	r3, #68	; 0x44
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	441a      	add	r2, r3
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	202c      	movs	r0, #44	; 0x2c
 8002b7a:	fb00 f303 	mul.w	r3, r0, r3
 8002b7e:	440b      	add	r3, r1
 8002b80:	3344      	adds	r3, #68	; 0x44
 8002b82:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3350      	adds	r3, #80	; 0x50
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	441a      	add	r2, r3
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	202c      	movs	r0, #44	; 0x2c
 8002b9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3350      	adds	r3, #80	; 0x50
 8002ba6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	0cdb      	lsrs	r3, r3, #19
 8002bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bbc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3340      	adds	r3, #64	; 0x40
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d13c      	bne.n	8002c50 <HCD_RXQLVL_IRQHandler+0x19a>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d039      	beq.n	8002c50 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bf2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bfa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3354      	adds	r3, #84	; 0x54
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	f083 0301 	eor.w	r3, r3, #1
 8002c22:	b2d8      	uxtb	r0, r3
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3354      	adds	r3, #84	; 0x54
 8002c32:	4602      	mov	r2, r0
 8002c34:	701a      	strb	r2, [r3, #0]
      break;
 8002c36:	e00b      	b.n	8002c50 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	212c      	movs	r1, #44	; 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3360      	adds	r3, #96	; 0x60
 8002c46:	2204      	movs	r2, #4
 8002c48:	701a      	strb	r2, [r3, #0]
      break;
 8002c4a:	e001      	b.n	8002c50 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c4c:	bf00      	nop
 8002c4e:	e000      	b.n	8002c52 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c50:	bf00      	nop
  }
}
 8002c52:	bf00      	nop
 8002c54:	3728      	adds	r7, #40	; 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c86:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d10b      	bne.n	8002caa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d102      	bne.n	8002ca2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f004 fd33 	bl	8007708 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d132      	bne.n	8002d1a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f043 0308 	orr.w	r3, r3, #8
 8002cba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d126      	bne.n	8002d14 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d113      	bne.n	8002cf6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002cd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cd8:	d106      	bne.n	8002ce8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2102      	movs	r1, #2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f001 ff4d 	bl	8004b80 <USB_InitFSLSPClkSel>
 8002ce6:	e011      	b.n	8002d0c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2101      	movs	r1, #1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 ff46 	bl	8004b80 <USB_InitFSLSPClkSel>
 8002cf4:	e00a      	b.n	8002d0c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d106      	bne.n	8002d0c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d04:	461a      	mov	r2, r3
 8002d06:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d0a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f004 fd25 	bl	800775c <HAL_HCD_PortEnabled_Callback>
 8002d12:	e002      	b.n	8002d1a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f004 fd2f 	bl	8007778 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d103      	bne.n	8002d2c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f043 0320 	orr.w	r3, r3, #32
 8002d2a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d32:	461a      	mov	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	6013      	str	r3, [r2, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e12b      	b.n	8002faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fd fcbc 	bl	80006e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	; 0x24
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002da4:	f001 fa20 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 8002da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4a81      	ldr	r2, [pc, #516]	; (8002fb4 <HAL_I2C_Init+0x274>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d807      	bhi.n	8002dc4 <HAL_I2C_Init+0x84>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a80      	ldr	r2, [pc, #512]	; (8002fb8 <HAL_I2C_Init+0x278>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e006      	b.n	8002dd2 <HAL_I2C_Init+0x92>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a7d      	ldr	r2, [pc, #500]	; (8002fbc <HAL_I2C_Init+0x27c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	bf94      	ite	ls
 8002dcc:	2301      	movls	r3, #1
 8002dce:	2300      	movhi	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0e7      	b.n	8002faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a78      	ldr	r2, [pc, #480]	; (8002fc0 <HAL_I2C_Init+0x280>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0c9b      	lsrs	r3, r3, #18
 8002de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a6a      	ldr	r2, [pc, #424]	; (8002fb4 <HAL_I2C_Init+0x274>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d802      	bhi.n	8002e14 <HAL_I2C_Init+0xd4>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3301      	adds	r3, #1
 8002e12:	e009      	b.n	8002e28 <HAL_I2C_Init+0xe8>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a69      	ldr	r2, [pc, #420]	; (8002fc4 <HAL_I2C_Init+0x284>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	3301      	adds	r3, #1
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	495c      	ldr	r1, [pc, #368]	; (8002fb4 <HAL_I2C_Init+0x274>)
 8002e44:	428b      	cmp	r3, r1
 8002e46:	d819      	bhi.n	8002e7c <HAL_I2C_Init+0x13c>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e59      	subs	r1, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e56:	1c59      	adds	r1, r3, #1
 8002e58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e5c:	400b      	ands	r3, r1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_I2C_Init+0x138>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e59      	subs	r1, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e76:	e051      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e04f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <HAL_I2C_Init+0x168>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	440b      	add	r3, r1
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e012      	b.n	8002ece <HAL_I2C_Init+0x18e>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	0099      	lsls	r1, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Init+0x196>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e022      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10e      	bne.n	8002efc <HAL_I2C_Init+0x1bc>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1e58      	subs	r0, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	440b      	add	r3, r1
 8002eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efa:	e00f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	0099      	lsls	r1, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	6809      	ldr	r1, [r1, #0]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6911      	ldr	r1, [r2, #16]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68d2      	ldr	r2, [r2, #12]
 8002f56:	4311      	orrs	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	000186a0 	.word	0x000186a0
 8002fb8:	001e847f 	.word	0x001e847f
 8002fbc:	003d08ff 	.word	0x003d08ff
 8002fc0:	431bde83 	.word	0x431bde83
 8002fc4:	10624dd3 	.word	0x10624dd3

08002fc8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e128      	b.n	800322c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a90      	ldr	r2, [pc, #576]	; (8003234 <HAL_I2S_Init+0x26c>)
 8002ff2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fd fc1b 	bl	8000830 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003010:	f023 030f 	bic.w	r3, r3, #15
 8003014:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2202      	movs	r2, #2
 800301c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d060      	beq.n	80030e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800302e:	2310      	movs	r3, #16
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	e001      	b.n	8003038 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003034:	2320      	movs	r3, #32
 8003036:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b20      	cmp	r3, #32
 800303e:	d802      	bhi.n	8003046 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003046:	2001      	movs	r0, #1
 8003048:	f001 f9d2 	bl	80043f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800304c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003056:	d125      	bne.n	80030a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d010      	beq.n	8003082 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	fbb2 f2f3 	udiv	r2, r2, r3
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	461a      	mov	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	3305      	adds	r3, #5
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	e01f      	b.n	80030c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	fbb2 f2f3 	udiv	r2, r2, r3
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	461a      	mov	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	3305      	adds	r3, #5
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	e00e      	b.n	80030c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	461a      	mov	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	3305      	adds	r3, #5
 80030c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4a5c      	ldr	r2, [pc, #368]	; (8003238 <HAL_I2S_Init+0x270>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	08db      	lsrs	r3, r3, #3
 80030cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	e003      	b.n	80030f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80030e8:	2302      	movs	r3, #2
 80030ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d902      	bls.n	80030fc <HAL_I2S_Init+0x134>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	2bff      	cmp	r3, #255	; 0xff
 80030fa:	d907      	bls.n	800310c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	f043 0210 	orr.w	r2, r3, #16
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e08f      	b.n	800322c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	ea42 0103 	orr.w	r1, r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	430a      	orrs	r2, r1
 800311e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800312a:	f023 030f 	bic.w	r3, r3, #15
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6851      	ldr	r1, [r2, #4]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6892      	ldr	r2, [r2, #8]
 8003136:	4311      	orrs	r1, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	68d2      	ldr	r2, [r2, #12]
 800313c:	4311      	orrs	r1, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6992      	ldr	r2, [r2, #24]
 8003142:	430a      	orrs	r2, r1
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800314e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d161      	bne.n	800321c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a38      	ldr	r2, [pc, #224]	; (800323c <HAL_I2S_Init+0x274>)
 800315c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a37      	ldr	r2, [pc, #220]	; (8003240 <HAL_I2S_Init+0x278>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d101      	bne.n	800316c <HAL_I2S_Init+0x1a4>
 8003168:	4b36      	ldr	r3, [pc, #216]	; (8003244 <HAL_I2S_Init+0x27c>)
 800316a:	e001      	b.n	8003170 <HAL_I2S_Init+0x1a8>
 800316c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	4932      	ldr	r1, [pc, #200]	; (8003240 <HAL_I2S_Init+0x278>)
 8003178:	428a      	cmp	r2, r1
 800317a:	d101      	bne.n	8003180 <HAL_I2S_Init+0x1b8>
 800317c:	4a31      	ldr	r2, [pc, #196]	; (8003244 <HAL_I2S_Init+0x27c>)
 800317e:	e001      	b.n	8003184 <HAL_I2S_Init+0x1bc>
 8003180:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003184:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003188:	f023 030f 	bic.w	r3, r3, #15
 800318c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2b      	ldr	r2, [pc, #172]	; (8003240 <HAL_I2S_Init+0x278>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <HAL_I2S_Init+0x1d4>
 8003198:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <HAL_I2S_Init+0x27c>)
 800319a:	e001      	b.n	80031a0 <HAL_I2S_Init+0x1d8>
 800319c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031a0:	2202      	movs	r2, #2
 80031a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a25      	ldr	r2, [pc, #148]	; (8003240 <HAL_I2S_Init+0x278>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d101      	bne.n	80031b2 <HAL_I2S_Init+0x1ea>
 80031ae:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_I2S_Init+0x27c>)
 80031b0:	e001      	b.n	80031b6 <HAL_I2S_Init+0x1ee>
 80031b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c2:	d003      	beq.n	80031cc <HAL_I2S_Init+0x204>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d103      	bne.n	80031d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80031cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	e001      	b.n	80031d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031ec:	4313      	orrs	r3, r2
 80031ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031f6:	4313      	orrs	r3, r2
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	897b      	ldrh	r3, [r7, #10]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003204:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <HAL_I2S_Init+0x278>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d101      	bne.n	8003214 <HAL_I2S_Init+0x24c>
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <HAL_I2S_Init+0x27c>)
 8003212:	e001      	b.n	8003218 <HAL_I2S_Init+0x250>
 8003214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003218:	897a      	ldrh	r2, [r7, #10]
 800321a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	0800333f 	.word	0x0800333f
 8003238:	cccccccd 	.word	0xcccccccd
 800323c:	08003455 	.word	0x08003455
 8003240:	40003800 	.word	0x40003800
 8003244:	40003400 	.word	0x40003400

08003248 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	881a      	ldrh	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	1c9a      	adds	r2, r3, #2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10e      	bne.n	80032d8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ffb8 	bl	8003248 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	b292      	uxth	r2, r2
 80032f4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	1c9a      	adds	r2, r3, #2
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10e      	bne.n	8003336 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003326:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff ff93 	bl	800325c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b04      	cmp	r3, #4
 8003358:	d13a      	bne.n	80033d0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d109      	bne.n	8003378 <I2S_IRQHandler+0x3a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336e:	2b40      	cmp	r3, #64	; 0x40
 8003370:	d102      	bne.n	8003378 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff ffb4 	bl	80032e0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337e:	2b40      	cmp	r3, #64	; 0x40
 8003380:	d126      	bne.n	80033d0 <I2S_IRQHandler+0x92>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d11f      	bne.n	80033d0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800339e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f043 0202 	orr.w	r2, r3, #2
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ff50 	bl	8003270 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d136      	bne.n	800344a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d109      	bne.n	80033fa <I2S_IRQHandler+0xbc>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	2b80      	cmp	r3, #128	; 0x80
 80033f2:	d102      	bne.n	80033fa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff45 	bl	8003284 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b08      	cmp	r3, #8
 8003402:	d122      	bne.n	800344a <I2S_IRQHandler+0x10c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b20      	cmp	r3, #32
 8003410:	d11b      	bne.n	800344a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003420:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	f043 0204 	orr.w	r2, r3, #4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff ff13 	bl	8003270 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800344a:	bf00      	nop
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a92      	ldr	r2, [pc, #584]	; (80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800346e:	4b92      	ldr	r3, [pc, #584]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003470:	e001      	b.n	8003476 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003472:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a8b      	ldr	r2, [pc, #556]	; (80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800348c:	4b8a      	ldr	r3, [pc, #552]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800348e:	e001      	b.n	8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003490:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a0:	d004      	beq.n	80034ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 8099 	bne.w	80035de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d107      	bne.n	80034c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f925 	bl	8003710 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d107      	bne.n	80034e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f9c8 	bl	8003870 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	d13a      	bne.n	8003560 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d035      	beq.n	8003560 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a6e      	ldr	r2, [pc, #440]	; (80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034fe:	4b6e      	ldr	r3, [pc, #440]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003500:	e001      	b.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003502:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4969      	ldr	r1, [pc, #420]	; (80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800350e:	428b      	cmp	r3, r1
 8003510:	d101      	bne.n	8003516 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003512:	4b69      	ldr	r3, [pc, #420]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003514:	e001      	b.n	800351a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003516:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800351a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800351e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800352e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	f043 0202 	orr.w	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff fe88 	bl	8003270 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b08      	cmp	r3, #8
 8003568:	f040 80c3 	bne.w	80036f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80bd 	beq.w	80036f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003586:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a49      	ldr	r2, [pc, #292]	; (80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003592:	4b49      	ldr	r3, [pc, #292]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003594:	e001      	b.n	800359a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003596:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4944      	ldr	r1, [pc, #272]	; (80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035a2:	428b      	cmp	r3, r1
 80035a4:	d101      	bne.n	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80035a6:	4b44      	ldr	r3, [pc, #272]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035a8:	e001      	b.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80035aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035b4:	2300      	movs	r3, #0
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f043 0204 	orr.w	r2, r3, #4
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff fe4a 	bl	8003270 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035dc:	e089      	b.n	80036f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d107      	bne.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8be 	bl	8003774 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d107      	bne.n	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f8fd 	bl	800380c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003618:	2b40      	cmp	r3, #64	; 0x40
 800361a:	d12f      	bne.n	800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d02a      	beq.n	800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003634:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1e      	ldr	r2, [pc, #120]	; (80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003640:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003642:	e001      	b.n	8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003644:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4919      	ldr	r1, [pc, #100]	; (80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003650:	428b      	cmp	r3, r1
 8003652:	d101      	bne.n	8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003654:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003656:	e001      	b.n	800365c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003660:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f043 0202 	orr.w	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff fdfa 	bl	8003270 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b08      	cmp	r3, #8
 8003684:	d136      	bne.n	80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	d031      	beq.n	80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800369a:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800369c:	e001      	b.n	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800369e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4902      	ldr	r1, [pc, #8]	; (80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036aa:	428b      	cmp	r3, r1
 80036ac:	d106      	bne.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80036ae:	4b02      	ldr	r3, [pc, #8]	; (80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036b0:	e006      	b.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80036b2:	bf00      	nop
 80036b4:	40003800 	.word	0x40003800
 80036b8:	40003400 	.word	0x40003400
 80036bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f043 0204 	orr.w	r2, r3, #4
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fdc0 	bl	8003270 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036f0:	e000      	b.n	80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036f2:	bf00      	nop
}
 80036f4:	bf00      	nop
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c99      	adds	r1, r3, #2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6251      	str	r1, [r2, #36]	; 0x24
 8003722:	881a      	ldrh	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d113      	bne.n	800376a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003750:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ffc9 	bl	80036fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	1c99      	adds	r1, r3, #2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6251      	str	r1, [r2, #36]	; 0x24
 8003786:	8819      	ldrh	r1, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <I2SEx_TxISR_I2SExt+0x90>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <I2SEx_TxISR_I2SExt+0x22>
 8003792:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <I2SEx_TxISR_I2SExt+0x94>)
 8003794:	e001      	b.n	800379a <I2SEx_TxISR_I2SExt+0x26>
 8003796:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800379a:	460a      	mov	r2, r1
 800379c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d121      	bne.n	80037fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <I2SEx_TxISR_I2SExt+0x90>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <I2SEx_TxISR_I2SExt+0x50>
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <I2SEx_TxISR_I2SExt+0x94>)
 80037c2:	e001      	b.n	80037c8 <I2SEx_TxISR_I2SExt+0x54>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	490d      	ldr	r1, [pc, #52]	; (8003804 <I2SEx_TxISR_I2SExt+0x90>)
 80037d0:	428b      	cmp	r3, r1
 80037d2:	d101      	bne.n	80037d8 <I2SEx_TxISR_I2SExt+0x64>
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <I2SEx_TxISR_I2SExt+0x94>)
 80037d6:	e001      	b.n	80037dc <I2SEx_TxISR_I2SExt+0x68>
 80037d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff81 	bl	80036fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40003800 	.word	0x40003800
 8003808:	40003400 	.word	0x40003400

0800380c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68d8      	ldr	r0, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	1c99      	adds	r1, r3, #2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003824:	b282      	uxth	r2, r0
 8003826:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d113      	bne.n	8003868 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800384e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ff4a 	bl	80036fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a20      	ldr	r2, [pc, #128]	; (8003900 <I2SEx_RxISR_I2SExt+0x90>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <I2SEx_RxISR_I2SExt+0x16>
 8003882:	4b20      	ldr	r3, [pc, #128]	; (8003904 <I2SEx_RxISR_I2SExt+0x94>)
 8003884:	e001      	b.n	800388a <I2SEx_RxISR_I2SExt+0x1a>
 8003886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388a:	68d8      	ldr	r0, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	1c99      	adds	r1, r3, #2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003896:	b282      	uxth	r2, r0
 8003898:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d121      	bne.n	80038f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a12      	ldr	r2, [pc, #72]	; (8003900 <I2SEx_RxISR_I2SExt+0x90>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d101      	bne.n	80038c0 <I2SEx_RxISR_I2SExt+0x50>
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <I2SEx_RxISR_I2SExt+0x94>)
 80038be:	e001      	b.n	80038c4 <I2SEx_RxISR_I2SExt+0x54>
 80038c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	490d      	ldr	r1, [pc, #52]	; (8003900 <I2SEx_RxISR_I2SExt+0x90>)
 80038cc:	428b      	cmp	r3, r1
 80038ce:	d101      	bne.n	80038d4 <I2SEx_RxISR_I2SExt+0x64>
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <I2SEx_RxISR_I2SExt+0x94>)
 80038d2:	e001      	b.n	80038d8 <I2SEx_RxISR_I2SExt+0x68>
 80038d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff03 	bl	80036fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40003800 	.word	0x40003800
 8003904:	40003400 	.word	0x40003400

08003908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e267      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d075      	beq.n	8003a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003926:	4b88      	ldr	r3, [pc, #544]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b04      	cmp	r3, #4
 8003930:	d00c      	beq.n	800394c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003932:	4b85      	ldr	r3, [pc, #532]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393a:	2b08      	cmp	r3, #8
 800393c:	d112      	bne.n	8003964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393e:	4b82      	ldr	r3, [pc, #520]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800394a:	d10b      	bne.n	8003964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	4b7e      	ldr	r3, [pc, #504]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d05b      	beq.n	8003a10 <HAL_RCC_OscConfig+0x108>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d157      	bne.n	8003a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e242      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396c:	d106      	bne.n	800397c <HAL_RCC_OscConfig+0x74>
 800396e:	4b76      	ldr	r3, [pc, #472]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a75      	ldr	r2, [pc, #468]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e01d      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x98>
 8003986:	4b70      	ldr	r3, [pc, #448]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a6f      	ldr	r2, [pc, #444]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 800398c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b6d      	ldr	r3, [pc, #436]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a6c      	ldr	r2, [pc, #432]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e00b      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 80039a0:	4b69      	ldr	r3, [pc, #420]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a68      	ldr	r2, [pc, #416]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b66      	ldr	r3, [pc, #408]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a65      	ldr	r2, [pc, #404]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fd faa2 	bl	8000f08 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fd fa9e 	bl	8000f08 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e207      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039da:	4b5b      	ldr	r3, [pc, #364]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0xc0>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fd fa8e 	bl	8000f08 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fd fa8a 	bl	8000f08 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e1f3      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a02:	4b51      	ldr	r3, [pc, #324]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0xe8>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d063      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1e:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2a:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d11c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a36:	4b44      	ldr	r3, [pc, #272]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d116      	bne.n	8003a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	4b41      	ldr	r3, [pc, #260]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_RCC_OscConfig+0x152>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d001      	beq.n	8003a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e1c7      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5a:	4b3b      	ldr	r3, [pc, #236]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4937      	ldr	r1, [pc, #220]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6e:	e03a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a78:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <HAL_RCC_OscConfig+0x244>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fd fa43 	bl	8000f08 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a86:	f7fd fa3f 	bl	8000f08 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e1a8      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a98:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa4:	4b28      	ldr	r3, [pc, #160]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4925      	ldr	r1, [pc, #148]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
 8003ab8:	e015      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aba:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_RCC_OscConfig+0x244>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fa22 	bl	8000f08 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac8:	f7fd fa1e 	bl	8000f08 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e187      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ada:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d036      	beq.n	8003b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_RCC_OscConfig+0x248>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fd fa02 	bl	8000f08 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b08:	f7fd f9fe 	bl	8000f08 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e167      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x200>
 8003b26:	e01b      	b.n	8003b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b28:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_RCC_OscConfig+0x248>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7fd f9eb 	bl	8000f08 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	e00e      	b.n	8003b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fd f9e7 	bl	8000f08 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d907      	bls.n	8003b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e150      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	42470000 	.word	0x42470000
 8003b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b54:	4b88      	ldr	r3, [pc, #544]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1ea      	bne.n	8003b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8097 	beq.w	8003c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b72:	4b81      	ldr	r3, [pc, #516]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	4b7d      	ldr	r3, [pc, #500]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	4a7c      	ldr	r2, [pc, #496]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8e:	4b7a      	ldr	r3, [pc, #488]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9e:	4b77      	ldr	r3, [pc, #476]	; (8003d7c <HAL_RCC_OscConfig+0x474>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d118      	bne.n	8003bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003baa:	4b74      	ldr	r3, [pc, #464]	; (8003d7c <HAL_RCC_OscConfig+0x474>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a73      	ldr	r2, [pc, #460]	; (8003d7c <HAL_RCC_OscConfig+0x474>)
 8003bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb6:	f7fd f9a7 	bl	8000f08 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbe:	f7fd f9a3 	bl	8000f08 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e10c      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <HAL_RCC_OscConfig+0x474>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x2ea>
 8003be4:	4b64      	ldr	r3, [pc, #400]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	4a63      	ldr	r2, [pc, #396]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf0:	e01c      	b.n	8003c2c <HAL_RCC_OscConfig+0x324>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x30c>
 8003bfa:	4b5f      	ldr	r3, [pc, #380]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a5e      	ldr	r2, [pc, #376]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	6713      	str	r3, [r2, #112]	; 0x70
 8003c06:	4b5c      	ldr	r3, [pc, #368]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4a5b      	ldr	r2, [pc, #364]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6713      	str	r3, [r2, #112]	; 0x70
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0x324>
 8003c14:	4b58      	ldr	r3, [pc, #352]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	4a57      	ldr	r2, [pc, #348]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c20:	4b55      	ldr	r3, [pc, #340]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	4a54      	ldr	r2, [pc, #336]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c26:	f023 0304 	bic.w	r3, r3, #4
 8003c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d015      	beq.n	8003c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fd f968 	bl	8000f08 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7fd f964 	bl	8000f08 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e0cb      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c52:	4b49      	ldr	r3, [pc, #292]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0ee      	beq.n	8003c3c <HAL_RCC_OscConfig+0x334>
 8003c5e:	e014      	b.n	8003c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c60:	f7fd f952 	bl	8000f08 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c68:	f7fd f94e 	bl	8000f08 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e0b5      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7e:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ee      	bne.n	8003c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c90:	4b39      	ldr	r3, [pc, #228]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	4a38      	ldr	r2, [pc, #224]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80a1 	beq.w	8003de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ca6:	4b34      	ldr	r3, [pc, #208]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d05c      	beq.n	8003d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d141      	bne.n	8003d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cba:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <HAL_RCC_OscConfig+0x478>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fd f922 	bl	8000f08 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fd f91e 	bl	8000f08 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e087      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	4b27      	ldr	r3, [pc, #156]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	019b      	lsls	r3, r3, #6
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	041b      	lsls	r3, r3, #16
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	061b      	lsls	r3, r3, #24
 8003d0a:	491b      	ldr	r1, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x478>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d16:	f7fd f8f7 	bl	8000f08 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1e:	f7fd f8f3 	bl	8000f08 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e05c      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x416>
 8003d3c:	e054      	b.n	8003de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCC_OscConfig+0x478>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fd f8e0 	bl	8000f08 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fd f8dc 	bl	8000f08 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e045      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x444>
 8003d6a:	e03d      	b.n	8003de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e038      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d84:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_RCC_OscConfig+0x4ec>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d028      	beq.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d121      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d11a      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003db4:	4013      	ands	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d111      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800

08003df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0cc      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b68      	ldr	r3, [pc, #416]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d90c      	bls.n	8003e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b65      	ldr	r3, [pc, #404]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	4b63      	ldr	r3, [pc, #396]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0b8      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d020      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e4c:	4b59      	ldr	r3, [pc, #356]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4a58      	ldr	r2, [pc, #352]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e64:	4b53      	ldr	r3, [pc, #332]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4a52      	ldr	r2, [pc, #328]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e70:	4b50      	ldr	r3, [pc, #320]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	494d      	ldr	r1, [pc, #308]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d044      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d107      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d119      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e07f      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d003      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb6:	4b3f      	ldr	r3, [pc, #252]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e06f      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec6:	4b3b      	ldr	r3, [pc, #236]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e067      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed6:	4b37      	ldr	r3, [pc, #220]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f023 0203 	bic.w	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4934      	ldr	r1, [pc, #208]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee8:	f7fd f80e 	bl	8000f08 <HAL_GetTick>
 8003eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef0:	f7fd f80a 	bl	8000f08 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e04f      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f06:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 020c 	and.w	r2, r3, #12
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d1eb      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f18:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d20c      	bcs.n	8003f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f26:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e032      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4916      	ldr	r1, [pc, #88]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f6a:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	490e      	ldr	r1, [pc, #56]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f7e:	f000 f821 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
 8003f82:	4602      	mov	r2, r0
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	490a      	ldr	r1, [pc, #40]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f90:	5ccb      	ldrb	r3, [r1, r3]
 8003f92:	fa22 f303 	lsr.w	r3, r2, r3
 8003f96:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <HAL_RCC_ClockConfig+0x1c4>)
 8003f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fc ff6e 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023c00 	.word	0x40023c00
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	08007e30 	.word	0x08007e30
 8003fbc:	20000000 	.word	0x20000000
 8003fc0:	20000004 	.word	0x20000004

08003fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc8:	b094      	sub	sp, #80	; 0x50
 8003fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fdc:	4b79      	ldr	r3, [pc, #484]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d00d      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x40>
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	f200 80e1 	bhi.w	80041b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8003ff6:	e0db      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff8:	4b73      	ldr	r3, [pc, #460]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ffa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ffc:	e0db      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ffe:	4b73      	ldr	r3, [pc, #460]	; (80041cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004000:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004002:	e0d8      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004004:	4b6f      	ldr	r3, [pc, #444]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800400c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800400e:	4b6d      	ldr	r3, [pc, #436]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d063      	beq.n	80040e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401a:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	2200      	movs	r2, #0
 8004022:	63bb      	str	r3, [r7, #56]	; 0x38
 8004024:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402c:	633b      	str	r3, [r7, #48]	; 0x30
 800402e:	2300      	movs	r3, #0
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
 8004032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004036:	4622      	mov	r2, r4
 8004038:	462b      	mov	r3, r5
 800403a:	f04f 0000 	mov.w	r0, #0
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	0159      	lsls	r1, r3, #5
 8004044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004048:	0150      	lsls	r0, r2, #5
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4621      	mov	r1, r4
 8004050:	1a51      	subs	r1, r2, r1
 8004052:	6139      	str	r1, [r7, #16]
 8004054:	4629      	mov	r1, r5
 8004056:	eb63 0301 	sbc.w	r3, r3, r1
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004068:	4659      	mov	r1, fp
 800406a:	018b      	lsls	r3, r1, #6
 800406c:	4651      	mov	r1, sl
 800406e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004072:	4651      	mov	r1, sl
 8004074:	018a      	lsls	r2, r1, #6
 8004076:	4651      	mov	r1, sl
 8004078:	ebb2 0801 	subs.w	r8, r2, r1
 800407c:	4659      	mov	r1, fp
 800407e:	eb63 0901 	sbc.w	r9, r3, r1
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800408e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004096:	4690      	mov	r8, r2
 8004098:	4699      	mov	r9, r3
 800409a:	4623      	mov	r3, r4
 800409c:	eb18 0303 	adds.w	r3, r8, r3
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	462b      	mov	r3, r5
 80040a4:	eb49 0303 	adc.w	r3, r9, r3
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040b6:	4629      	mov	r1, r5
 80040b8:	024b      	lsls	r3, r1, #9
 80040ba:	4621      	mov	r1, r4
 80040bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040c0:	4621      	mov	r1, r4
 80040c2:	024a      	lsls	r2, r1, #9
 80040c4:	4610      	mov	r0, r2
 80040c6:	4619      	mov	r1, r3
 80040c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ca:	2200      	movs	r2, #0
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040d4:	f7fc f880 	bl	80001d8 <__aeabi_uldivmod>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4613      	mov	r3, r2
 80040de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e0:	e058      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e2:	4b38      	ldr	r3, [pc, #224]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	099b      	lsrs	r3, r3, #6
 80040e8:	2200      	movs	r2, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	4611      	mov	r1, r2
 80040ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040f2:	623b      	str	r3, [r7, #32]
 80040f4:	2300      	movs	r3, #0
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
 80040f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	f04f 0000 	mov.w	r0, #0
 8004104:	f04f 0100 	mov.w	r1, #0
 8004108:	0159      	lsls	r1, r3, #5
 800410a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800410e:	0150      	lsls	r0, r2, #5
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4641      	mov	r1, r8
 8004116:	ebb2 0a01 	subs.w	sl, r2, r1
 800411a:	4649      	mov	r1, r9
 800411c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800412c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004134:	ebb2 040a 	subs.w	r4, r2, sl
 8004138:	eb63 050b 	sbc.w	r5, r3, fp
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	00eb      	lsls	r3, r5, #3
 8004146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800414a:	00e2      	lsls	r2, r4, #3
 800414c:	4614      	mov	r4, r2
 800414e:	461d      	mov	r5, r3
 8004150:	4643      	mov	r3, r8
 8004152:	18e3      	adds	r3, r4, r3
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	464b      	mov	r3, r9
 8004158:	eb45 0303 	adc.w	r3, r5, r3
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800416a:	4629      	mov	r1, r5
 800416c:	028b      	lsls	r3, r1, #10
 800416e:	4621      	mov	r1, r4
 8004170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004174:	4621      	mov	r1, r4
 8004176:	028a      	lsls	r2, r1, #10
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800417e:	2200      	movs	r2, #0
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	61fa      	str	r2, [r7, #28]
 8004184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004188:	f7fc f826 	bl	80001d8 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4613      	mov	r3, r2
 8004192:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004194:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	3301      	adds	r3, #1
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041ae:	e002      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80041b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3750      	adds	r7, #80	; 0x50
 80041bc:	46bd      	mov	sp, r7
 80041be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c2:	bf00      	nop
 80041c4:	40023800 	.word	0x40023800
 80041c8:	00f42400 	.word	0x00f42400
 80041cc:	007a1200 	.word	0x007a1200

080041d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000000 	.word	0x20000000

080041e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041ec:	f7ff fff0 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	0a9b      	lsrs	r3, r3, #10
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	4903      	ldr	r1, [pc, #12]	; (800420c <HAL_RCC_GetPCLK1Freq+0x24>)
 80041fe:	5ccb      	ldrb	r3, [r1, r3]
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004204:	4618      	mov	r0, r3
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40023800 	.word	0x40023800
 800420c:	08007e40 	.word	0x08007e40

08004210 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004234:	2b00      	cmp	r3, #0
 8004236:	d038      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004238:	4b68      	ldr	r3, [pc, #416]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800423e:	f7fc fe63 	bl	8000f08 <HAL_GetTick>
 8004242:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004246:	f7fc fe5f 	bl	8000f08 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e0bd      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004258:	4b61      	ldr	r3, [pc, #388]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	019b      	lsls	r3, r3, #6
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	495a      	ldr	r1, [pc, #360]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800427e:	4b57      	ldr	r3, [pc, #348]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004280:	2201      	movs	r2, #1
 8004282:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004284:	f7fc fe40 	bl	8000f08 <HAL_GetTick>
 8004288:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800428c:	f7fc fe3c 	bl	8000f08 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e09a      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800429e:	4b50      	ldr	r3, [pc, #320]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8083 	beq.w	80043be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	4b48      	ldr	r3, [pc, #288]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	4a47      	ldr	r2, [pc, #284]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c6:	6413      	str	r3, [r2, #64]	; 0x40
 80042c8:	4b45      	ldr	r3, [pc, #276]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042d4:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a42      	ldr	r2, [pc, #264]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042de:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042e0:	f7fc fe12 	bl	8000f08 <HAL_GetTick>
 80042e4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fc fe0e 	bl	8000f08 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e06c      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042fa:	4b3a      	ldr	r3, [pc, #232]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004306:	4b36      	ldr	r3, [pc, #216]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d02f      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	429a      	cmp	r2, r3
 8004322:	d028      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004324:	4b2e      	ldr	r3, [pc, #184]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800432e:	4b2e      	ldr	r3, [pc, #184]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004334:	4b2c      	ldr	r3, [pc, #176]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800433a:	4a29      	ldr	r2, [pc, #164]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004340:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d114      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800434c:	f7fc fddc 	bl	8000f08 <HAL_GetTick>
 8004350:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004352:	e00a      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004354:	f7fc fdd8 	bl	8000f08 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e034      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436a:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0ee      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004382:	d10d      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004384:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004398:	4911      	ldr	r1, [pc, #68]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
 800439e:	e005      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80043a0:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4a0e      	ldr	r2, [pc, #56]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043aa:	6093      	str	r3, [r2, #8]
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b8:	4909      	ldr	r1, [pc, #36]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	7d1a      	ldrb	r2, [r3, #20]
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80043d0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	42470068 	.word	0x42470068
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40007000 	.word	0x40007000
 80043e8:	42470e40 	.word	0x42470e40
 80043ec:	424711e0 	.word	0x424711e0

080043f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d140      	bne.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800440e:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d131      	bne.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004424:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004426:	617b      	str	r3, [r7, #20]
          break;
 8004428:	e031      	b.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800442a:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004436:	d109      	bne.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004438:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800443a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004442:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	e008      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800444c:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800444e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004456:	4a15      	ldr	r2, [pc, #84]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800445e:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004464:	099b      	lsrs	r3, r3, #6
 8004466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	fb02 f303 	mul.w	r3, r2, r3
 8004470:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004478:	0f1b      	lsrs	r3, r3, #28
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	fbb2 f3f3 	udiv	r3, r2, r3
 8004484:	617b      	str	r3, [r7, #20]
          break;
 8004486:	e002      	b.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
          break;
 800448c:	bf00      	nop
        }
      }
      break;
 800448e:	bf00      	nop
    }
  }
  return frequency;
 8004490:	697b      	ldr	r3, [r7, #20]
}
 8004492:	4618      	mov	r0, r3
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800
 80044a4:	00bb8000 	.word	0x00bb8000
 80044a8:	007a1200 	.word	0x007a1200
 80044ac:	00f42400 	.word	0x00f42400

080044b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e07b      	b.n	80045ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d108      	bne.n	80044dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044d2:	d009      	beq.n	80044e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	61da      	str	r2, [r3, #28]
 80044da:	e005      	b.n	80044e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fc fb84 	bl	8000c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800451e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456c:	ea42 0103 	orr.w	r1, r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	f003 0104 	and.w	r1, r3, #4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	f003 0210 	and.w	r2, r3, #16
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69da      	ldr	r2, [r3, #28]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045c2:	b084      	sub	sp, #16
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	f107 001c 	add.w	r0, r7, #28
 80045d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d122      	bne.n	8004620 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004604:	2b01      	cmp	r3, #1
 8004606:	d105      	bne.n	8004614 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f9bf 	bl	8004998 <USB_CoreReset>
 800461a:	4603      	mov	r3, r0
 800461c:	73fb      	strb	r3, [r7, #15]
 800461e:	e01a      	b.n	8004656 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f9b3 	bl	8004998 <USB_CoreReset>
 8004632:	4603      	mov	r3, r0
 8004634:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	639a      	str	r2, [r3, #56]	; 0x38
 8004648:	e005      	b.n	8004656 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	2b01      	cmp	r3, #1
 800465a:	d10b      	bne.n	8004674 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f043 0206 	orr.w	r2, r3, #6
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f043 0220 	orr.w	r2, r3, #32
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004680:	b004      	add	sp, #16
 8004682:	4770      	bx	lr

08004684 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f043 0201 	orr.w	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f023 0201 	bic.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d115      	bne.n	8004716 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046f6:	2001      	movs	r0, #1
 80046f8:	f7fc fc12 	bl	8000f20 <HAL_Delay>
      ms++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3301      	adds	r3, #1
 8004700:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f939 	bl	800497a <USB_GetMode>
 8004708:	4603      	mov	r3, r0
 800470a:	2b01      	cmp	r3, #1
 800470c:	d01e      	beq.n	800474c <USB_SetCurrentMode+0x84>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b31      	cmp	r3, #49	; 0x31
 8004712:	d9f0      	bls.n	80046f6 <USB_SetCurrentMode+0x2e>
 8004714:	e01a      	b.n	800474c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004716:	78fb      	ldrb	r3, [r7, #3]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d115      	bne.n	8004748 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004728:	2001      	movs	r0, #1
 800472a:	f7fc fbf9 	bl	8000f20 <HAL_Delay>
      ms++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3301      	adds	r3, #1
 8004732:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f920 	bl	800497a <USB_GetMode>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <USB_SetCurrentMode+0x84>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b31      	cmp	r3, #49	; 0x31
 8004744:	d9f0      	bls.n	8004728 <USB_SetCurrentMode+0x60>
 8004746:	e001      	b.n	800474c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e005      	b.n	8004758 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b32      	cmp	r3, #50	; 0x32
 8004750:	d101      	bne.n	8004756 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3301      	adds	r3, #1
 8004772:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <USB_FlushTxFifo+0x64>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d901      	bls.n	8004780 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e01b      	b.n	80047b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	daf2      	bge.n	800476e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	019b      	lsls	r3, r3, #6
 8004790:	f043 0220 	orr.w	r2, r3, #32
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3301      	adds	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4a08      	ldr	r2, [pc, #32]	; (80047c4 <USB_FlushTxFifo+0x64>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e006      	b.n	80047b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d0f0      	beq.n	8004798 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	00030d40 	.word	0x00030d40

080047c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3301      	adds	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a11      	ldr	r2, [pc, #68]	; (8004824 <USB_FlushRxFifo+0x5c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e018      	b.n	8004818 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	daf2      	bge.n	80047d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2210      	movs	r2, #16
 80047f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a08      	ldr	r2, [pc, #32]	; (8004824 <USB_FlushRxFifo+0x5c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e006      	b.n	8004818 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b10      	cmp	r3, #16
 8004814:	d0f0      	beq.n	80047f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	00030d40 	.word	0x00030d40

08004828 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004828:	b480      	push	{r7}
 800482a:	b089      	sub	sp, #36	; 0x24
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	4611      	mov	r1, r2
 8004834:	461a      	mov	r2, r3
 8004836:	460b      	mov	r3, r1
 8004838:	71fb      	strb	r3, [r7, #7]
 800483a:	4613      	mov	r3, r2
 800483c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004846:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800484a:	2b00      	cmp	r3, #0
 800484c:	d123      	bne.n	8004896 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800484e:	88bb      	ldrh	r3, [r7, #4]
 8004850:	3303      	adds	r3, #3
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004856:	2300      	movs	r3, #0
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	e018      	b.n	800488e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	031a      	lsls	r2, r3, #12
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	4413      	add	r3, r2
 8004864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004868:	461a      	mov	r2, r3
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	3301      	adds	r3, #1
 8004874:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3301      	adds	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3301      	adds	r3, #1
 8004880:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3301      	adds	r3, #1
 8004886:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	3301      	adds	r3, #1
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	d3e2      	bcc.n	800485c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3724      	adds	r7, #36	; 0x24
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b08b      	sub	sp, #44	; 0x2c
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	089b      	lsrs	r3, r3, #2
 80048be:	b29b      	uxth	r3, r3
 80048c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80048ca:	2300      	movs	r3, #0
 80048cc:	623b      	str	r3, [r7, #32]
 80048ce:	e014      	b.n	80048fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	601a      	str	r2, [r3, #0]
    pDest++;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	3301      	adds	r3, #1
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	3301      	adds	r3, #1
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	3301      	adds	r3, #1
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	3301      	adds	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	3301      	adds	r3, #1
 80048f8:	623b      	str	r3, [r7, #32]
 80048fa:	6a3a      	ldr	r2, [r7, #32]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d3e6      	bcc.n	80048d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004902:	8bfb      	ldrh	r3, [r7, #30]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01e      	beq.n	8004946 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004912:	461a      	mov	r2, r3
 8004914:	f107 0310 	add.w	r3, r7, #16
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
 8004928:	b2da      	uxtb	r2, r3
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	701a      	strb	r2, [r3, #0]
      i++;
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	3301      	adds	r3, #1
 8004932:	623b      	str	r3, [r7, #32]
      pDest++;
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	3301      	adds	r3, #1
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800493a:	8bfb      	ldrh	r3, [r7, #30]
 800493c:	3b01      	subs	r3, #1
 800493e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004940:	8bfb      	ldrh	r3, [r7, #30]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1ea      	bne.n	800491c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004948:	4618      	mov	r0, r3
 800494a:	372c      	adds	r7, #44	; 0x2c
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800496c:	68fb      	ldr	r3, [r7, #12]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0301 	and.w	r3, r3, #1
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3301      	adds	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4a13      	ldr	r2, [pc, #76]	; (80049fc <USB_CoreReset+0x64>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e01b      	b.n	80049ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	daf2      	bge.n	80049a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f043 0201 	orr.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3301      	adds	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4a09      	ldr	r2, [pc, #36]	; (80049fc <USB_CoreReset+0x64>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d901      	bls.n	80049e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e006      	b.n	80049ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d0f0      	beq.n	80049ce <USB_CoreReset+0x36>

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	00030d40 	.word	0x00030d40

08004a00 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a00:	b084      	sub	sp, #16
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a20:	461a      	mov	r2, r3
 8004a22:	2300      	movs	r3, #0
 8004a24:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d018      	beq.n	8004a88 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d10a      	bne.n	8004a72 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a6a:	f043 0304 	orr.w	r3, r3, #4
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	e014      	b.n	8004a9c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a80:	f023 0304 	bic.w	r3, r3, #4
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e009      	b.n	8004a9c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a96:	f023 0304 	bic.w	r3, r3, #4
 8004a9a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a9c:	2110      	movs	r1, #16
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff fe5e 	bl	8004760 <USB_FlushTxFifo>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff fe8a 	bl	80047c8 <USB_FlushRxFifo>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e015      	b.n	8004af0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ad6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3301      	adds	r3, #1
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d3e5      	bcc.n	8004ac4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b04:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00b      	beq.n	8004b2a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a13      	ldr	r2, [pc, #76]	; (8004b6c <USB_HostInit+0x16c>)
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a13      	ldr	r2, [pc, #76]	; (8004b70 <USB_HostInit+0x170>)
 8004b24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b28:	e009      	b.n	8004b3e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2280      	movs	r2, #128	; 0x80
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <USB_HostInit+0x174>)
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a0f      	ldr	r2, [pc, #60]	; (8004b78 <USB_HostInit+0x178>)
 8004b3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f043 0210 	orr.w	r2, r3, #16
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699a      	ldr	r2, [r3, #24]
 8004b54:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <USB_HostInit+0x17c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b68:	b004      	add	sp, #16
 8004b6a:	4770      	bx	lr
 8004b6c:	01000200 	.word	0x01000200
 8004b70:	00e00300 	.word	0x00e00300
 8004b74:	00600080 	.word	0x00600080
 8004b78:	004000e0 	.word	0x004000e0
 8004b7c:	a3200008 	.word	0xa3200008

08004b80 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d107      	bne.n	8004bd2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bce:	6053      	str	r3, [r2, #4]
 8004bd0:	e009      	b.n	8004be6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d106      	bne.n	8004be6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bde:	461a      	mov	r2, r3
 8004be0:	f241 7370 	movw	r3, #6000	; 0x1770
 8004be4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c14:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c22:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c24:	2064      	movs	r0, #100	; 0x64
 8004c26:	f7fc f97b 	bl	8000f20 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c36:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c38:	200a      	movs	r0, #10
 8004c3a:	f7fc f971 	bl	8000f20 <HAL_Delay>

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c6c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d109      	bne.n	8004c8c <USB_DriveVbus+0x44>
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d106      	bne.n	8004c8c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c8a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c96:	d109      	bne.n	8004cac <USB_DriveVbus+0x64>
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004caa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b085      	sub	sp, #20
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	0c5b      	lsrs	r3, r3, #17
 8004cd8:	f003 0303 	and.w	r3, r3, #3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	b29b      	uxth	r3, r3
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	4608      	mov	r0, r1
 8004d16:	4611      	mov	r1, r2
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	70fb      	strb	r3, [r7, #3]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	70bb      	strb	r3, [r7, #2]
 8004d22:	4613      	mov	r3, r2
 8004d24:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d40:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d87e      	bhi.n	8004e48 <USB_HC_Init+0x13c>
 8004d4a:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <USB_HC_Init+0x44>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d61 	.word	0x08004d61
 8004d54:	08004e0b 	.word	0x08004e0b
 8004d58:	08004d61 	.word	0x08004d61
 8004d5c:	08004dcd 	.word	0x08004dcd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	da10      	bge.n	8004d9e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	78fa      	ldrb	r2, [r7, #3]
 8004d8c:	0151      	lsls	r1, r2, #5
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	440a      	add	r2, r1
 8004d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004d9c:	e057      	b.n	8004e4e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d051      	beq.n	8004e4e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004dc8:	60d3      	str	r3, [r2, #12]
      break;
 8004dca:	e040      	b.n	8004e4e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f240 639d 	movw	r3, #1693	; 0x69d
 8004dde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004de0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	da34      	bge.n	8004e52 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	0151      	lsls	r1, r2, #5
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	440a      	add	r2, r1
 8004dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e06:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004e08:	e023      	b.n	8004e52 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e16:	461a      	mov	r2, r3
 8004e18:	f240 2325 	movw	r3, #549	; 0x225
 8004e1c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	da17      	bge.n	8004e56 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	78fa      	ldrb	r2, [r7, #3]
 8004e36:	0151      	lsls	r1, r2, #5
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e40:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e44:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e46:	e006      	b.n	8004e56 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	77fb      	strb	r3, [r7, #31]
      break;
 8004e4c:	e004      	b.n	8004e58 <USB_HC_Init+0x14c>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e002      	b.n	8004e58 <USB_HC_Init+0x14c>
      break;
 8004e52:	bf00      	nop
 8004e54:	e000      	b.n	8004e58 <USB_HC_Init+0x14c>
      break;
 8004e56:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	78fa      	ldrb	r2, [r7, #3]
 8004e68:	0151      	lsls	r1, r2, #5
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e72:	f043 0302 	orr.w	r3, r3, #2
 8004e76:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e7e:	699a      	ldr	r2, [r3, #24]
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	2101      	movs	r1, #1
 8004e88:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8c:	6939      	ldr	r1, [r7, #16]
 8004e8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e92:	4313      	orrs	r3, r2
 8004e94:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004ea2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	da03      	bge.n	8004eb2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eae:	61bb      	str	r3, [r7, #24]
 8004eb0:	e001      	b.n	8004eb6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff feff 	bl	8004cba <USB_GetHostSpeed>
 8004ebc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d106      	bne.n	8004ed4 <USB_HC_Init+0x1c8>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d003      	beq.n	8004ed4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004ecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	e001      	b.n	8004ed8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ed8:	787b      	ldrb	r3, [r7, #1]
 8004eda:	059b      	lsls	r3, r3, #22
 8004edc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ee0:	78bb      	ldrb	r3, [r7, #2]
 8004ee2:	02db      	lsls	r3, r3, #11
 8004ee4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ee8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004eea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004eee:	049b      	lsls	r3, r3, #18
 8004ef0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ef4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ef6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ef8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004efc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	0159      	lsls	r1, r3, #5
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	440b      	add	r3, r1
 8004f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f14:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004f16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d003      	beq.n	8004f26 <USB_HC_Init+0x21a>
 8004f1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d10f      	bne.n	8004f46 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	0151      	lsls	r1, r2, #5
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	440a      	add	r2, r1
 8004f3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f44:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f46:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08c      	sub	sp, #48	; 0x30
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	785b      	ldrb	r3, [r3, #1]
 8004f66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f6c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d02d      	beq.n	8004fd6 <USB_HC_StartXfer+0x86>
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	791b      	ldrb	r3, [r3, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d129      	bne.n	8004fd6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d117      	bne.n	8004fb8 <USB_HC_StartXfer+0x68>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	79db      	ldrb	r3, [r3, #7]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <USB_HC_StartXfer+0x48>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	79db      	ldrb	r3, [r3, #7]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d10f      	bne.n	8004fb8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	6a3a      	ldr	r2, [r7, #32]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10b      	bne.n	8004fd6 <USB_HC_StartXfer+0x86>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	795b      	ldrb	r3, [r3, #5]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d107      	bne.n	8004fd6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	785b      	ldrb	r3, [r3, #1]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fa0f 	bl	80053f0 <USB_DoPing>
      return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e0f8      	b.n	80051c8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d018      	beq.n	8005010 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	8912      	ldrh	r2, [r2, #8]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	8912      	ldrh	r2, [r2, #8]
 8004fee:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ff2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004ff4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ff6:	8b7b      	ldrh	r3, [r7, #26]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d90b      	bls.n	8005014 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004ffc:	8b7b      	ldrh	r3, [r7, #26]
 8004ffe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005000:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	8912      	ldrh	r2, [r2, #8]
 8005006:	fb03 f202 	mul.w	r2, r3, r2
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	611a      	str	r2, [r3, #16]
 800500e:	e001      	b.n	8005014 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005010:	2301      	movs	r3, #1
 8005012:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	78db      	ldrb	r3, [r3, #3]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800501c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	8912      	ldrh	r2, [r2, #8]
 8005022:	fb03 f202 	mul.w	r2, r3, r2
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	611a      	str	r2, [r3, #16]
 800502a:	e003      	b.n	8005034 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800503c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800503e:	04d9      	lsls	r1, r3, #19
 8005040:	4b63      	ldr	r3, [pc, #396]	; (80051d0 <USB_HC_StartXfer+0x280>)
 8005042:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005044:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	7a9b      	ldrb	r3, [r3, #10]
 800504a:	075b      	lsls	r3, r3, #29
 800504c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005050:	69f9      	ldr	r1, [r7, #28]
 8005052:	0148      	lsls	r0, r1, #5
 8005054:	6a39      	ldr	r1, [r7, #32]
 8005056:	4401      	add	r1, r0
 8005058:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800505c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800505e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	68d9      	ldr	r1, [r3, #12]
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	4413      	add	r3, r2
 8005072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005076:	460a      	mov	r2, r1
 8005078:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	bf0c      	ite	eq
 800508a:	2301      	moveq	r3, #1
 800508c:	2300      	movne	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	4413      	add	r3, r2
 800509a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	6a3a      	ldr	r2, [r7, #32]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050b0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	7e7b      	ldrb	r3, [r7, #25]
 80050c2:	075b      	lsls	r3, r3, #29
 80050c4:	69f9      	ldr	r1, [r7, #28]
 80050c6:	0148      	lsls	r0, r1, #5
 80050c8:	6a39      	ldr	r1, [r7, #32]
 80050ca:	4401      	add	r1, r0
 80050cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80050d0:	4313      	orrs	r3, r2
 80050d2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050ea:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	78db      	ldrb	r3, [r3, #3]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	e003      	b.n	8005106 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005104:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800510c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	4413      	add	r3, r2
 8005116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511a:	461a      	mov	r2, r3
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	e04e      	b.n	80051c8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	78db      	ldrb	r3, [r3, #3]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d149      	bne.n	80051c6 <USB_HC_StartXfer+0x276>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d045      	beq.n	80051c6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	79db      	ldrb	r3, [r3, #7]
 800513e:	2b03      	cmp	r3, #3
 8005140:	d830      	bhi.n	80051a4 <USB_HC_StartXfer+0x254>
 8005142:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <USB_HC_StartXfer+0x1f8>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	08005159 	.word	0x08005159
 800514c:	0800517d 	.word	0x0800517d
 8005150:	08005159 	.word	0x08005159
 8005154:	0800517d 	.word	0x0800517d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	3303      	adds	r3, #3
 800515e:	089b      	lsrs	r3, r3, #2
 8005160:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005162:	8afa      	ldrh	r2, [r7, #22]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	b29b      	uxth	r3, r3
 800516a:	429a      	cmp	r2, r3
 800516c:	d91c      	bls.n	80051a8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f043 0220 	orr.w	r2, r3, #32
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	619a      	str	r2, [r3, #24]
        }
        break;
 800517a:	e015      	b.n	80051a8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	3303      	adds	r3, #3
 8005182:	089b      	lsrs	r3, r3, #2
 8005184:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005186:	8afa      	ldrh	r2, [r7, #22]
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	b29b      	uxth	r3, r3
 8005192:	429a      	cmp	r2, r3
 8005194:	d90a      	bls.n	80051ac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80051a2:	e003      	b.n	80051ac <USB_HC_StartXfer+0x25c>

      default:
        break;
 80051a4:	bf00      	nop
 80051a6:	e002      	b.n	80051ae <USB_HC_StartXfer+0x25e>
        break;
 80051a8:	bf00      	nop
 80051aa:	e000      	b.n	80051ae <USB_HC_StartXfer+0x25e>
        break;
 80051ac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	68d9      	ldr	r1, [r3, #12]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	785a      	ldrb	r2, [r3, #1]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2000      	movs	r0, #0
 80051be:	9000      	str	r0, [sp, #0]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff fb31 	bl	8004828 <USB_WritePacket>
  }

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3728      	adds	r7, #40	; 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	1ff80000 	.word	0x1ff80000

080051d4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	b29b      	uxth	r3, r3
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b089      	sub	sp, #36	; 0x24
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	0c9b      	lsrs	r3, r3, #18
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	0fdb      	lsrs	r3, r3, #31
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b20      	cmp	r3, #32
 8005244:	d104      	bne.n	8005250 <USB_HC_Halt+0x5a>
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	e0c8      	b.n	80053e2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <USB_HC_Halt+0x66>
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d163      	bne.n	8005324 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	4413      	add	r3, r2
 8005264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	440a      	add	r2, r1
 8005272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005276:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800527a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	f040 80ab 	bne.w	80053e0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d133      	bne.n	80052fe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	4413      	add	r3, r2
 800529e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052b4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	0151      	lsls	r1, r2, #5
 80052c8:	69fa      	ldr	r2, [r7, #28]
 80052ca:	440a      	add	r2, r1
 80052cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052d4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052e2:	d81d      	bhi.n	8005320 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052fa:	d0ec      	beq.n	80052d6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052fc:	e070      	b.n	80053e0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	440a      	add	r2, r1
 8005314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800531c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800531e:	e05f      	b.n	80053e0 <USB_HC_Halt+0x1ea>
            break;
 8005320:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005322:	e05d      	b.n	80053e0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	0151      	lsls	r1, r2, #5
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	440a      	add	r2, r1
 800533a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800533e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005342:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d133      	bne.n	80053bc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	4413      	add	r3, r2
 800535c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	440a      	add	r2, r1
 800536a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800536e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005372:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	4413      	add	r3, r2
 800537c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	440a      	add	r2, r1
 800538a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800538e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005392:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3301      	adds	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053a0:	d81d      	bhi.n	80053de <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053b8:	d0ec      	beq.n	8005394 <USB_HC_Halt+0x19e>
 80053ba:	e011      	b.n	80053e0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	e000      	b.n	80053e0 <USB_HC_Halt+0x1ea>
          break;
 80053de:	bf00      	nop
    }
  }

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3724      	adds	r7, #36	; 0x24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005404:	2301      	movs	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	04da      	lsls	r2, r3, #19
 800540c:	4b15      	ldr	r3, [pc, #84]	; (8005464 <USB_DoPing+0x74>)
 800540e:	4013      	ands	r3, r2
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	440a      	add	r2, r1
 8005418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800541c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005420:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	4413      	add	r3, r2
 800542a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005438:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005440:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	4413      	add	r3, r2
 800544a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544e:	461a      	mov	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	1ff80000 	.word	0x1ff80000

08005468 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff f912 	bl	80046a6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005482:	2110      	movs	r1, #16
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff f96b 	bl	8004760 <USB_FlushTxFifo>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff f997 	bl	80047c8 <USB_FlushRxFifo>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80054a4:	2300      	movs	r3, #0
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	e01f      	b.n	80054ea <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054de:	461a      	mov	r2, r3
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	3301      	adds	r3, #1
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2b0f      	cmp	r3, #15
 80054ee:	d9dc      	bls.n	80054aa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	e034      	b.n	8005560 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800550c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005514:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800551c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	4413      	add	r3, r2
 8005526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552a:	461a      	mov	r2, r3
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800553c:	d80c      	bhi.n	8005558 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	4413      	add	r3, r2
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005554:	d0ec      	beq.n	8005530 <USB_StopHost+0xc8>
 8005556:	e000      	b.n	800555a <USB_StopHost+0xf2>
        break;
 8005558:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	3301      	adds	r3, #1
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b0f      	cmp	r3, #15
 8005564:	d9c7      	bls.n	80054f6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556c:	461a      	mov	r2, r3
 800556e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005572:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800557a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff f881 	bl	8004684 <USB_EnableGlobalInt>

  return ret;
 8005582:	7ffb      	ldrb	r3, [r7, #31]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b089      	sub	sp, #36	; 0x24
 8005590:	af04      	add	r7, sp, #16
 8005592:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005594:	2301      	movs	r3, #1
 8005596:	2202      	movs	r2, #2
 8005598:	2102      	movs	r1, #2
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fc66 	bl	8005e6c <USBH_FindInterface>
 80055a0:	4603      	mov	r3, r0
 80055a2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2bff      	cmp	r3, #255	; 0xff
 80055a8:	d002      	beq.n	80055b0 <USBH_CDC_InterfaceInit+0x24>
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d901      	bls.n	80055b4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80055b0:	2302      	movs	r3, #2
 80055b2:	e13d      	b.n	8005830 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fc3b 	bl	8005e34 <USBH_SelectInterface>
 80055be:	4603      	mov	r3, r0
 80055c0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80055c2:	7bbb      	ldrb	r3, [r7, #14]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80055c8:	2302      	movs	r3, #2
 80055ca:	e131      	b.n	8005830 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80055d2:	2050      	movs	r0, #80	; 0x50
 80055d4:	f002 fad2 	bl	8007b7c <malloc>
 80055d8:	4603      	mov	r3, r0
 80055da:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80055ec:	2302      	movs	r3, #2
 80055ee:	e11f      	b.n	8005830 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80055f0:	2250      	movs	r2, #80	; 0x50
 80055f2:	2100      	movs	r1, #0
 80055f4:	68b8      	ldr	r0, [r7, #8]
 80055f6:	f002 fb7d 	bl	8007cf4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	211a      	movs	r1, #26
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	4413      	add	r3, r2
 8005606:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	b25b      	sxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	da15      	bge.n	800563e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	211a      	movs	r1, #26
 8005618:	fb01 f303 	mul.w	r3, r1, r3
 800561c:	4413      	add	r3, r2
 800561e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005622:	781a      	ldrb	r2, [r3, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	211a      	movs	r1, #26
 800562e:	fb01 f303 	mul.w	r3, r1, r3
 8005632:	4413      	add	r3, r2
 8005634:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005638:	881a      	ldrh	r2, [r3, #0]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f001 ff2e 	bl	80074a6 <USBH_AllocPipe>
 800564a:	4603      	mov	r3, r0
 800564c:	461a      	mov	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	7819      	ldrb	r1, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	7858      	ldrb	r0, [r3, #1]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	8952      	ldrh	r2, [r2, #10]
 800566a:	9202      	str	r2, [sp, #8]
 800566c:	2203      	movs	r2, #3
 800566e:	9201      	str	r2, [sp, #4]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	4623      	mov	r3, r4
 8005674:	4602      	mov	r2, r0
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f001 fee6 	bl	8007448 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2200      	movs	r2, #0
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f002 f9f5 	bl	8007a74 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800568a:	2300      	movs	r3, #0
 800568c:	2200      	movs	r2, #0
 800568e:	210a      	movs	r1, #10
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fbeb 	bl	8005e6c <USBH_FindInterface>
 8005696:	4603      	mov	r3, r0
 8005698:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	2bff      	cmp	r3, #255	; 0xff
 800569e:	d002      	beq.n	80056a6 <USBH_CDC_InterfaceInit+0x11a>
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d901      	bls.n	80056aa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80056a6:	2302      	movs	r3, #2
 80056a8:	e0c2      	b.n	8005830 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	211a      	movs	r1, #26
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	4413      	add	r3, r2
 80056b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b25b      	sxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	da16      	bge.n	80056f0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	211a      	movs	r1, #26
 80056c8:	fb01 f303 	mul.w	r3, r1, r3
 80056cc:	4413      	add	r3, r2
 80056ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056d2:	781a      	ldrb	r2, [r3, #0]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	211a      	movs	r1, #26
 80056de:	fb01 f303 	mul.w	r3, r1, r3
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056e8:	881a      	ldrh	r2, [r3, #0]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	835a      	strh	r2, [r3, #26]
 80056ee:	e015      	b.n	800571c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	211a      	movs	r1, #26
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	211a      	movs	r1, #26
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	4413      	add	r3, r2
 8005712:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005716:	881a      	ldrh	r2, [r3, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	211a      	movs	r1, #26
 8005722:	fb01 f303 	mul.w	r3, r1, r3
 8005726:	4413      	add	r3, r2
 8005728:	f203 3356 	addw	r3, r3, #854	; 0x356
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	b25b      	sxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	da16      	bge.n	8005762 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	211a      	movs	r1, #26
 800573a:	fb01 f303 	mul.w	r3, r1, r3
 800573e:	4413      	add	r3, r2
 8005740:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	211a      	movs	r1, #26
 8005750:	fb01 f303 	mul.w	r3, r1, r3
 8005754:	4413      	add	r3, r2
 8005756:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800575a:	881a      	ldrh	r2, [r3, #0]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	835a      	strh	r2, [r3, #26]
 8005760:	e015      	b.n	800578e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	211a      	movs	r1, #26
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	4413      	add	r3, r2
 800576e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	211a      	movs	r1, #26
 800577e:	fb01 f303 	mul.w	r3, r1, r3
 8005782:	4413      	add	r3, r2
 8005784:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005788:	881a      	ldrh	r2, [r3, #0]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	7b9b      	ldrb	r3, [r3, #14]
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 fe86 	bl	80074a6 <USBH_AllocPipe>
 800579a:	4603      	mov	r3, r0
 800579c:	461a      	mov	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	7bdb      	ldrb	r3, [r3, #15]
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 fe7c 	bl	80074a6 <USBH_AllocPipe>
 80057ae:	4603      	mov	r3, r0
 80057b0:	461a      	mov	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	7b59      	ldrb	r1, [r3, #13]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	7b98      	ldrb	r0, [r3, #14]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	8b12      	ldrh	r2, [r2, #24]
 80057ce:	9202      	str	r2, [sp, #8]
 80057d0:	2202      	movs	r2, #2
 80057d2:	9201      	str	r2, [sp, #4]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	4623      	mov	r3, r4
 80057d8:	4602      	mov	r2, r0
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f001 fe34 	bl	8007448 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	7b19      	ldrb	r1, [r3, #12]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	7bd8      	ldrb	r0, [r3, #15]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	8b52      	ldrh	r2, [r2, #26]
 80057f8:	9202      	str	r2, [sp, #8]
 80057fa:	2202      	movs	r2, #2
 80057fc:	9201      	str	r2, [sp, #4]
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	4623      	mov	r3, r4
 8005802:	4602      	mov	r2, r0
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 fe1f 	bl	8007448 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	7b5b      	ldrb	r3, [r3, #13]
 8005816:	2200      	movs	r2, #0
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f002 f92a 	bl	8007a74 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	7b1b      	ldrb	r3, [r3, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f002 f923 	bl	8007a74 <USBH_LL_SetToggle>

  return USBH_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	bd90      	pop	{r4, r7, pc}

08005838 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00e      	beq.n	8005870 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f001 fe14 	bl	8007486 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 fe3f 	bl	80074e8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	7b1b      	ldrb	r3, [r3, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00e      	beq.n	8005896 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	7b1b      	ldrb	r3, [r3, #12]
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f001 fe01 	bl	8007486 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	7b1b      	ldrb	r3, [r3, #12]
 8005888:	4619      	mov	r1, r3
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f001 fe2c 	bl	80074e8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	7b5b      	ldrb	r3, [r3, #13]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00e      	beq.n	80058bc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	7b5b      	ldrb	r3, [r3, #13]
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 fdee 	bl	8007486 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	7b5b      	ldrb	r3, [r3, #13]
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f001 fe19 	bl	80074e8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f002 f95b 	bl	8007b8c <free>
    phost->pActiveClass->pData = 0U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058dc:	2200      	movs	r2, #0
 80058de:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3340      	adds	r3, #64	; 0x40
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f8b1 	bl	8005a6a <GetLineCoding>
 8005908:	4603      	mov	r3, r0
 800590a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800590c:	7afb      	ldrb	r3, [r7, #11]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d105      	bne.n	800591e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005918:	2102      	movs	r1, #2
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800591e:	7afb      	ldrb	r3, [r7, #11]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005948:	2b04      	cmp	r3, #4
 800594a:	d877      	bhi.n	8005a3c <USBH_CDC_Process+0x114>
 800594c:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <USBH_CDC_Process+0x2c>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	08005969 	.word	0x08005969
 8005958:	0800596f 	.word	0x0800596f
 800595c:	0800599f 	.word	0x0800599f
 8005960:	08005a13 	.word	0x08005a13
 8005964:	08005a21 	.word	0x08005a21
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	73fb      	strb	r3, [r7, #15]
      break;
 800596c:	e06d      	b.n	8005a4a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f897 	bl	8005aa8 <SetLineCoding>
 800597a:	4603      	mov	r3, r0
 800597c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800597e:	7bbb      	ldrb	r3, [r7, #14]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800598c:	e058      	b.n	8005a40 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800598e:	7bbb      	ldrb	r3, [r7, #14]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d055      	beq.n	8005a40 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2204      	movs	r2, #4
 8005998:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800599c:	e050      	b.n	8005a40 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	3340      	adds	r3, #64	; 0x40
 80059a2:	4619      	mov	r1, r3
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f860 	bl	8005a6a <GetLineCoding>
 80059aa:	4603      	mov	r3, r0
 80059ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059ae:	7bbb      	ldrb	r3, [r7, #14]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d126      	bne.n	8005a02 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c6:	791b      	ldrb	r3, [r3, #4]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d13b      	bne.n	8005a44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059d8:	429a      	cmp	r2, r3
 80059da:	d133      	bne.n	8005a44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d12b      	bne.n	8005a44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d124      	bne.n	8005a44 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f958 	bl	8005cb0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005a00:	e020      	b.n	8005a44 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d01d      	beq.n	8005a44 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005a10:	e018      	b.n	8005a44 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f867 	bl	8005ae6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f8da 	bl	8005bd2 <CDC_ProcessReception>
      break;
 8005a1e:	e014      	b.n	8005a4a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005a20:	2100      	movs	r1, #0
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 ffef 	bl	8006a06 <USBH_ClrFeature>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a2c:	7bbb      	ldrb	r3, [r7, #14]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005a3a:	e005      	b.n	8005a48 <USBH_CDC_Process+0x120>

    default:
      break;
 8005a3c:	bf00      	nop
 8005a3e:	e004      	b.n	8005a4a <USBH_CDC_Process+0x122>
      break;
 8005a40:	bf00      	nop
 8005a42:	e002      	b.n	8005a4a <USBH_CDC_Process+0x122>
      break;
 8005a44:	bf00      	nop
 8005a46:	e000      	b.n	8005a4a <USBH_CDC_Process+0x122>
      break;
 8005a48:	bf00      	nop

  }

  return status;
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	22a1      	movs	r2, #161	; 0xa1
 8005a78:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2221      	movs	r2, #33	; 0x21
 8005a7e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2207      	movs	r2, #7
 8005a90:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2207      	movs	r2, #7
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 fa83 	bl	8006fa4 <USBH_CtlReq>
 8005a9e:	4603      	mov	r3, r0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2221      	movs	r2, #33	; 0x21
 8005ab6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2207      	movs	r2, #7
 8005ace:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2207      	movs	r2, #7
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f001 fa64 	bl	8006fa4 <USBH_CtlReq>
 8005adc:	4603      	mov	r3, r0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b086      	sub	sp, #24
 8005aea:	af02      	add	r7, sp, #8
 8005aec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005af8:	2300      	movs	r3, #0
 8005afa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d002      	beq.n	8005b0c <CDC_ProcessTransmission+0x26>
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d023      	beq.n	8005b52 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005b0a:	e05e      	b.n	8005bca <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	8b12      	ldrh	r2, [r2, #24]
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d90b      	bls.n	8005b30 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	69d9      	ldr	r1, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8b1a      	ldrh	r2, [r3, #24]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	7b5b      	ldrb	r3, [r3, #13]
 8005b24:	2001      	movs	r0, #1
 8005b26:	9000      	str	r0, [sp, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f001 fc4a 	bl	80073c2 <USBH_BulkSendData>
 8005b2e:	e00b      	b.n	8005b48 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	7b5b      	ldrb	r3, [r3, #13]
 8005b3e:	2001      	movs	r0, #1
 8005b40:	9000      	str	r0, [sp, #0]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 fc3d 	bl	80073c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b50:	e03b      	b.n	8005bca <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	7b5b      	ldrb	r3, [r3, #13]
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f001 ff61 	bl	8007a20 <USBH_LL_GetURBState>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005b62:	7afb      	ldrb	r3, [r7, #11]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d128      	bne.n	8005bba <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	8b12      	ldrh	r2, [r2, #24]
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d90e      	bls.n	8005b92 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	8b12      	ldrh	r2, [r2, #24]
 8005b7c:	1a9a      	subs	r2, r3, r2
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	8b12      	ldrh	r2, [r2, #24]
 8005b8a:	441a      	add	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	61da      	str	r2, [r3, #28]
 8005b90:	e002      	b.n	8005b98 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d004      	beq.n	8005baa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ba8:	e00e      	b.n	8005bc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f868 	bl	8005c88 <USBH_CDC_TransmitCallback>
      break;
 8005bb8:	e006      	b.n	8005bc8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005bba:	7afb      	ldrb	r3, [r7, #11]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d103      	bne.n	8005bc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005bc8:	bf00      	nop
  }
}
 8005bca:	bf00      	nop
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005be4:	2300      	movs	r3, #0
 8005be6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d002      	beq.n	8005bf8 <CDC_ProcessReception+0x26>
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d00e      	beq.n	8005c14 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005bf6:	e043      	b.n	8005c80 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	6a19      	ldr	r1, [r3, #32]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	8b5a      	ldrh	r2, [r3, #26]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	7b1b      	ldrb	r3, [r3, #12]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 fc01 	bl	800740c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c12:	e035      	b.n	8005c80 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	7b1b      	ldrb	r3, [r3, #12]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 ff00 	bl	8007a20 <USBH_LL_GetURBState>
 8005c20:	4603      	mov	r3, r0
 8005c22:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005c24:	7cfb      	ldrb	r3, [r7, #19]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d129      	bne.n	8005c7e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	7b1b      	ldrb	r3, [r3, #12]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f001 fe63 	bl	80078fc <USBH_LL_GetLastXferSize>
 8005c36:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d016      	beq.n	8005c70 <CDC_ProcessReception+0x9e>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	8b5b      	ldrh	r3, [r3, #26]
 8005c46:	461a      	mov	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d910      	bls.n	8005c70 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	1ad2      	subs	r2, r2, r3
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	6a1a      	ldr	r2, [r3, #32]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	441a      	add	r2, r3
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2203      	movs	r2, #3
 8005c6a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c6e:	e006      	b.n	8005c7e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f80f 	bl	8005c9c <USBH_CDC_ReceiveCallback>
      break;
 8005c7e:	bf00      	nop
  }
}
 8005c80:	bf00      	nop
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e029      	b.n	8005d30 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	79fa      	ldrb	r2, [r7, #7]
 8005ce0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f81f 	bl	8005d38 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f001 fd33 	bl	8007794 <USBH_LL_Init>

  return USBH_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	e009      	b.n	8005d5e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	33e0      	adds	r3, #224	; 0xe0
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	2200      	movs	r2, #0
 8005d56:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b0f      	cmp	r3, #15
 8005d62:	d9f2      	bls.n	8005d4a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	e009      	b.n	8005d7e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d84:	d3f1      	bcc.n	8005d6a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2240      	movs	r2, #64	; 0x40
 8005daa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d016      	beq.n	8005e22 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10e      	bne.n	8005e1c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005e04:	1c59      	adds	r1, r3, #1
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	33de      	adds	r3, #222	; 0xde
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]
 8005e1a:	e004      	b.n	8005e26 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	73fb      	strb	r3, [r7, #15]
 8005e20:	e001      	b.n	8005e26 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005e22:	2302      	movs	r3, #2
 8005e24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005e4a:	78fa      	ldrb	r2, [r7, #3]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d204      	bcs.n	8005e5a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005e58:	e001      	b.n	8005e5e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	4608      	mov	r0, r1
 8005e76:	4611      	mov	r1, r2
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	70fb      	strb	r3, [r7, #3]
 8005e7e:	460b      	mov	r3, r1
 8005e80:	70bb      	strb	r3, [r7, #2]
 8005e82:	4613      	mov	r3, r2
 8005e84:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005e94:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e96:	e025      	b.n	8005ee4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
 8005e9a:	221a      	movs	r2, #26
 8005e9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	795b      	ldrb	r3, [r3, #5]
 8005eae:	78fa      	ldrb	r2, [r7, #3]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d002      	beq.n	8005eba <USBH_FindInterface+0x4e>
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	2bff      	cmp	r3, #255	; 0xff
 8005eb8:	d111      	bne.n	8005ede <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ebe:	78ba      	ldrb	r2, [r7, #2]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d002      	beq.n	8005eca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ec4:	78bb      	ldrb	r3, [r7, #2]
 8005ec6:	2bff      	cmp	r3, #255	; 0xff
 8005ec8:	d109      	bne.n	8005ede <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ece:	787a      	ldrb	r2, [r7, #1]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d002      	beq.n	8005eda <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ed4:	787b      	ldrb	r3, [r7, #1]
 8005ed6:	2bff      	cmp	r3, #255	; 0xff
 8005ed8:	d101      	bne.n	8005ede <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
 8005edc:	e006      	b.n	8005eec <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d9d6      	bls.n	8005e98 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005eea:	23ff      	movs	r3, #255	; 0xff
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f001 fc83 	bl	800780c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005f06:	2101      	movs	r1, #1
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 fd9c 	bl	8007a46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af04      	add	r7, sp, #16
 8005f1e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005f20:	2302      	movs	r3, #2
 8005f22:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d102      	bne.n	8005f3a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2203      	movs	r2, #3
 8005f38:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b0b      	cmp	r3, #11
 8005f42:	f200 81be 	bhi.w	80062c2 <USBH_Process+0x3aa>
 8005f46:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <USBH_Process+0x34>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f7d 	.word	0x08005f7d
 8005f50:	08005faf 	.word	0x08005faf
 8005f54:	08006017 	.word	0x08006017
 8005f58:	0800625d 	.word	0x0800625d
 8005f5c:	080062c3 	.word	0x080062c3
 8005f60:	080060bb 	.word	0x080060bb
 8005f64:	08006203 	.word	0x08006203
 8005f68:	080060f1 	.word	0x080060f1
 8005f6c:	08006111 	.word	0x08006111
 8005f70:	08006131 	.word	0x08006131
 8005f74:	08006175 	.word	0x08006175
 8005f78:	08006245 	.word	0x08006245
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 819e 	beq.w	80062c6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005f90:	20c8      	movs	r0, #200	; 0xc8
 8005f92:	f001 fd9f 	bl	8007ad4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f001 fc95 	bl	80078c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005fac:	e18b      	b.n	80062c6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d107      	bne.n	8005fc8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005fc6:	e18d      	b.n	80062e4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fd2:	d914      	bls.n	8005ffe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005fda:	3301      	adds	r3, #1
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d903      	bls.n	8005ff6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	220d      	movs	r2, #13
 8005ff2:	701a      	strb	r2, [r3, #0]
      break;
 8005ff4:	e176      	b.n	80062e4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	701a      	strb	r2, [r3, #0]
      break;
 8005ffc:	e172      	b.n	80062e4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006004:	f103 020a 	add.w	r2, r3, #10
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800600e:	200a      	movs	r0, #10
 8006010:	f001 fd60 	bl	8007ad4 <USBH_Delay>
      break;
 8006014:	e166      	b.n	80062e4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006026:	2104      	movs	r1, #4
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800602c:	2064      	movs	r0, #100	; 0x64
 800602e:	f001 fd51 	bl	8007ad4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f001 fc20 	bl	8007878 <USBH_LL_GetSpeed>
 8006038:	4603      	mov	r3, r0
 800603a:	461a      	mov	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2205      	movs	r2, #5
 8006046:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006048:	2100      	movs	r1, #0
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f001 fa2b 	bl	80074a6 <USBH_AllocPipe>
 8006050:	4603      	mov	r3, r0
 8006052:	461a      	mov	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006058:	2180      	movs	r1, #128	; 0x80
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 fa23 	bl	80074a6 <USBH_AllocPipe>
 8006060:	4603      	mov	r3, r0
 8006062:	461a      	mov	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	7919      	ldrb	r1, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800607c:	b292      	uxth	r2, r2
 800607e:	9202      	str	r2, [sp, #8]
 8006080:	2200      	movs	r2, #0
 8006082:	9201      	str	r2, [sp, #4]
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	4603      	mov	r3, r0
 8006088:	2280      	movs	r2, #128	; 0x80
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f001 f9dc 	bl	8007448 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	7959      	ldrb	r1, [r3, #5]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80060a4:	b292      	uxth	r2, r2
 80060a6:	9202      	str	r2, [sp, #8]
 80060a8:	2200      	movs	r2, #0
 80060aa:	9201      	str	r2, [sp, #4]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	4603      	mov	r3, r0
 80060b0:	2200      	movs	r2, #0
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 f9c8 	bl	8007448 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060b8:	e114      	b.n	80062e4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f918 	bl	80062f0 <USBH_HandleEnum>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80060c4:	7bbb      	ldrb	r3, [r7, #14]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f040 80fe 	bne.w	80062ca <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d103      	bne.n	80060e8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2208      	movs	r2, #8
 80060e4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80060e6:	e0f0      	b.n	80062ca <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2207      	movs	r2, #7
 80060ec:	701a      	strb	r2, [r3, #0]
      break;
 80060ee:	e0ec      	b.n	80062ca <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80e9 	beq.w	80062ce <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006102:	2101      	movs	r1, #1
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2208      	movs	r2, #8
 800610c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800610e:	e0de      	b.n	80062ce <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006116:	b29b      	uxth	r3, r3
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fc2c 	bl	8006978 <USBH_SetCfg>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	f040 80d5 	bne.w	80062d2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2209      	movs	r2, #9
 800612c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800612e:	e0d0      	b.n	80062d2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b00      	cmp	r3, #0
 800613c:	d016      	beq.n	800616c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800613e:	2101      	movs	r1, #1
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fc3c 	bl	80069be <USBH_SetFeature>
 8006146:	4603      	mov	r3, r0
 8006148:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800614a:	7bbb      	ldrb	r3, [r7, #14]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d103      	bne.n	800615a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	220a      	movs	r2, #10
 8006156:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006158:	e0bd      	b.n	80062d6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800615a:	7bbb      	ldrb	r3, [r7, #14]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b03      	cmp	r3, #3
 8006160:	f040 80b9 	bne.w	80062d6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	220a      	movs	r2, #10
 8006168:	701a      	strb	r2, [r3, #0]
      break;
 800616a:	e0b4      	b.n	80062d6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	220a      	movs	r2, #10
 8006170:	701a      	strb	r2, [r3, #0]
      break;
 8006172:	e0b0      	b.n	80062d6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 80ad 	beq.w	80062da <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006188:	2300      	movs	r3, #0
 800618a:	73fb      	strb	r3, [r7, #15]
 800618c:	e016      	b.n	80061bc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800618e:	7bfa      	ldrb	r2, [r7, #15]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	32de      	adds	r2, #222	; 0xde
 8006194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006198:	791a      	ldrb	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d108      	bne.n	80061b6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80061a4:	7bfa      	ldrb	r2, [r7, #15]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	32de      	adds	r2, #222	; 0xde
 80061aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80061b4:	e005      	b.n	80061c2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	3301      	adds	r3, #1
 80061ba:	73fb      	strb	r3, [r7, #15]
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0e5      	beq.n	800618e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d016      	beq.n	80061fa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d109      	bne.n	80061f2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2206      	movs	r2, #6
 80061e2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061ea:	2103      	movs	r1, #3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80061f0:	e073      	b.n	80062da <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	220d      	movs	r2, #13
 80061f6:	701a      	strb	r2, [r3, #0]
      break;
 80061f8:	e06f      	b.n	80062da <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	220d      	movs	r2, #13
 80061fe:	701a      	strb	r2, [r3, #0]
      break;
 8006200:	e06b      	b.n	80062da <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d017      	beq.n	800623c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
 8006218:	4603      	mov	r3, r0
 800621a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800621c:	7bbb      	ldrb	r3, [r7, #14]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d103      	bne.n	800622c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	220b      	movs	r2, #11
 8006228:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800622a:	e058      	b.n	80062de <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d154      	bne.n	80062de <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	220d      	movs	r2, #13
 8006238:	701a      	strb	r2, [r3, #0]
      break;
 800623a:	e050      	b.n	80062de <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	220d      	movs	r2, #13
 8006240:	701a      	strb	r2, [r3, #0]
      break;
 8006242:	e04c      	b.n	80062de <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d049      	beq.n	80062e2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	4798      	blx	r3
      }
      break;
 800625a:	e042      	b.n	80062e2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff fd67 	bl	8005d38 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d009      	beq.n	8006288 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006298:	2105      	movs	r1, #5
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d107      	bne.n	80062ba <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fe20 	bl	8005ef8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80062b8:	e014      	b.n	80062e4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 faa6 	bl	800780c <USBH_LL_Start>
      break;
 80062c0:	e010      	b.n	80062e4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80062c2:	bf00      	nop
 80062c4:	e00e      	b.n	80062e4 <USBH_Process+0x3cc>
      break;
 80062c6:	bf00      	nop
 80062c8:	e00c      	b.n	80062e4 <USBH_Process+0x3cc>
      break;
 80062ca:	bf00      	nop
 80062cc:	e00a      	b.n	80062e4 <USBH_Process+0x3cc>
    break;
 80062ce:	bf00      	nop
 80062d0:	e008      	b.n	80062e4 <USBH_Process+0x3cc>
      break;
 80062d2:	bf00      	nop
 80062d4:	e006      	b.n	80062e4 <USBH_Process+0x3cc>
      break;
 80062d6:	bf00      	nop
 80062d8:	e004      	b.n	80062e4 <USBH_Process+0x3cc>
      break;
 80062da:	bf00      	nop
 80062dc:	e002      	b.n	80062e4 <USBH_Process+0x3cc>
      break;
 80062de:	bf00      	nop
 80062e0:	e000      	b.n	80062e4 <USBH_Process+0x3cc>
      break;
 80062e2:	bf00      	nop
  }
  return USBH_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop

080062f0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af04      	add	r7, sp, #16
 80062f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80062f8:	2301      	movs	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	2b07      	cmp	r3, #7
 8006306:	f200 81c1 	bhi.w	800668c <USBH_HandleEnum+0x39c>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <USBH_HandleEnum+0x20>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006331 	.word	0x08006331
 8006314:	080063ef 	.word	0x080063ef
 8006318:	08006459 	.word	0x08006459
 800631c:	080064e7 	.word	0x080064e7
 8006320:	08006551 	.word	0x08006551
 8006324:	080065c1 	.word	0x080065c1
 8006328:	08006607 	.word	0x08006607
 800632c:	0800664d 	.word	0x0800664d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006330:	2108      	movs	r1, #8
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa50 	bl	80067d8 <USBH_Get_DevDesc>
 8006338:	4603      	mov	r3, r0
 800633a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d130      	bne.n	80063a4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	7919      	ldrb	r1, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006366:	b292      	uxth	r2, r2
 8006368:	9202      	str	r2, [sp, #8]
 800636a:	2200      	movs	r2, #0
 800636c:	9201      	str	r2, [sp, #4]
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	4603      	mov	r3, r0
 8006372:	2280      	movs	r2, #128	; 0x80
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 f867 	bl	8007448 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	7959      	ldrb	r1, [r3, #5]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800638e:	b292      	uxth	r2, r2
 8006390:	9202      	str	r2, [sp, #8]
 8006392:	2200      	movs	r2, #0
 8006394:	9201      	str	r2, [sp, #4]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	4603      	mov	r3, r0
 800639a:	2200      	movs	r2, #0
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 f853 	bl	8007448 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80063a2:	e175      	b.n	8006690 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	f040 8172 	bne.w	8006690 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063b2:	3301      	adds	r3, #1
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d903      	bls.n	80063ce <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	220d      	movs	r2, #13
 80063ca:	701a      	strb	r2, [r3, #0]
      break;
 80063cc:	e160      	b.n	8006690 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	795b      	ldrb	r3, [r3, #5]
 80063d2:	4619      	mov	r1, r3
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 f887 	bl	80074e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	791b      	ldrb	r3, [r3, #4]
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 f881 	bl	80074e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	701a      	strb	r2, [r3, #0]
      break;
 80063ec:	e150      	b.n	8006690 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80063ee:	2112      	movs	r1, #18
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f9f1 	bl	80067d8 <USBH_Get_DevDesc>
 80063f6:	4603      	mov	r3, r0
 80063f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063fa:	7bbb      	ldrb	r3, [r7, #14]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d103      	bne.n	8006408 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006406:	e145      	b.n	8006694 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006408:	7bbb      	ldrb	r3, [r7, #14]
 800640a:	2b03      	cmp	r3, #3
 800640c:	f040 8142 	bne.w	8006694 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006416:	3301      	adds	r3, #1
 8006418:	b2da      	uxtb	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006426:	2b03      	cmp	r3, #3
 8006428:	d903      	bls.n	8006432 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	220d      	movs	r2, #13
 800642e:	701a      	strb	r2, [r3, #0]
      break;
 8006430:	e130      	b.n	8006694 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	795b      	ldrb	r3, [r3, #5]
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 f855 	bl	80074e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	791b      	ldrb	r3, [r3, #4]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 f84f 	bl	80074e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	701a      	strb	r2, [r3, #0]
      break;
 8006456:	e11d      	b.n	8006694 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006458:	2101      	movs	r1, #1
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fa68 	bl	8006930 <USBH_SetAddress>
 8006460:	4603      	mov	r3, r0
 8006462:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d132      	bne.n	80064d0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800646a:	2002      	movs	r0, #2
 800646c:	f001 fb32 	bl	8007ad4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2203      	movs	r2, #3
 800647c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	7919      	ldrb	r1, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006492:	b292      	uxth	r2, r2
 8006494:	9202      	str	r2, [sp, #8]
 8006496:	2200      	movs	r2, #0
 8006498:	9201      	str	r2, [sp, #4]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	4603      	mov	r3, r0
 800649e:	2280      	movs	r2, #128	; 0x80
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 ffd1 	bl	8007448 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	7959      	ldrb	r1, [r3, #5]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064ba:	b292      	uxth	r2, r2
 80064bc:	9202      	str	r2, [sp, #8]
 80064be:	2200      	movs	r2, #0
 80064c0:	9201      	str	r2, [sp, #4]
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	4603      	mov	r3, r0
 80064c6:	2200      	movs	r2, #0
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 ffbd 	bl	8007448 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80064ce:	e0e3      	b.n	8006698 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	f040 80e0 	bne.w	8006698 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	220d      	movs	r2, #13
 80064dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	705a      	strb	r2, [r3, #1]
      break;
 80064e4:	e0d8      	b.n	8006698 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80064e6:	2109      	movs	r1, #9
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f99d 	bl	8006828 <USBH_Get_CfgDesc>
 80064ee:	4603      	mov	r3, r0
 80064f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064f2:	7bbb      	ldrb	r3, [r7, #14]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d103      	bne.n	8006500 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2204      	movs	r2, #4
 80064fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80064fe:	e0cd      	b.n	800669c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	2b03      	cmp	r3, #3
 8006504:	f040 80ca 	bne.w	800669c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800650e:	3301      	adds	r3, #1
 8006510:	b2da      	uxtb	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800651e:	2b03      	cmp	r3, #3
 8006520:	d903      	bls.n	800652a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	220d      	movs	r2, #13
 8006526:	701a      	strb	r2, [r3, #0]
      break;
 8006528:	e0b8      	b.n	800669c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	795b      	ldrb	r3, [r3, #5]
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 ffd9 	bl	80074e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	791b      	ldrb	r3, [r3, #4]
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 ffd3 	bl	80074e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	701a      	strb	r2, [r3, #0]
      break;
 800654e:	e0a5      	b.n	800669c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f965 	bl	8006828 <USBH_Get_CfgDesc>
 800655e:	4603      	mov	r3, r0
 8006560:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006562:	7bbb      	ldrb	r3, [r7, #14]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2205      	movs	r2, #5
 800656c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800656e:	e097      	b.n	80066a0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	2b03      	cmp	r3, #3
 8006574:	f040 8094 	bne.w	80066a0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800657e:	3301      	adds	r3, #1
 8006580:	b2da      	uxtb	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800658e:	2b03      	cmp	r3, #3
 8006590:	d903      	bls.n	800659a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	220d      	movs	r2, #13
 8006596:	701a      	strb	r2, [r3, #0]
      break;
 8006598:	e082      	b.n	80066a0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	795b      	ldrb	r3, [r3, #5]
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 ffa1 	bl	80074e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	791b      	ldrb	r3, [r3, #4]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 ff9b 	bl	80074e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]
      break;
 80065be:	e06f      	b.n	80066a0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d019      	beq.n	80065fe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80065d6:	23ff      	movs	r3, #255	; 0xff
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f949 	bl	8006870 <USBH_Get_StringDesc>
 80065de:	4603      	mov	r3, r0
 80065e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d103      	bne.n	80065f0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2206      	movs	r2, #6
 80065ec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80065ee:	e059      	b.n	80066a4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d156      	bne.n	80066a4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2206      	movs	r2, #6
 80065fa:	705a      	strb	r2, [r3, #1]
      break;
 80065fc:	e052      	b.n	80066a4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2206      	movs	r2, #6
 8006602:	705a      	strb	r2, [r3, #1]
      break;
 8006604:	e04e      	b.n	80066a4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800660c:	2b00      	cmp	r3, #0
 800660e:	d019      	beq.n	8006644 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800661c:	23ff      	movs	r3, #255	; 0xff
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f926 	bl	8006870 <USBH_Get_StringDesc>
 8006624:	4603      	mov	r3, r0
 8006626:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2207      	movs	r2, #7
 8006632:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006634:	e038      	b.n	80066a8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	2b03      	cmp	r3, #3
 800663a:	d135      	bne.n	80066a8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2207      	movs	r2, #7
 8006640:	705a      	strb	r2, [r3, #1]
      break;
 8006642:	e031      	b.n	80066a8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2207      	movs	r2, #7
 8006648:	705a      	strb	r2, [r3, #1]
      break;
 800664a:	e02d      	b.n	80066a8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006652:	2b00      	cmp	r3, #0
 8006654:	d017      	beq.n	8006686 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006662:	23ff      	movs	r3, #255	; 0xff
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f903 	bl	8006870 <USBH_Get_StringDesc>
 800666a:	4603      	mov	r3, r0
 800666c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d102      	bne.n	800667a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006678:	e018      	b.n	80066ac <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800667a:	7bbb      	ldrb	r3, [r7, #14]
 800667c:	2b03      	cmp	r3, #3
 800667e:	d115      	bne.n	80066ac <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	73fb      	strb	r3, [r7, #15]
      break;
 8006684:	e012      	b.n	80066ac <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	73fb      	strb	r3, [r7, #15]
      break;
 800668a:	e00f      	b.n	80066ac <USBH_HandleEnum+0x3bc>

    default:
      break;
 800668c:	bf00      	nop
 800668e:	e00e      	b.n	80066ae <USBH_HandleEnum+0x3be>
      break;
 8006690:	bf00      	nop
 8006692:	e00c      	b.n	80066ae <USBH_HandleEnum+0x3be>
      break;
 8006694:	bf00      	nop
 8006696:	e00a      	b.n	80066ae <USBH_HandleEnum+0x3be>
      break;
 8006698:	bf00      	nop
 800669a:	e008      	b.n	80066ae <USBH_HandleEnum+0x3be>
      break;
 800669c:	bf00      	nop
 800669e:	e006      	b.n	80066ae <USBH_HandleEnum+0x3be>
      break;
 80066a0:	bf00      	nop
 80066a2:	e004      	b.n	80066ae <USBH_HandleEnum+0x3be>
      break;
 80066a4:	bf00      	nop
 80066a6:	e002      	b.n	80066ae <USBH_HandleEnum+0x3be>
      break;
 80066a8:	bf00      	nop
 80066aa:	e000      	b.n	80066ae <USBH_HandleEnum+0x3be>
      break;
 80066ac:	bf00      	nop
  }
  return Status;
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f804 	bl	80066fa <USBH_HandleSof>
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b0b      	cmp	r3, #11
 800670a:	d10a      	bne.n	8006722 <USBH_HandleSof+0x28>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	4798      	blx	r3
  }
}
 8006722:	bf00      	nop
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800673a:	bf00      	nop
}
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006756:	bf00      	nop
}
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 f846 	bl	8007842 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	791b      	ldrb	r3, [r3, #4]
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fe93 	bl	80074e8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	795b      	ldrb	r3, [r3, #5]
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fe8d 	bl	80074e8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af02      	add	r7, sp, #8
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	4613      	mov	r3, r2
 80067f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067f6:	2100      	movs	r1, #0
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f864 	bl	80068c6 <USBH_GetDescriptor>
 80067fe:	4603      	mov	r3, r0
 8006800:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006814:	78fa      	ldrb	r2, [r7, #3]
 8006816:	b292      	uxth	r2, r2
 8006818:	4619      	mov	r1, r3
 800681a:	f000 f919 	bl	8006a50 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800681e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af02      	add	r7, sp, #8
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	331c      	adds	r3, #28
 8006838:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800683a:	887b      	ldrh	r3, [r7, #2]
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006844:	2100      	movs	r1, #0
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f83d 	bl	80068c6 <USBH_GetDescriptor>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d107      	bne.n	8006866 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006856:	887b      	ldrh	r3, [r7, #2]
 8006858:	461a      	mov	r2, r3
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f989 	bl	8006b74 <USBH_ParseCfgDesc>
 8006862:	4603      	mov	r3, r0
 8006864:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006866:	7bfb      	ldrb	r3, [r7, #15]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af02      	add	r7, sp, #8
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	461a      	mov	r2, r3
 800687c:	460b      	mov	r3, r1
 800687e:	72fb      	strb	r3, [r7, #11]
 8006880:	4613      	mov	r3, r2
 8006882:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006884:	7afb      	ldrb	r3, [r7, #11]
 8006886:	b29b      	uxth	r3, r3
 8006888:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800688c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006894:	893b      	ldrh	r3, [r7, #8]
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	460b      	mov	r3, r1
 800689a:	2100      	movs	r1, #0
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f812 	bl	80068c6 <USBH_GetDescriptor>
 80068a2:	4603      	mov	r3, r0
 80068a4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d107      	bne.n	80068bc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80068b2:	893a      	ldrh	r2, [r7, #8]
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fb26 	bl	8006f08 <USBH_ParseStringDesc>
  }

  return status;
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	607b      	str	r3, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	72fb      	strb	r3, [r7, #11]
 80068d4:	4613      	mov	r3, r2
 80068d6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	789b      	ldrb	r3, [r3, #2]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d11c      	bne.n	800691a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80068e0:	7afb      	ldrb	r3, [r7, #11]
 80068e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2206      	movs	r2, #6
 80068f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	893a      	ldrh	r2, [r7, #8]
 80068f6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80068f8:	893b      	ldrh	r3, [r7, #8]
 80068fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80068fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006902:	d104      	bne.n	800690e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f240 4209 	movw	r2, #1033	; 0x409
 800690a:	829a      	strh	r2, [r3, #20]
 800690c:	e002      	b.n	8006914 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8b3a      	ldrh	r2, [r7, #24]
 8006918:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800691a:	8b3b      	ldrh	r3, [r7, #24]
 800691c:	461a      	mov	r2, r3
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 fb3f 	bl	8006fa4 <USBH_CtlReq>
 8006926:	4603      	mov	r3, r0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	789b      	ldrb	r3, [r3, #2]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d10f      	bne.n	8006964 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2205      	movs	r2, #5
 800694e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	b29a      	uxth	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006964:	2200      	movs	r2, #0
 8006966:	2100      	movs	r1, #0
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fb1b 	bl	8006fa4 <USBH_CtlReq>
 800696e:	4603      	mov	r3, r0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	789b      	ldrb	r3, [r3, #2]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d10e      	bne.n	80069aa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2209      	movs	r2, #9
 8006996:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	887a      	ldrh	r2, [r7, #2]
 800699c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80069aa:	2200      	movs	r2, #0
 80069ac:	2100      	movs	r1, #0
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 faf8 	bl	8006fa4 <USBH_CtlReq>
 80069b4:	4603      	mov	r3, r0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	460b      	mov	r3, r1
 80069c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	789b      	ldrb	r3, [r3, #2]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d10f      	bne.n	80069f2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2203      	movs	r2, #3
 80069dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80069f2:	2200      	movs	r2, #0
 80069f4:	2100      	movs	r1, #0
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fad4 	bl	8006fa4 <USBH_CtlReq>
 80069fc:	4603      	mov	r3, r0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b082      	sub	sp, #8
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	789b      	ldrb	r3, [r3, #2]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d10f      	bne.n	8006a3a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fab0 	bl	8006fa4 <USBH_CtlReq>
 8006a44:	4603      	mov	r3, r0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	781a      	ldrb	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	785a      	ldrb	r2, [r3, #1]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	3302      	adds	r3, #2
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	3303      	adds	r3, #3
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	021b      	lsls	r3, r3, #8
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	4313      	orrs	r3, r2
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	791a      	ldrb	r2, [r3, #4]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	795a      	ldrb	r2, [r3, #5]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	799a      	ldrb	r2, [r3, #6]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	79da      	ldrb	r2, [r3, #7]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	79db      	ldrb	r3, [r3, #7]
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	dc0f      	bgt.n	8006ad2 <USBH_ParseDevDesc+0x82>
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	db14      	blt.n	8006ae0 <USBH_ParseDevDesc+0x90>
 8006ab6:	3b08      	subs	r3, #8
 8006ab8:	4a2d      	ldr	r2, [pc, #180]	; (8006b70 <USBH_ParseDevDesc+0x120>)
 8006aba:	fa22 f303 	lsr.w	r3, r2, r3
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bf14      	ite	ne
 8006ac6:	2301      	movne	r3, #1
 8006ac8:	2300      	moveq	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d102      	bne.n	8006ad6 <USBH_ParseDevDesc+0x86>
 8006ad0:	e006      	b.n	8006ae0 <USBH_ParseDevDesc+0x90>
 8006ad2:	2b40      	cmp	r3, #64	; 0x40
 8006ad4:	d104      	bne.n	8006ae0 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	79da      	ldrb	r2, [r3, #7]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	71da      	strb	r2, [r3, #7]
      break;
 8006ade:	e003      	b.n	8006ae8 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2240      	movs	r2, #64	; 0x40
 8006ae4:	71da      	strb	r2, [r3, #7]
      break;
 8006ae6:	bf00      	nop
  }

  if (length > 8U)
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	2b08      	cmp	r3, #8
 8006aec:	d939      	bls.n	8006b62 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	3308      	adds	r3, #8
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	3309      	adds	r3, #9
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	021b      	lsls	r3, r3, #8
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	4313      	orrs	r3, r2
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	330a      	adds	r3, #10
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	330b      	adds	r3, #11
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	021b      	lsls	r3, r3, #8
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	330d      	adds	r3, #13
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	021b      	lsls	r3, r3, #8
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	7b9a      	ldrb	r2, [r3, #14]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	7bda      	ldrb	r2, [r3, #15]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	7c1a      	ldrb	r2, [r3, #16]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	7c5a      	ldrb	r2, [r3, #17]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	745a      	strb	r2, [r3, #17]
  }
}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	01000101 	.word	0x01000101

08006b74 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08c      	sub	sp, #48	; 0x30
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b88:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	781a      	ldrb	r2, [r3, #0]
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	785a      	ldrb	r2, [r3, #1]
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	3302      	adds	r3, #2
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	3303      	adds	r3, #3
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	021b      	lsls	r3, r3, #8
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd0:	bf28      	it	cs
 8006bd2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	791a      	ldrb	r2, [r3, #4]
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	795a      	ldrb	r2, [r3, #5]
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	799a      	ldrb	r2, [r3, #6]
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	79da      	ldrb	r2, [r3, #7]
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	7a1a      	ldrb	r2, [r3, #8]
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b09      	cmp	r3, #9
 8006c0a:	d002      	beq.n	8006c12 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	2209      	movs	r2, #9
 8006c10:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006c12:	88fb      	ldrh	r3, [r7, #6]
 8006c14:	2b09      	cmp	r3, #9
 8006c16:	f240 809d 	bls.w	8006d54 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006c1a:	2309      	movs	r3, #9
 8006c1c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c22:	e081      	b.n	8006d28 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006c24:	f107 0316 	add.w	r3, r7, #22
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c2c:	f000 f99f 	bl	8006f6e <USBH_GetNextDesc>
 8006c30:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	785b      	ldrb	r3, [r3, #1]
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d176      	bne.n	8006d28 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b09      	cmp	r3, #9
 8006c40:	d002      	beq.n	8006c48 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c44:	2209      	movs	r2, #9
 8006c46:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c4c:	221a      	movs	r2, #26
 8006c4e:	fb02 f303 	mul.w	r3, r2, r3
 8006c52:	3308      	adds	r3, #8
 8006c54:	6a3a      	ldr	r2, [r7, #32]
 8006c56:	4413      	add	r3, r2
 8006c58:	3302      	adds	r3, #2
 8006c5a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c5e:	69f8      	ldr	r0, [r7, #28]
 8006c60:	f000 f87e 	bl	8006d60 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c6e:	e043      	b.n	8006cf8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006c70:	f107 0316 	add.w	r3, r7, #22
 8006c74:	4619      	mov	r1, r3
 8006c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c78:	f000 f979 	bl	8006f6e <USBH_GetNextDesc>
 8006c7c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	2b05      	cmp	r3, #5
 8006c84:	d138      	bne.n	8006cf8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	795b      	ldrb	r3, [r3, #5]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d10f      	bne.n	8006cae <USBH_ParseCfgDesc+0x13a>
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	799b      	ldrb	r3, [r3, #6]
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d10b      	bne.n	8006cae <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	79db      	ldrb	r3, [r3, #7]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10f      	bne.n	8006cbe <USBH_ParseCfgDesc+0x14a>
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b09      	cmp	r3, #9
 8006ca4:	d00b      	beq.n	8006cbe <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	2209      	movs	r2, #9
 8006caa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006cac:	e007      	b.n	8006cbe <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b07      	cmp	r3, #7
 8006cb4:	d004      	beq.n	8006cc0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	2207      	movs	r2, #7
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	e000      	b.n	8006cc0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006cbe:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cc4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006cc8:	3201      	adds	r2, #1
 8006cca:	00d2      	lsls	r2, r2, #3
 8006ccc:	211a      	movs	r1, #26
 8006cce:	fb01 f303 	mul.w	r3, r1, r3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	6a3a      	ldr	r2, [r7, #32]
 8006cd8:	4413      	add	r3, r2
 8006cda:	3304      	adds	r3, #4
 8006cdc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce0:	69b9      	ldr	r1, [r7, #24]
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 f86b 	bl	8006dbe <USBH_ParseEPDesc>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006cee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	791b      	ldrb	r3, [r3, #4]
 8006cfc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d204      	bcs.n	8006d0e <USBH_ParseCfgDesc+0x19a>
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	885a      	ldrh	r2, [r3, #2]
 8006d08:	8afb      	ldrh	r3, [r7, #22]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d8b0      	bhi.n	8006c70 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	791b      	ldrb	r3, [r3, #4]
 8006d12:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d201      	bcs.n	8006d1e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e01c      	b.n	8006d58 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d22:	3301      	adds	r3, #1
 8006d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d805      	bhi.n	8006d3c <USBH_ParseCfgDesc+0x1c8>
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	885a      	ldrh	r2, [r3, #2]
 8006d34:	8afb      	ldrh	r3, [r7, #22]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	f63f af74 	bhi.w	8006c24 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	791b      	ldrb	r3, [r3, #4]
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	bf28      	it	cs
 8006d44:	2302      	movcs	r3, #2
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d201      	bcs.n	8006d54 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e001      	b.n	8006d58 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006d54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3730      	adds	r7, #48	; 0x30
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781a      	ldrb	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	785a      	ldrb	r2, [r3, #1]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	789a      	ldrb	r2, [r3, #2]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	78da      	ldrb	r2, [r3, #3]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	791a      	ldrb	r2, [r3, #4]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	795a      	ldrb	r2, [r3, #5]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	799a      	ldrb	r2, [r3, #6]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	79da      	ldrb	r2, [r3, #7]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	7a1a      	ldrb	r2, [r3, #8]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	721a      	strb	r2, [r3, #8]
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b087      	sub	sp, #28
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	781a      	ldrb	r2, [r3, #0]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	785a      	ldrb	r2, [r3, #1]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	789a      	ldrb	r2, [r3, #2]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	78da      	ldrb	r2, [r3, #3]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3304      	adds	r3, #4
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3305      	adds	r3, #5
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	4313      	orrs	r3, r2
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	799a      	ldrb	r2, [r3, #6]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	889b      	ldrh	r3, [r3, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	75fb      	strb	r3, [r7, #23]
 8006e1e:	e033      	b.n	8006e88 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	889b      	ldrh	r3, [r3, #4]
 8006e24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e28:	f023 0307 	bic.w	r3, r3, #7
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	889b      	ldrh	r3, [r3, #4]
 8006e36:	b21a      	sxth	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	b299      	uxth	r1, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3305      	adds	r3, #5
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	021b      	lsls	r3, r3, #8
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d110      	bne.n	8006e7a <USBH_ParseEPDesc+0xbc>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	b299      	uxth	r1, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3305      	adds	r3, #5
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	021b      	lsls	r3, r3, #8
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	b21b      	sxth	r3, r3
 8006e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e76:	b21b      	sxth	r3, r3
 8006e78:	e001      	b.n	8006e7e <USBH_ParseEPDesc+0xc0>
 8006e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	b21b      	sxth	r3, r3
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d116      	bne.n	8006ec0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	78db      	ldrb	r3, [r3, #3]
 8006e96:	f003 0303 	and.w	r3, r3, #3
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d005      	beq.n	8006eaa <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	78db      	ldrb	r3, [r3, #3]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d127      	bne.n	8006efa <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	799b      	ldrb	r3, [r3, #6]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <USBH_ParseEPDesc+0xfc>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	799b      	ldrb	r3, [r3, #6]
 8006eb6:	2b10      	cmp	r3, #16
 8006eb8:	d91f      	bls.n	8006efa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	75fb      	strb	r3, [r7, #23]
 8006ebe:	e01c      	b.n	8006efa <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	78db      	ldrb	r3, [r3, #3]
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d10a      	bne.n	8006ee2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	799b      	ldrb	r3, [r3, #6]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <USBH_ParseEPDesc+0x11e>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	799b      	ldrb	r3, [r3, #6]
 8006ed8:	2b10      	cmp	r3, #16
 8006eda:	d90e      	bls.n	8006efa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006edc:	2303      	movs	r3, #3
 8006ede:	75fb      	strb	r3, [r7, #23]
 8006ee0:	e00b      	b.n	8006efa <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	78db      	ldrb	r3, [r3, #3]
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d105      	bne.n	8006efa <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	799b      	ldrb	r3, [r3, #6]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	371c      	adds	r7, #28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	4613      	mov	r3, r2
 8006f14:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d120      	bne.n	8006f62 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	1e9a      	subs	r2, r3, #2
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	bf28      	it	cs
 8006f2c:	4613      	movcs	r3, r2
 8006f2e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3302      	adds	r3, #2
 8006f34:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006f36:	2300      	movs	r3, #0
 8006f38:	82fb      	strh	r3, [r7, #22]
 8006f3a:	e00b      	b.n	8006f54 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006f3c:	8afb      	ldrh	r3, [r7, #22]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	781a      	ldrb	r2, [r3, #0]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006f4e:	8afb      	ldrh	r3, [r7, #22]
 8006f50:	3302      	adds	r3, #2
 8006f52:	82fb      	strh	r3, [r7, #22]
 8006f54:	8afa      	ldrh	r2, [r7, #22]
 8006f56:	8abb      	ldrh	r3, [r7, #20]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d3ef      	bcc.n	8006f3c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]
  }
}
 8006f62:	bf00      	nop
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	881a      	ldrh	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	4413      	add	r3, r2
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4413      	add	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f96:	68fb      	ldr	r3, [r7, #12]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	789b      	ldrb	r3, [r3, #2]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d002      	beq.n	8006fc4 <USBH_CtlReq+0x20>
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d00f      	beq.n	8006fe2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006fc2:	e027      	b.n	8007014 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	88fa      	ldrh	r2, [r7, #6]
 8006fce:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe0:	e018      	b.n	8007014 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f81c 	bl	8007020 <USBH_HandleControl>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <USBH_CtlReq+0x54>
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d106      	bne.n	8007006 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	761a      	strb	r2, [r3, #24]
      break;
 8007004:	e005      	b.n	8007012 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007006:	7dfb      	ldrb	r3, [r7, #23]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d102      	bne.n	8007012 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2201      	movs	r2, #1
 8007010:	709a      	strb	r2, [r3, #2]
      break;
 8007012:	bf00      	nop
  }
  return status;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af02      	add	r7, sp, #8
 8007026:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007028:	2301      	movs	r3, #1
 800702a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800702c:	2300      	movs	r3, #0
 800702e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	7e1b      	ldrb	r3, [r3, #24]
 8007034:	3b01      	subs	r3, #1
 8007036:	2b0a      	cmp	r3, #10
 8007038:	f200 8156 	bhi.w	80072e8 <USBH_HandleControl+0x2c8>
 800703c:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <USBH_HandleControl+0x24>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	08007071 	.word	0x08007071
 8007048:	0800708b 	.word	0x0800708b
 800704c:	080070f5 	.word	0x080070f5
 8007050:	0800711b 	.word	0x0800711b
 8007054:	08007153 	.word	0x08007153
 8007058:	0800717d 	.word	0x0800717d
 800705c:	080071cf 	.word	0x080071cf
 8007060:	080071f1 	.word	0x080071f1
 8007064:	0800722d 	.word	0x0800722d
 8007068:	08007253 	.word	0x08007253
 800706c:	08007291 	.word	0x08007291
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f103 0110 	add.w	r1, r3, #16
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	795b      	ldrb	r3, [r3, #5]
 800707a:	461a      	mov	r2, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f943 	bl	8007308 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2202      	movs	r2, #2
 8007086:	761a      	strb	r2, [r3, #24]
      break;
 8007088:	e139      	b.n	80072fe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	795b      	ldrb	r3, [r3, #5]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fcc5 	bl	8007a20 <USBH_LL_GetURBState>
 8007096:	4603      	mov	r3, r0
 8007098:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800709a:	7bbb      	ldrb	r3, [r7, #14]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d11e      	bne.n	80070de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	7c1b      	ldrb	r3, [r3, #16]
 80070a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	8adb      	ldrh	r3, [r3, #22]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80070b2:	7b7b      	ldrb	r3, [r7, #13]
 80070b4:	2b80      	cmp	r3, #128	; 0x80
 80070b6:	d103      	bne.n	80070c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2203      	movs	r2, #3
 80070bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070be:	e115      	b.n	80072ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2205      	movs	r2, #5
 80070c4:	761a      	strb	r2, [r3, #24]
      break;
 80070c6:	e111      	b.n	80072ec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80070c8:	7b7b      	ldrb	r3, [r7, #13]
 80070ca:	2b80      	cmp	r3, #128	; 0x80
 80070cc:	d103      	bne.n	80070d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2209      	movs	r2, #9
 80070d2:	761a      	strb	r2, [r3, #24]
      break;
 80070d4:	e10a      	b.n	80072ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2207      	movs	r2, #7
 80070da:	761a      	strb	r2, [r3, #24]
      break;
 80070dc:	e106      	b.n	80072ec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d003      	beq.n	80070ec <USBH_HandleControl+0xcc>
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	f040 8100 	bne.w	80072ec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	220b      	movs	r2, #11
 80070f0:	761a      	strb	r2, [r3, #24]
      break;
 80070f2:	e0fb      	b.n	80072ec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6899      	ldr	r1, [r3, #8]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	899a      	ldrh	r2, [r3, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	791b      	ldrb	r3, [r3, #4]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f93a 	bl	8007386 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2204      	movs	r2, #4
 8007116:	761a      	strb	r2, [r3, #24]
      break;
 8007118:	e0f1      	b.n	80072fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	791b      	ldrb	r3, [r3, #4]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fc7d 	bl	8007a20 <USBH_LL_GetURBState>
 8007126:	4603      	mov	r3, r0
 8007128:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d102      	bne.n	8007136 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2209      	movs	r2, #9
 8007134:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b05      	cmp	r3, #5
 800713a:	d102      	bne.n	8007142 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800713c:	2303      	movs	r3, #3
 800713e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007140:	e0d6      	b.n	80072f0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	2b04      	cmp	r3, #4
 8007146:	f040 80d3 	bne.w	80072f0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	220b      	movs	r2, #11
 800714e:	761a      	strb	r2, [r3, #24]
      break;
 8007150:	e0ce      	b.n	80072f0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6899      	ldr	r1, [r3, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	899a      	ldrh	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	795b      	ldrb	r3, [r3, #5]
 800715e:	2001      	movs	r0, #1
 8007160:	9000      	str	r0, [sp, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f8ea 	bl	800733c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800716e:	b29a      	uxth	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2206      	movs	r2, #6
 8007178:	761a      	strb	r2, [r3, #24]
      break;
 800717a:	e0c0      	b.n	80072fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	795b      	ldrb	r3, [r3, #5]
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fc4c 	bl	8007a20 <USBH_LL_GetURBState>
 8007188:	4603      	mov	r3, r0
 800718a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d103      	bne.n	800719a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2207      	movs	r2, #7
 8007196:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007198:	e0ac      	b.n	80072f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	2b05      	cmp	r3, #5
 800719e:	d105      	bne.n	80071ac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	220c      	movs	r2, #12
 80071a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80071a6:	2303      	movs	r3, #3
 80071a8:	73fb      	strb	r3, [r7, #15]
      break;
 80071aa:	e0a3      	b.n	80072f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d103      	bne.n	80071ba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2205      	movs	r2, #5
 80071b6:	761a      	strb	r2, [r3, #24]
      break;
 80071b8:	e09c      	b.n	80072f4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	2b04      	cmp	r3, #4
 80071be:	f040 8099 	bne.w	80072f4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	220b      	movs	r2, #11
 80071c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80071c8:	2302      	movs	r3, #2
 80071ca:	73fb      	strb	r3, [r7, #15]
      break;
 80071cc:	e092      	b.n	80072f4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	791b      	ldrb	r3, [r3, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	2100      	movs	r1, #0
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f8d5 	bl	8007386 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2208      	movs	r2, #8
 80071ec:	761a      	strb	r2, [r3, #24]

      break;
 80071ee:	e086      	b.n	80072fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	791b      	ldrb	r3, [r3, #4]
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fc12 	bl	8007a20 <USBH_LL_GetURBState>
 80071fc:	4603      	mov	r3, r0
 80071fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d105      	bne.n	8007212 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	220d      	movs	r2, #13
 800720a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007210:	e072      	b.n	80072f8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	2b04      	cmp	r3, #4
 8007216:	d103      	bne.n	8007220 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	220b      	movs	r2, #11
 800721c:	761a      	strb	r2, [r3, #24]
      break;
 800721e:	e06b      	b.n	80072f8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007220:	7bbb      	ldrb	r3, [r7, #14]
 8007222:	2b05      	cmp	r3, #5
 8007224:	d168      	bne.n	80072f8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007226:	2303      	movs	r3, #3
 8007228:	73fb      	strb	r3, [r7, #15]
      break;
 800722a:	e065      	b.n	80072f8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	795b      	ldrb	r3, [r3, #5]
 8007230:	2201      	movs	r2, #1
 8007232:	9200      	str	r2, [sp, #0]
 8007234:	2200      	movs	r2, #0
 8007236:	2100      	movs	r1, #0
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f87f 	bl	800733c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007244:	b29a      	uxth	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	220a      	movs	r2, #10
 800724e:	761a      	strb	r2, [r3, #24]
      break;
 8007250:	e055      	b.n	80072fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	795b      	ldrb	r3, [r3, #5]
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fbe1 	bl	8007a20 <USBH_LL_GetURBState>
 800725e:	4603      	mov	r3, r0
 8007260:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d105      	bne.n	8007274 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	220d      	movs	r2, #13
 8007270:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007272:	e043      	b.n	80072fc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	2b02      	cmp	r3, #2
 8007278:	d103      	bne.n	8007282 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2209      	movs	r2, #9
 800727e:	761a      	strb	r2, [r3, #24]
      break;
 8007280:	e03c      	b.n	80072fc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	2b04      	cmp	r3, #4
 8007286:	d139      	bne.n	80072fc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	220b      	movs	r2, #11
 800728c:	761a      	strb	r2, [r3, #24]
      break;
 800728e:	e035      	b.n	80072fc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	7e5b      	ldrb	r3, [r3, #25]
 8007294:	3301      	adds	r3, #1
 8007296:	b2da      	uxtb	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	765a      	strb	r2, [r3, #25]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	7e5b      	ldrb	r3, [r3, #25]
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d806      	bhi.n	80072b2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80072b0:	e025      	b.n	80072fe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072b8:	2106      	movs	r1, #6
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	795b      	ldrb	r3, [r3, #5]
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f90c 	bl	80074e8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	791b      	ldrb	r3, [r3, #4]
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f906 	bl	80074e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80072e2:	2302      	movs	r3, #2
 80072e4:	73fb      	strb	r3, [r7, #15]
      break;
 80072e6:	e00a      	b.n	80072fe <USBH_HandleControl+0x2de>

    default:
      break;
 80072e8:	bf00      	nop
 80072ea:	e008      	b.n	80072fe <USBH_HandleControl+0x2de>
      break;
 80072ec:	bf00      	nop
 80072ee:	e006      	b.n	80072fe <USBH_HandleControl+0x2de>
      break;
 80072f0:	bf00      	nop
 80072f2:	e004      	b.n	80072fe <USBH_HandleControl+0x2de>
      break;
 80072f4:	bf00      	nop
 80072f6:	e002      	b.n	80072fe <USBH_HandleControl+0x2de>
      break;
 80072f8:	bf00      	nop
 80072fa:	e000      	b.n	80072fe <USBH_HandleControl+0x2de>
      break;
 80072fc:	bf00      	nop
  }

  return status;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af04      	add	r7, sp, #16
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007316:	79f9      	ldrb	r1, [r7, #7]
 8007318:	2300      	movs	r3, #0
 800731a:	9303      	str	r3, [sp, #12]
 800731c:	2308      	movs	r3, #8
 800731e:	9302      	str	r3, [sp, #8]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	2300      	movs	r3, #0
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	2300      	movs	r3, #0
 800732a:	2200      	movs	r2, #0
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 fb46 	bl	80079be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af04      	add	r7, sp, #16
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	4611      	mov	r1, r2
 8007348:	461a      	mov	r2, r3
 800734a:	460b      	mov	r3, r1
 800734c:	80fb      	strh	r3, [r7, #6]
 800734e:	4613      	mov	r3, r2
 8007350:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007360:	7979      	ldrb	r1, [r7, #5]
 8007362:	7e3b      	ldrb	r3, [r7, #24]
 8007364:	9303      	str	r3, [sp, #12]
 8007366:	88fb      	ldrh	r3, [r7, #6]
 8007368:	9302      	str	r3, [sp, #8]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	2301      	movs	r3, #1
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	2300      	movs	r3, #0
 8007374:	2200      	movs	r2, #0
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 fb21 	bl	80079be <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b088      	sub	sp, #32
 800738a:	af04      	add	r7, sp, #16
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	4611      	mov	r1, r2
 8007392:	461a      	mov	r2, r3
 8007394:	460b      	mov	r3, r1
 8007396:	80fb      	strh	r3, [r7, #6]
 8007398:	4613      	mov	r3, r2
 800739a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800739c:	7979      	ldrb	r1, [r7, #5]
 800739e:	2300      	movs	r3, #0
 80073a0:	9303      	str	r3, [sp, #12]
 80073a2:	88fb      	ldrh	r3, [r7, #6]
 80073a4:	9302      	str	r3, [sp, #8]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	9301      	str	r3, [sp, #4]
 80073aa:	2301      	movs	r3, #1
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	2300      	movs	r3, #0
 80073b0:	2201      	movs	r2, #1
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 fb03 	bl	80079be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80073b8:	2300      	movs	r3, #0

}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b088      	sub	sp, #32
 80073c6:	af04      	add	r7, sp, #16
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	4611      	mov	r1, r2
 80073ce:	461a      	mov	r2, r3
 80073d0:	460b      	mov	r3, r1
 80073d2:	80fb      	strh	r3, [r7, #6]
 80073d4:	4613      	mov	r3, r2
 80073d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80073e6:	7979      	ldrb	r1, [r7, #5]
 80073e8:	7e3b      	ldrb	r3, [r7, #24]
 80073ea:	9303      	str	r3, [sp, #12]
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	9302      	str	r3, [sp, #8]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	9301      	str	r3, [sp, #4]
 80073f4:	2301      	movs	r3, #1
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	2302      	movs	r3, #2
 80073fa:	2200      	movs	r2, #0
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 fade 	bl	80079be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af04      	add	r7, sp, #16
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	4611      	mov	r1, r2
 8007418:	461a      	mov	r2, r3
 800741a:	460b      	mov	r3, r1
 800741c:	80fb      	strh	r3, [r7, #6]
 800741e:	4613      	mov	r3, r2
 8007420:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007422:	7979      	ldrb	r1, [r7, #5]
 8007424:	2300      	movs	r3, #0
 8007426:	9303      	str	r3, [sp, #12]
 8007428:	88fb      	ldrh	r3, [r7, #6]
 800742a:	9302      	str	r3, [sp, #8]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	2301      	movs	r3, #1
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	2302      	movs	r3, #2
 8007436:	2201      	movs	r2, #1
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 fac0 	bl	80079be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af04      	add	r7, sp, #16
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	4608      	mov	r0, r1
 8007452:	4611      	mov	r1, r2
 8007454:	461a      	mov	r2, r3
 8007456:	4603      	mov	r3, r0
 8007458:	70fb      	strb	r3, [r7, #3]
 800745a:	460b      	mov	r3, r1
 800745c:	70bb      	strb	r3, [r7, #2]
 800745e:	4613      	mov	r3, r2
 8007460:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007462:	7878      	ldrb	r0, [r7, #1]
 8007464:	78ba      	ldrb	r2, [r7, #2]
 8007466:	78f9      	ldrb	r1, [r7, #3]
 8007468:	8b3b      	ldrh	r3, [r7, #24]
 800746a:	9302      	str	r3, [sp, #8]
 800746c:	7d3b      	ldrb	r3, [r7, #20]
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	7c3b      	ldrb	r3, [r7, #16]
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	4603      	mov	r3, r0
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa53 	bl	8007922 <USBH_LL_OpenPipe>

  return USBH_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007492:	78fb      	ldrb	r3, [r7, #3]
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa72 	bl	8007980 <USBH_LL_ClosePipe>

  return USBH_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f836 	bl	8007524 <USBH_GetFreePipe>
 80074b8:	4603      	mov	r3, r0
 80074ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80074bc:	89fb      	ldrh	r3, [r7, #14]
 80074be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00a      	beq.n	80074dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80074c6:	78fa      	ldrb	r2, [r7, #3]
 80074c8:	89fb      	ldrh	r3, [r7, #14]
 80074ca:	f003 030f 	and.w	r3, r3, #15
 80074ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	33e0      	adds	r3, #224	; 0xe0
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	440b      	add	r3, r1
 80074da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80074dc:	89fb      	ldrh	r3, [r7, #14]
 80074de:	b2db      	uxtb	r3, r3
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	2b0f      	cmp	r3, #15
 80074f8:	d80d      	bhi.n	8007516 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80074fa:	78fb      	ldrb	r3, [r7, #3]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	33e0      	adds	r3, #224	; 0xe0
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	78fb      	ldrb	r3, [r7, #3]
 8007508:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800750c:	6879      	ldr	r1, [r7, #4]
 800750e:	33e0      	adds	r3, #224	; 0xe0
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	440b      	add	r3, r1
 8007514:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]
 8007534:	e00f      	b.n	8007556 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	33e0      	adds	r3, #224	; 0xe0
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	b29b      	uxth	r3, r3
 800754e:	e007      	b.n	8007560 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	3301      	adds	r3, #1
 8007554:	73fb      	strb	r3, [r7, #15]
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2b0f      	cmp	r3, #15
 800755a:	d9ec      	bls.n	8007536 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800755c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007560:	4618      	mov	r0, r3
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007570:	2201      	movs	r2, #1
 8007572:	490e      	ldr	r1, [pc, #56]	; (80075ac <MX_USB_HOST_Init+0x40>)
 8007574:	480e      	ldr	r0, [pc, #56]	; (80075b0 <MX_USB_HOST_Init+0x44>)
 8007576:	f7fe fba5 	bl	8005cc4 <USBH_Init>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007580:	f7f9 fb0a 	bl	8000b98 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007584:	490b      	ldr	r1, [pc, #44]	; (80075b4 <MX_USB_HOST_Init+0x48>)
 8007586:	480a      	ldr	r0, [pc, #40]	; (80075b0 <MX_USB_HOST_Init+0x44>)
 8007588:	f7fe fc2a 	bl	8005de0 <USBH_RegisterClass>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007592:	f7f9 fb01 	bl	8000b98 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007596:	4806      	ldr	r0, [pc, #24]	; (80075b0 <MX_USB_HOST_Init+0x44>)
 8007598:	f7fe fcae 	bl	8005ef8 <USBH_Start>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80075a2:	f7f9 faf9 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80075a6:	bf00      	nop
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	080075cd 	.word	0x080075cd
 80075b0:	200001dc 	.word	0x200001dc
 80075b4:	2000000c 	.word	0x2000000c

080075b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80075bc:	4802      	ldr	r0, [pc, #8]	; (80075c8 <MX_USB_HOST_Process+0x10>)
 80075be:	f7fe fcab 	bl	8005f18 <USBH_Process>
}
 80075c2:	bf00      	nop
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	200001dc 	.word	0x200001dc

080075cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	3b01      	subs	r3, #1
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d819      	bhi.n	8007614 <USBH_UserProcess+0x48>
 80075e0:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <USBH_UserProcess+0x1c>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	08007615 	.word	0x08007615
 80075ec:	08007605 	.word	0x08007605
 80075f0:	08007615 	.word	0x08007615
 80075f4:	0800760d 	.word	0x0800760d
 80075f8:	080075fd 	.word	0x080075fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80075fc:	4b09      	ldr	r3, [pc, #36]	; (8007624 <USBH_UserProcess+0x58>)
 80075fe:	2203      	movs	r2, #3
 8007600:	701a      	strb	r2, [r3, #0]
  break;
 8007602:	e008      	b.n	8007616 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007604:	4b07      	ldr	r3, [pc, #28]	; (8007624 <USBH_UserProcess+0x58>)
 8007606:	2202      	movs	r2, #2
 8007608:	701a      	strb	r2, [r3, #0]
  break;
 800760a:	e004      	b.n	8007616 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <USBH_UserProcess+0x58>)
 800760e:	2201      	movs	r2, #1
 8007610:	701a      	strb	r2, [r3, #0]
  break;
 8007612:	e000      	b.n	8007616 <USBH_UserProcess+0x4a>

  default:
  break;
 8007614:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	200005b4 	.word	0x200005b4

08007628 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08a      	sub	sp, #40	; 0x28
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007630:	f107 0314 	add.w	r3, r7, #20
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	605a      	str	r2, [r3, #4]
 800763a:	609a      	str	r2, [r3, #8]
 800763c:	60da      	str	r2, [r3, #12]
 800763e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007648:	d147      	bne.n	80076da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800764a:	2300      	movs	r3, #0
 800764c:	613b      	str	r3, [r7, #16]
 800764e:	4b25      	ldr	r3, [pc, #148]	; (80076e4 <HAL_HCD_MspInit+0xbc>)
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	4a24      	ldr	r2, [pc, #144]	; (80076e4 <HAL_HCD_MspInit+0xbc>)
 8007654:	f043 0301 	orr.w	r3, r3, #1
 8007658:	6313      	str	r3, [r2, #48]	; 0x30
 800765a:	4b22      	ldr	r3, [pc, #136]	; (80076e4 <HAL_HCD_MspInit+0xbc>)
 800765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	613b      	str	r3, [r7, #16]
 8007664:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800766a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800766c:	2300      	movs	r3, #0
 800766e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007670:	2300      	movs	r3, #0
 8007672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007674:	f107 0314 	add.w	r3, r7, #20
 8007678:	4619      	mov	r1, r3
 800767a:	481b      	ldr	r0, [pc, #108]	; (80076e8 <HAL_HCD_MspInit+0xc0>)
 800767c:	f7f9 fd86 	bl	800118c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007680:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007686:	2302      	movs	r3, #2
 8007688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800768a:	2300      	movs	r3, #0
 800768c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800768e:	2303      	movs	r3, #3
 8007690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007692:	230a      	movs	r3, #10
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007696:	f107 0314 	add.w	r3, r7, #20
 800769a:	4619      	mov	r1, r3
 800769c:	4812      	ldr	r0, [pc, #72]	; (80076e8 <HAL_HCD_MspInit+0xc0>)
 800769e:	f7f9 fd75 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80076a2:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <HAL_HCD_MspInit+0xbc>)
 80076a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a6:	4a0f      	ldr	r2, [pc, #60]	; (80076e4 <HAL_HCD_MspInit+0xbc>)
 80076a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ac:	6353      	str	r3, [r2, #52]	; 0x34
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	4b0c      	ldr	r3, [pc, #48]	; (80076e4 <HAL_HCD_MspInit+0xbc>)
 80076b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b6:	4a0b      	ldr	r2, [pc, #44]	; (80076e4 <HAL_HCD_MspInit+0xbc>)
 80076b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076bc:	6453      	str	r3, [r2, #68]	; 0x44
 80076be:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <HAL_HCD_MspInit+0xbc>)
 80076c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076ca:	2200      	movs	r2, #0
 80076cc:	2100      	movs	r1, #0
 80076ce:	2043      	movs	r0, #67	; 0x43
 80076d0:	f7f9 fd25 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80076d4:	2043      	movs	r0, #67	; 0x43
 80076d6:	f7f9 fd3e 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076da:	bf00      	nop
 80076dc:	3728      	adds	r7, #40	; 0x28
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	40023800 	.word	0x40023800
 80076e8:	40020000 	.word	0x40020000

080076ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe ffeb 	bl	80066d6 <USBH_LL_IncTimer>
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff f823 	bl	8006762 <USBH_LL_Connect>
}
 800771c:	bf00      	nop
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007732:	4618      	mov	r0, r3
 8007734:	f7ff f82c 	bl	8006790 <USBH_LL_Disconnect>
}
 8007738:	bf00      	nop
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
 800774c:	4613      	mov	r3, r2
 800774e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe ffdd 	bl	800672a <USBH_LL_PortEnabled>
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe ffdd 	bl	8006746 <USBH_LL_PortDisabled>
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d12a      	bne.n	80077fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80077a6:	4a18      	ldr	r2, [pc, #96]	; (8007808 <USBH_LL_Init+0x74>)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a15      	ldr	r2, [pc, #84]	; (8007808 <USBH_LL_Init+0x74>)
 80077b2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80077b6:	4b14      	ldr	r3, [pc, #80]	; (8007808 <USBH_LL_Init+0x74>)
 80077b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80077bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80077be:	4b12      	ldr	r3, [pc, #72]	; (8007808 <USBH_LL_Init+0x74>)
 80077c0:	2208      	movs	r2, #8
 80077c2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80077c4:	4b10      	ldr	r3, [pc, #64]	; (8007808 <USBH_LL_Init+0x74>)
 80077c6:	2201      	movs	r2, #1
 80077c8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077ca:	4b0f      	ldr	r3, [pc, #60]	; (8007808 <USBH_LL_Init+0x74>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80077d0:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <USBH_LL_Init+0x74>)
 80077d2:	2202      	movs	r2, #2
 80077d4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80077d6:	4b0c      	ldr	r3, [pc, #48]	; (8007808 <USBH_LL_Init+0x74>)
 80077d8:	2200      	movs	r2, #0
 80077da:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80077dc:	480a      	ldr	r0, [pc, #40]	; (8007808 <USBH_LL_Init+0x74>)
 80077de:	f7f9 fea4 	bl	800152a <HAL_HCD_Init>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80077e8:	f7f9 f9d6 	bl	8000b98 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80077ec:	4806      	ldr	r0, [pc, #24]	; (8007808 <USBH_LL_Init+0x74>)
 80077ee:	f7fa fa88 	bl	8001d02 <HAL_HCD_GetCurrentFrame>
 80077f2:	4603      	mov	r3, r0
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fe ff5e 	bl	80066b8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	200005b8 	.word	0x200005b8

0800780c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007822:	4618      	mov	r0, r3
 8007824:	f7fa f9f7 	bl	8001c16 <HAL_HCD_Start>
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	4618      	mov	r0, r3
 8007830:	f000 f95c 	bl	8007aec <USBH_Get_USB_Status>
 8007834:	4603      	mov	r3, r0
 8007836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007838:	7bbb      	ldrb	r3, [r7, #14]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007858:	4618      	mov	r0, r3
 800785a:	f7fa f9ff 	bl	8001c5c <HAL_HCD_Stop>
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	4618      	mov	r0, r3
 8007866:	f000 f941 	bl	8007aec <USBH_Get_USB_Status>
 800786a:	4603      	mov	r3, r0
 800786c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800786e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007880:	2301      	movs	r3, #1
 8007882:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800788a:	4618      	mov	r0, r3
 800788c:	f7fa fa47 	bl	8001d1e <HAL_HCD_GetCurrentSpeed>
 8007890:	4603      	mov	r3, r0
 8007892:	2b02      	cmp	r3, #2
 8007894:	d00c      	beq.n	80078b0 <USBH_LL_GetSpeed+0x38>
 8007896:	2b02      	cmp	r3, #2
 8007898:	d80d      	bhi.n	80078b6 <USBH_LL_GetSpeed+0x3e>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <USBH_LL_GetSpeed+0x2c>
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d003      	beq.n	80078aa <USBH_LL_GetSpeed+0x32>
 80078a2:	e008      	b.n	80078b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]
    break;
 80078a8:	e008      	b.n	80078bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80078aa:	2301      	movs	r3, #1
 80078ac:	73fb      	strb	r3, [r7, #15]
    break;
 80078ae:	e005      	b.n	80078bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80078b0:	2302      	movs	r3, #2
 80078b2:	73fb      	strb	r3, [r7, #15]
    break;
 80078b4:	e002      	b.n	80078bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80078b6:	2301      	movs	r3, #1
 80078b8:	73fb      	strb	r3, [r7, #15]
    break;
 80078ba:	bf00      	nop
  }
  return  speed;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fa f9da 	bl	8001c96 <HAL_HCD_ResetPort>
 80078e2:	4603      	mov	r3, r0
 80078e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 f8ff 	bl	8007aec <USBH_Get_USB_Status>
 80078ee:	4603      	mov	r3, r0
 80078f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800790e:	78fa      	ldrb	r2, [r7, #3]
 8007910:	4611      	mov	r1, r2
 8007912:	4618      	mov	r0, r3
 8007914:	f7fa f9e1 	bl	8001cda <HAL_HCD_HC_GetXferCount>
 8007918:	4603      	mov	r3, r0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007922:	b590      	push	{r4, r7, lr}
 8007924:	b089      	sub	sp, #36	; 0x24
 8007926:	af04      	add	r7, sp, #16
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	4608      	mov	r0, r1
 800792c:	4611      	mov	r1, r2
 800792e:	461a      	mov	r2, r3
 8007930:	4603      	mov	r3, r0
 8007932:	70fb      	strb	r3, [r7, #3]
 8007934:	460b      	mov	r3, r1
 8007936:	70bb      	strb	r3, [r7, #2]
 8007938:	4613      	mov	r3, r2
 800793a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007940:	2300      	movs	r3, #0
 8007942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800794a:	787c      	ldrb	r4, [r7, #1]
 800794c:	78ba      	ldrb	r2, [r7, #2]
 800794e:	78f9      	ldrb	r1, [r7, #3]
 8007950:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007952:	9302      	str	r3, [sp, #8]
 8007954:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	4623      	mov	r3, r4
 8007962:	f7f9 fe44 	bl	80015ee <HAL_HCD_HC_Init>
 8007966:	4603      	mov	r3, r0
 8007968:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f8bd 	bl	8007aec <USBH_Get_USB_Status>
 8007972:	4603      	mov	r3, r0
 8007974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007976:	7bbb      	ldrb	r3, [r7, #14]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	bd90      	pop	{r4, r7, pc}

08007980 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800799a:	78fa      	ldrb	r2, [r7, #3]
 800799c:	4611      	mov	r1, r2
 800799e:	4618      	mov	r0, r3
 80079a0:	f7f9 feb4 	bl	800170c <HAL_HCD_HC_Halt>
 80079a4:	4603      	mov	r3, r0
 80079a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 f89e 	bl	8007aec <USBH_Get_USB_Status>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80079be:	b590      	push	{r4, r7, lr}
 80079c0:	b089      	sub	sp, #36	; 0x24
 80079c2:	af04      	add	r7, sp, #16
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	4608      	mov	r0, r1
 80079c8:	4611      	mov	r1, r2
 80079ca:	461a      	mov	r2, r3
 80079cc:	4603      	mov	r3, r0
 80079ce:	70fb      	strb	r3, [r7, #3]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70bb      	strb	r3, [r7, #2]
 80079d4:	4613      	mov	r3, r2
 80079d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80079e6:	787c      	ldrb	r4, [r7, #1]
 80079e8:	78ba      	ldrb	r2, [r7, #2]
 80079ea:	78f9      	ldrb	r1, [r7, #3]
 80079ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079f0:	9303      	str	r3, [sp, #12]
 80079f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079f4:	9302      	str	r3, [sp, #8]
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	4623      	mov	r3, r4
 8007a02:	f7f9 fea7 	bl	8001754 <HAL_HCD_HC_SubmitRequest>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f86d 	bl	8007aec <USBH_Get_USB_Status>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd90      	pop	{r4, r7, pc}

08007a20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a32:	78fa      	ldrb	r2, [r7, #3]
 8007a34:	4611      	mov	r1, r2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fa f93b 	bl	8001cb2 <HAL_HCD_HC_GetURBState>
 8007a3c:	4603      	mov	r3, r0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d103      	bne.n	8007a64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007a5c:	78fb      	ldrb	r3, [r7, #3]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 f870 	bl	8007b44 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007a64:	20c8      	movs	r0, #200	; 0xc8
 8007a66:	f7f9 fa5b 	bl	8000f20 <HAL_Delay>
  return USBH_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
 8007a80:	4613      	mov	r3, r2
 8007a82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007a8c:	78fb      	ldrb	r3, [r7, #3]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	212c      	movs	r1, #44	; 0x2c
 8007a92:	fb01 f303 	mul.w	r3, r1, r3
 8007a96:	4413      	add	r3, r2
 8007a98:	333b      	adds	r3, #59	; 0x3b
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d009      	beq.n	8007ab4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	212c      	movs	r1, #44	; 0x2c
 8007aa6:	fb01 f303 	mul.w	r3, r1, r3
 8007aaa:	4413      	add	r3, r2
 8007aac:	3354      	adds	r3, #84	; 0x54
 8007aae:	78ba      	ldrb	r2, [r7, #2]
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	e008      	b.n	8007ac6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007ab4:	78fb      	ldrb	r3, [r7, #3]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	212c      	movs	r1, #44	; 0x2c
 8007aba:	fb01 f303 	mul.w	r3, r1, r3
 8007abe:	4413      	add	r3, r2
 8007ac0:	3355      	adds	r3, #85	; 0x55
 8007ac2:	78ba      	ldrb	r2, [r7, #2]
 8007ac4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7f9 fa1f 	bl	8000f20 <HAL_Delay>
}
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d817      	bhi.n	8007b30 <USBH_Get_USB_Status+0x44>
 8007b00:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <USBH_Get_USB_Status+0x1c>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b19 	.word	0x08007b19
 8007b0c:	08007b1f 	.word	0x08007b1f
 8007b10:	08007b25 	.word	0x08007b25
 8007b14:	08007b2b 	.word	0x08007b2b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b1c:	e00b      	b.n	8007b36 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007b1e:	2302      	movs	r3, #2
 8007b20:	73fb      	strb	r3, [r7, #15]
    break;
 8007b22:	e008      	b.n	8007b36 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007b24:	2301      	movs	r3, #1
 8007b26:	73fb      	strb	r3, [r7, #15]
    break;
 8007b28:	e005      	b.n	8007b36 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b2e:	e002      	b.n	8007b36 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007b30:	2302      	movs	r3, #2
 8007b32:	73fb      	strb	r3, [r7, #15]
    break;
 8007b34:	bf00      	nop
  }
  return usb_status;
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d102      	bne.n	8007b5e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]
 8007b5c:	e001      	b.n	8007b62 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	461a      	mov	r2, r3
 8007b66:	2101      	movs	r1, #1
 8007b68:	4803      	ldr	r0, [pc, #12]	; (8007b78 <MX_DriverVbusFS+0x34>)
 8007b6a:	f7f9 fcab 	bl	80014c4 <HAL_GPIO_WritePin>
}
 8007b6e:	bf00      	nop
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	40020800 	.word	0x40020800

08007b7c <malloc>:
 8007b7c:	4b02      	ldr	r3, [pc, #8]	; (8007b88 <malloc+0xc>)
 8007b7e:	4601      	mov	r1, r0
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	f000 b82b 	b.w	8007bdc <_malloc_r>
 8007b86:	bf00      	nop
 8007b88:	20000078 	.word	0x20000078

08007b8c <free>:
 8007b8c:	4b02      	ldr	r3, [pc, #8]	; (8007b98 <free+0xc>)
 8007b8e:	4601      	mov	r1, r0
 8007b90:	6818      	ldr	r0, [r3, #0]
 8007b92:	f000 b8f3 	b.w	8007d7c <_free_r>
 8007b96:	bf00      	nop
 8007b98:	20000078 	.word	0x20000078

08007b9c <sbrk_aligned>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	4e0e      	ldr	r6, [pc, #56]	; (8007bd8 <sbrk_aligned+0x3c>)
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	6831      	ldr	r1, [r6, #0]
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	b911      	cbnz	r1, 8007bae <sbrk_aligned+0x12>
 8007ba8:	f000 f8ac 	bl	8007d04 <_sbrk_r>
 8007bac:	6030      	str	r0, [r6, #0]
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f000 f8a7 	bl	8007d04 <_sbrk_r>
 8007bb6:	1c43      	adds	r3, r0, #1
 8007bb8:	d00a      	beq.n	8007bd0 <sbrk_aligned+0x34>
 8007bba:	1cc4      	adds	r4, r0, #3
 8007bbc:	f024 0403 	bic.w	r4, r4, #3
 8007bc0:	42a0      	cmp	r0, r4
 8007bc2:	d007      	beq.n	8007bd4 <sbrk_aligned+0x38>
 8007bc4:	1a21      	subs	r1, r4, r0
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f000 f89c 	bl	8007d04 <_sbrk_r>
 8007bcc:	3001      	adds	r0, #1
 8007bce:	d101      	bne.n	8007bd4 <sbrk_aligned+0x38>
 8007bd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	200008c0 	.word	0x200008c0

08007bdc <_malloc_r>:
 8007bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be0:	1ccd      	adds	r5, r1, #3
 8007be2:	f025 0503 	bic.w	r5, r5, #3
 8007be6:	3508      	adds	r5, #8
 8007be8:	2d0c      	cmp	r5, #12
 8007bea:	bf38      	it	cc
 8007bec:	250c      	movcc	r5, #12
 8007bee:	2d00      	cmp	r5, #0
 8007bf0:	4607      	mov	r7, r0
 8007bf2:	db01      	blt.n	8007bf8 <_malloc_r+0x1c>
 8007bf4:	42a9      	cmp	r1, r5
 8007bf6:	d905      	bls.n	8007c04 <_malloc_r+0x28>
 8007bf8:	230c      	movs	r3, #12
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	2600      	movs	r6, #0
 8007bfe:	4630      	mov	r0, r6
 8007c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007cd8 <_malloc_r+0xfc>
 8007c08:	f000 f868 	bl	8007cdc <__malloc_lock>
 8007c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c10:	461c      	mov	r4, r3
 8007c12:	bb5c      	cbnz	r4, 8007c6c <_malloc_r+0x90>
 8007c14:	4629      	mov	r1, r5
 8007c16:	4638      	mov	r0, r7
 8007c18:	f7ff ffc0 	bl	8007b9c <sbrk_aligned>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	4604      	mov	r4, r0
 8007c20:	d155      	bne.n	8007cce <_malloc_r+0xf2>
 8007c22:	f8d8 4000 	ldr.w	r4, [r8]
 8007c26:	4626      	mov	r6, r4
 8007c28:	2e00      	cmp	r6, #0
 8007c2a:	d145      	bne.n	8007cb8 <_malloc_r+0xdc>
 8007c2c:	2c00      	cmp	r4, #0
 8007c2e:	d048      	beq.n	8007cc2 <_malloc_r+0xe6>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	4631      	mov	r1, r6
 8007c34:	4638      	mov	r0, r7
 8007c36:	eb04 0903 	add.w	r9, r4, r3
 8007c3a:	f000 f863 	bl	8007d04 <_sbrk_r>
 8007c3e:	4581      	cmp	r9, r0
 8007c40:	d13f      	bne.n	8007cc2 <_malloc_r+0xe6>
 8007c42:	6821      	ldr	r1, [r4, #0]
 8007c44:	1a6d      	subs	r5, r5, r1
 8007c46:	4629      	mov	r1, r5
 8007c48:	4638      	mov	r0, r7
 8007c4a:	f7ff ffa7 	bl	8007b9c <sbrk_aligned>
 8007c4e:	3001      	adds	r0, #1
 8007c50:	d037      	beq.n	8007cc2 <_malloc_r+0xe6>
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	442b      	add	r3, r5
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	f8d8 3000 	ldr.w	r3, [r8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d038      	beq.n	8007cd2 <_malloc_r+0xf6>
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	42a2      	cmp	r2, r4
 8007c64:	d12b      	bne.n	8007cbe <_malloc_r+0xe2>
 8007c66:	2200      	movs	r2, #0
 8007c68:	605a      	str	r2, [r3, #4]
 8007c6a:	e00f      	b.n	8007c8c <_malloc_r+0xb0>
 8007c6c:	6822      	ldr	r2, [r4, #0]
 8007c6e:	1b52      	subs	r2, r2, r5
 8007c70:	d41f      	bmi.n	8007cb2 <_malloc_r+0xd6>
 8007c72:	2a0b      	cmp	r2, #11
 8007c74:	d917      	bls.n	8007ca6 <_malloc_r+0xca>
 8007c76:	1961      	adds	r1, r4, r5
 8007c78:	42a3      	cmp	r3, r4
 8007c7a:	6025      	str	r5, [r4, #0]
 8007c7c:	bf18      	it	ne
 8007c7e:	6059      	strne	r1, [r3, #4]
 8007c80:	6863      	ldr	r3, [r4, #4]
 8007c82:	bf08      	it	eq
 8007c84:	f8c8 1000 	streq.w	r1, [r8]
 8007c88:	5162      	str	r2, [r4, r5]
 8007c8a:	604b      	str	r3, [r1, #4]
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	f104 060b 	add.w	r6, r4, #11
 8007c92:	f000 f829 	bl	8007ce8 <__malloc_unlock>
 8007c96:	f026 0607 	bic.w	r6, r6, #7
 8007c9a:	1d23      	adds	r3, r4, #4
 8007c9c:	1af2      	subs	r2, r6, r3
 8007c9e:	d0ae      	beq.n	8007bfe <_malloc_r+0x22>
 8007ca0:	1b9b      	subs	r3, r3, r6
 8007ca2:	50a3      	str	r3, [r4, r2]
 8007ca4:	e7ab      	b.n	8007bfe <_malloc_r+0x22>
 8007ca6:	42a3      	cmp	r3, r4
 8007ca8:	6862      	ldr	r2, [r4, #4]
 8007caa:	d1dd      	bne.n	8007c68 <_malloc_r+0x8c>
 8007cac:	f8c8 2000 	str.w	r2, [r8]
 8007cb0:	e7ec      	b.n	8007c8c <_malloc_r+0xb0>
 8007cb2:	4623      	mov	r3, r4
 8007cb4:	6864      	ldr	r4, [r4, #4]
 8007cb6:	e7ac      	b.n	8007c12 <_malloc_r+0x36>
 8007cb8:	4634      	mov	r4, r6
 8007cba:	6876      	ldr	r6, [r6, #4]
 8007cbc:	e7b4      	b.n	8007c28 <_malloc_r+0x4c>
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	e7cc      	b.n	8007c5c <_malloc_r+0x80>
 8007cc2:	230c      	movs	r3, #12
 8007cc4:	603b      	str	r3, [r7, #0]
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	f000 f80e 	bl	8007ce8 <__malloc_unlock>
 8007ccc:	e797      	b.n	8007bfe <_malloc_r+0x22>
 8007cce:	6025      	str	r5, [r4, #0]
 8007cd0:	e7dc      	b.n	8007c8c <_malloc_r+0xb0>
 8007cd2:	605b      	str	r3, [r3, #4]
 8007cd4:	deff      	udf	#255	; 0xff
 8007cd6:	bf00      	nop
 8007cd8:	200008bc 	.word	0x200008bc

08007cdc <__malloc_lock>:
 8007cdc:	4801      	ldr	r0, [pc, #4]	; (8007ce4 <__malloc_lock+0x8>)
 8007cde:	f000 b84b 	b.w	8007d78 <__retarget_lock_acquire_recursive>
 8007ce2:	bf00      	nop
 8007ce4:	200009fc 	.word	0x200009fc

08007ce8 <__malloc_unlock>:
 8007ce8:	4801      	ldr	r0, [pc, #4]	; (8007cf0 <__malloc_unlock+0x8>)
 8007cea:	f000 b846 	b.w	8007d7a <__retarget_lock_release_recursive>
 8007cee:	bf00      	nop
 8007cf0:	200009fc 	.word	0x200009fc

08007cf4 <memset>:
 8007cf4:	4402      	add	r2, r0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d100      	bne.n	8007cfe <memset+0xa>
 8007cfc:	4770      	bx	lr
 8007cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007d02:	e7f9      	b.n	8007cf8 <memset+0x4>

08007d04 <_sbrk_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4d06      	ldr	r5, [pc, #24]	; (8007d20 <_sbrk_r+0x1c>)
 8007d08:	2300      	movs	r3, #0
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	602b      	str	r3, [r5, #0]
 8007d10:	f7f9 f822 	bl	8000d58 <_sbrk>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d102      	bne.n	8007d1e <_sbrk_r+0x1a>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	b103      	cbz	r3, 8007d1e <_sbrk_r+0x1a>
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	20000a00 	.word	0x20000a00

08007d24 <__errno>:
 8007d24:	4b01      	ldr	r3, [pc, #4]	; (8007d2c <__errno+0x8>)
 8007d26:	6818      	ldr	r0, [r3, #0]
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	20000078 	.word	0x20000078

08007d30 <__libc_init_array>:
 8007d30:	b570      	push	{r4, r5, r6, lr}
 8007d32:	4d0d      	ldr	r5, [pc, #52]	; (8007d68 <__libc_init_array+0x38>)
 8007d34:	4c0d      	ldr	r4, [pc, #52]	; (8007d6c <__libc_init_array+0x3c>)
 8007d36:	1b64      	subs	r4, r4, r5
 8007d38:	10a4      	asrs	r4, r4, #2
 8007d3a:	2600      	movs	r6, #0
 8007d3c:	42a6      	cmp	r6, r4
 8007d3e:	d109      	bne.n	8007d54 <__libc_init_array+0x24>
 8007d40:	4d0b      	ldr	r5, [pc, #44]	; (8007d70 <__libc_init_array+0x40>)
 8007d42:	4c0c      	ldr	r4, [pc, #48]	; (8007d74 <__libc_init_array+0x44>)
 8007d44:	f000 f866 	bl	8007e14 <_init>
 8007d48:	1b64      	subs	r4, r4, r5
 8007d4a:	10a4      	asrs	r4, r4, #2
 8007d4c:	2600      	movs	r6, #0
 8007d4e:	42a6      	cmp	r6, r4
 8007d50:	d105      	bne.n	8007d5e <__libc_init_array+0x2e>
 8007d52:	bd70      	pop	{r4, r5, r6, pc}
 8007d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d58:	4798      	blx	r3
 8007d5a:	3601      	adds	r6, #1
 8007d5c:	e7ee      	b.n	8007d3c <__libc_init_array+0xc>
 8007d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d62:	4798      	blx	r3
 8007d64:	3601      	adds	r6, #1
 8007d66:	e7f2      	b.n	8007d4e <__libc_init_array+0x1e>
 8007d68:	08007e50 	.word	0x08007e50
 8007d6c:	08007e50 	.word	0x08007e50
 8007d70:	08007e50 	.word	0x08007e50
 8007d74:	08007e54 	.word	0x08007e54

08007d78 <__retarget_lock_acquire_recursive>:
 8007d78:	4770      	bx	lr

08007d7a <__retarget_lock_release_recursive>:
 8007d7a:	4770      	bx	lr

08007d7c <_free_r>:
 8007d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d7e:	2900      	cmp	r1, #0
 8007d80:	d044      	beq.n	8007e0c <_free_r+0x90>
 8007d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d86:	9001      	str	r0, [sp, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d8e:	bfb8      	it	lt
 8007d90:	18e4      	addlt	r4, r4, r3
 8007d92:	f7ff ffa3 	bl	8007cdc <__malloc_lock>
 8007d96:	4a1e      	ldr	r2, [pc, #120]	; (8007e10 <_free_r+0x94>)
 8007d98:	9801      	ldr	r0, [sp, #4]
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	b933      	cbnz	r3, 8007dac <_free_r+0x30>
 8007d9e:	6063      	str	r3, [r4, #4]
 8007da0:	6014      	str	r4, [r2, #0]
 8007da2:	b003      	add	sp, #12
 8007da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007da8:	f7ff bf9e 	b.w	8007ce8 <__malloc_unlock>
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	d908      	bls.n	8007dc2 <_free_r+0x46>
 8007db0:	6825      	ldr	r5, [r4, #0]
 8007db2:	1961      	adds	r1, r4, r5
 8007db4:	428b      	cmp	r3, r1
 8007db6:	bf01      	itttt	eq
 8007db8:	6819      	ldreq	r1, [r3, #0]
 8007dba:	685b      	ldreq	r3, [r3, #4]
 8007dbc:	1949      	addeq	r1, r1, r5
 8007dbe:	6021      	streq	r1, [r4, #0]
 8007dc0:	e7ed      	b.n	8007d9e <_free_r+0x22>
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	b10b      	cbz	r3, 8007dcc <_free_r+0x50>
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	d9fa      	bls.n	8007dc2 <_free_r+0x46>
 8007dcc:	6811      	ldr	r1, [r2, #0]
 8007dce:	1855      	adds	r5, r2, r1
 8007dd0:	42a5      	cmp	r5, r4
 8007dd2:	d10b      	bne.n	8007dec <_free_r+0x70>
 8007dd4:	6824      	ldr	r4, [r4, #0]
 8007dd6:	4421      	add	r1, r4
 8007dd8:	1854      	adds	r4, r2, r1
 8007dda:	42a3      	cmp	r3, r4
 8007ddc:	6011      	str	r1, [r2, #0]
 8007dde:	d1e0      	bne.n	8007da2 <_free_r+0x26>
 8007de0:	681c      	ldr	r4, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	6053      	str	r3, [r2, #4]
 8007de6:	440c      	add	r4, r1
 8007de8:	6014      	str	r4, [r2, #0]
 8007dea:	e7da      	b.n	8007da2 <_free_r+0x26>
 8007dec:	d902      	bls.n	8007df4 <_free_r+0x78>
 8007dee:	230c      	movs	r3, #12
 8007df0:	6003      	str	r3, [r0, #0]
 8007df2:	e7d6      	b.n	8007da2 <_free_r+0x26>
 8007df4:	6825      	ldr	r5, [r4, #0]
 8007df6:	1961      	adds	r1, r4, r5
 8007df8:	428b      	cmp	r3, r1
 8007dfa:	bf04      	itt	eq
 8007dfc:	6819      	ldreq	r1, [r3, #0]
 8007dfe:	685b      	ldreq	r3, [r3, #4]
 8007e00:	6063      	str	r3, [r4, #4]
 8007e02:	bf04      	itt	eq
 8007e04:	1949      	addeq	r1, r1, r5
 8007e06:	6021      	streq	r1, [r4, #0]
 8007e08:	6054      	str	r4, [r2, #4]
 8007e0a:	e7ca      	b.n	8007da2 <_free_r+0x26>
 8007e0c:	b003      	add	sp, #12
 8007e0e:	bd30      	pop	{r4, r5, pc}
 8007e10:	200008bc 	.word	0x200008bc

08007e14 <_init>:
 8007e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e16:	bf00      	nop
 8007e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e1a:	bc08      	pop	{r3}
 8007e1c:	469e      	mov	lr, r3
 8007e1e:	4770      	bx	lr

08007e20 <_fini>:
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e22:	bf00      	nop
 8007e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e26:	bc08      	pop	{r3}
 8007e28:	469e      	mov	lr, r3
 8007e2a:	4770      	bx	lr
